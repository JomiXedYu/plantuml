@startuml
abstract class net.sourceforge.plantuml.TitledDiagram {
+ {static} boolean FORCE_SMETANA
+ {static} boolean FORCE_ELK
- DisplayPositionned title
- DisplayPositionned caption
- DisplayPositionned legend
- DisplaySection header
- DisplaySection footer
- Display mainFrame
- UmlDiagramType type
- SkinParam skinParam
- Animation animation
- Pragma pragma
- boolean useSmetana
- boolean useElk
+ Pragma getPragma()
+ StyleBuilder getCurrentStyleBuilder()
+ UmlDiagramType getUmlDiagramType()
+ ISkinParam getSkinParam()
+ void setParam(String,String)
+ void addSprite(String,Sprite)
+ CommandExecutionResult loadSkin(String)
+ void setTitle(DisplayPositionned)
+ DisplayPositionned getTitle()
+ void setMainFrame(Display)
+ void setCaption(DisplayPositionned)
+ DisplayPositionned getCaption()
+ DisplaySection getHeader()
+ DisplaySection getFooter()
+ DisplayPositionned getLegend()
+ void setLegend(DisplayPositionned)
+ Display getMainFrame()
+ void setUseSmetana(boolean)
+ void setUseElk(boolean)
+ boolean isUseElk()
+ boolean isUseSmetana()
+ ClockwiseTopRightBottomLeft getDefaultMargins()
+ void setAnimation(Iterable<CharSequence>)
+ Animation getAnimation()
+ ImageBuilder createImageBuilder(FileFormatOption)
+ HColor calculateBackColor()
}
class net.sourceforge.plantuml.command.CommandFooter {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.project.lang.Verbs {
+ {static} IRegex are()
+ {static} IRegex areColored()
+ {static} IRegex displayOnSameRowAs()
+ {static} IRegex ends()
+ {static} IRegex ends2()
+ {static} IRegex happens()
+ {static} IRegex pauses()
+ {static} IRegex isDeleted()
+ {static} IRegex is()
+ {static} IRegex isColored()
+ {static} IRegex isOff()
+ {static} IRegex isOn()
+ {static} IRegex isOrAre()
+ {static} IRegex isOrAreNamed()
+ {static} IRegex lasts()
+ {static} IRegex linksTo()
+ {static} IRegex occurs()
+ {static} IRegex starts3()
+ {static} IRegex starts2()
+ {static} IRegex starts()
}
abstract class net.sourceforge.plantuml.ugraphic.AbstractUGraphicHorizontalLine {
- UTranslate translate
+ UGraphic apply(UChange)
# {abstract}AbstractUGraphicHorizontalLine copy(UGraphic)
# {abstract}void drawHline(UGraphic,UHorizontalLine,UTranslate)
+ void draw(UShape)
}
class net.sourceforge.plantuml.api.MagicArray {
- int[] data
- int size
- long lastUpdatedKey
- int lastUpdatedValue
- long sum
- long maxSum
+ void incKey(long)
+ void incKey(long,int)
- void setValue(long,int)
+ long getSum()
+ long getMaxSum()
- long getSumSlow()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandWhileEnd3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondSquare {
- HColor backColor
- HColor borderColor
- Swimlane swimlane
- TextBlock label
- TextBlock west
- TextBlock east
- TextBlock north
- TextBlock south
+ Collection<Ftile> getMyChildren()
+ FtileDiamondSquare withNorth(TextBlock)
+ FtileDiamondSquare withWest(TextBlock)
+ FtileDiamondSquare withEast(TextBlock)
+ FtileDiamondSquare withSouth(TextBlock)
+ Ftile withWestAndEast(TextBlock,TextBlock)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
- Dimension2D calculateDimensionInternal(StringBounder)
}
class net.sourceforge.plantuml.stats.StatsImpl {
- FormatCounter formatCounterCurrent
- FormatCounter formatCounterEver
- Map<String,ParsedGenerated> byTypeEver
- Map<String,ParsedGenerated> byTypeCurrent
- ParsedGenerated fullEver
- HistoricalData historicalData
- StatsLine createDataLineSession(ParsedGenerated)
- StatsLine createLineByDiagramType(String,NumberAnalyzed,NumberAnalyzed)
+ StatsTable getLastSessions()
+ StatsTable getCurrentSessionByFormat()
+ StatsTable getAllByFormat()
+ StatsTable getCurrentSessionByDiagramType()
+ StatsTable getAllByDiagramType()
- StatsTable getByDiagramType(String,Map<String,ParsedGenerated>)
}
class net.sourceforge.plantuml.nwdiag.CommandElement {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(NwDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.visio.DriverTextVdx {
- StringBounder stringBounder
+ void draw(UShape,double,double,ColorMapper,UParam,VisioGraphics)
}
class net.sourceforge.plantuml.donors.PSystemSkinparameterList {
# UDrawable getRootDrawable(FileFormatOption)
+ {static} List<TextBlock> getCols(List<String>,int)
- List<String> getDonors()
+ DiagramDescription getDescription()
+ {static} PSystemSkinparameterList create(UmlSource)
}
interface net.sourceforge.plantuml.SpecificBackcolorable {
+ Colors getColors(ISkinParam)
+ void setColors(Colors)
}
interface net.sourceforge.plantuml.project.lang.Something {
+ IRegex toRegex(String)
+ Failable<? extends Object> getMe(GanttDiagram,RegexResult,String)
}
abstract class net.sourceforge.plantuml.bpm.AbstractConnectorPuzzle {
- EnumSet<Where> connections
+ boolean have(Where)
+ void append(Where)
+ void remove(Where)
+ void append(ConnectorPuzzle)
# Set<Where> connections()
}
class net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox {
- {static} int CPT
- int outMargin
- double startingX
- Component head
- Component line
- Component tail
- Component delayLine
- int cpt
- List<GraphicalDelayText> delays
+ String toString()
+ double getMinX()
+ double getMaxX(StringBounder)
+ double getCenterX(StringBounder)
+ double getHeadHeight(StringBounder)
+ double getHeadHeightOnly(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getTailHeight(StringBounder)
+ void pushToLeft(double)
+ void drawHeadTailU(UGraphic,double,boolean,double)
+ void drawParticipantHead(UGraphic)
+ void drawLineU22(UGraphic,double,double,boolean,double)
- void drawLineIfLowerThan(UGraphic,double,double,Component,double)
- void drawLine(UGraphic,double,double,Component)
+ double magicMargin(StringBounder)
+ double getStartingX()
+ void addDelay(GraphicalDelayText)
+ Collection<Segment> getDelays(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale {
- Ftile tile
- Opale opale
- NotePosition notePosition
- double suppSpace
- Swimlane swimlaneNote
+ StyleSignature getDefaultStyleDefinition()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Collection<Ftile> getMyChildren()
+ {static} Ftile create(Ftile,Collection<PositionedNote>,ISkinParam,boolean)
- UTranslate getTranslate(StringBounder)
- UTranslate getTranslateForOpale(UGraphic)
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
- Dimension2D calculateDimensionInternal(StringBounder)
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
class net.sourceforge.plantuml.timingdiagram.graphic.Histogram {
- List<ChangeState> changes
- List<TimeConstraint> constraints
- List<String> allStates
- ISkinParam skinParam
- TimingRuler ruler
- boolean compact
- String initialState
- TextBlock title
- int suggestedHeight
+ IntricatedPoint getTimeProjection(StringBounder,TimeTick)
- List<String> getStatesAt(TimeTick)
+ void addChange(ChangeState)
- Point2D[] getPoints(int)
- double getPointx(int)
- double getPointMinY(int)
- double getPointMaxY(int)
- SymbolContext getContext()
+ TextBlock getPart1(double)
+ UDrawable getPart2()
- Dimension2D calculateDimensionPart1(StringBounder)
- void drawPart1(UGraphic,double)
- double getStatesWidth(StringBounder)
- void drawPart2(UGraphic)
- void drawHlines(UGraphic)
- void drawHBlock(UGraphic,Point2D,Point2D,double)
- void drawHLine(UGraphic,Point2D,double)
- void drawVlines(UGraphic)
- void drawLabels(UGraphic)
- void drawConstraints(UGraphic)
- {static} String last(List<String>)
- Point2D.Double getInitialPoint()
- double getHeightForConstraints(StringBounder)
+ double getFullHeight(StringBounder)
- double getBottomMargin()
- double yOfState(String)
- double stepHeight()
- FontConfiguration getFontConfiguration()
- TextBlock getTextBlock(String)
+ void setInitialState(String,Colors)
- double getInitialWidth()
+ void addConstraint(TimeConstraint)
}
abstract class net.sourceforge.plantuml.real.RealMoveable {
+ {static} AtomicInteger CPT
- int cpt
- String name
- Throwable creationPoint
~ {abstract}void move(double)
+ void printCreationStackTrace()
+ Real addFixed(double)
+ String toString()
+ String getName()
}
class net.sourceforge.plantuml.project.lang.ComplementDates {
+ IRegex toRegex(String)
+ Failable<DaysAsDates> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorIf {
- Pragma pragma
+ Ftile createIf(Swimlane,List<Branch>,Branch,LinkRendering,LinkRendering,Url)
- HColor fontColor(FontParam)
}
class net.sourceforge.plantuml.project.LabelStrategy {
- LabelPosition position
- HorizontalAlignment alignment
+ boolean titleInFirstColumn()
+ boolean titleInLastColumn()
+ boolean titleInside()
+ boolean rightAligned()
}
abstract class net.sourceforge.plantuml.activitydiagram3.ftile.AbstractConnection {
- Ftile ftile1
- Ftile ftile2
+ String toString()
+ Ftile getFtile1()
+ Ftile getFtile2()
+ HorizontalAlignment arrowHorizontalAlignment()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNotes {
- Ftile tile
- TextBlock left
- TextBlock right
- double suppSpace
+ StyleSignature getDefaultStyleDefinition()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
- UTranslate getTranslate(StringBounder)
- UTranslate getTranslateForLeft(StringBounder)
- UTranslate getTranslateForRight(StringBounder)
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
- Dimension2D calculateDimensionInternal(StringBounder)
}
class net.sourceforge.plantuml.eggs.PSystemRIPFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.webp.Globals {
+ {static} int DC_PRED
+ {static} int V_PRED
+ {static} int H_PRED
+ {static} int TM_PRED
+ {static} int B_PRED
+ {static} int B_DC_PRED
+ {static} int B_TM_PRED
+ {static} int B_VE_PRED
+ {static} int B_HE_PRED
+ {static} int B_LD_PRED
+ {static} int B_RD_PRED
+ {static} int B_VR_PRED
+ {static} int B_VL_PRED
+ {static} int B_HD_PRED
+ {static} int B_HU_PRED
+ {static} int MAX_MB_SEGMENTS
+ {static} int MB_LVL_MAX
+ {static} int[] vp8MacroBlockFeatureDataBits
+ {static} int MB_FEATURE_TREE_PROBS
+ {static} int[] macroBlockSegmentTree
+ {static} int[] vp8KeyFrameYModeTree
+ {static} int[] vp8SubBlockModeTree
+ {static} int[] vp8KeyFrameYModeProb
+ {static} int[] vp8UVModeTree
+ {static} int[] vp8KeyFrameUVModeProb
+ {static} int[][][] vp8KeyFrameSubBlockModeProb
~ {static} int[][][][] vp8CoefUpdateProbs
- {static} int[][][][] vp8DefaultCoefProbs
+ {static} int DCT_0
+ {static} int DCT_1
+ {static} int DCT_2
+ {static} int DCT_3
+ {static} int DCT_4
+ {static} int dct_cat1
+ {static} int dct_cat2
+ {static} int dct_cat3
+ {static} int dct_cat4
+ {static} int dct_cat5
+ {static} int dct_cat6
+ {static} int dct_eob
+ {static} int[] vp8CoefTree
+ {static} int[] vp8CoefTreeNoEOB
+ {static} int[] Pcat1
+ {static} int[] Pcat2
+ {static} int[] Pcat3
+ {static} int[] Pcat4
+ {static} int[] Pcat5
+ {static} int[] Pcat6
+ {static} int[] vp8CoefBands
+ {static} int[] vp8defaultZigZag1d
+ {static} int[] vp8dxBitreaderNorm
+ {static} int[] vp8DcQLookup
+ {static} int[] vp8AcQLookup
+ {static} String getModeAsString(int)
+ {static} String getSubBlockModeAsString(int)
+ {static} int[][][][] getDefaultCoefProbs()
+ {static} String toHex(int)
+ {static} int clamp(int,int)
}
class net.sourceforge.plantuml.project.command.CommandNoteBottom {
+ String getPatternEnd()
+ CommandExecutionResult execute(GanttDiagram,BlocLines)
}
class net.sourceforge.plantuml.SkinParamSameClassWidth {
- double width
+ double minClassWidth()
}
class net.sourceforge.plantuml.sprite.RessourcesUtils {
+ {static} Set<String> getJarFile(String,boolean)
- {static} String getProtocol()
- {static} Set<String> listFiles(JarFile,String)
- {static} Set<String> listFolders(JarFile,String)
- {static} Set<String> listEntry(SFile)
}
class net.sourceforge.plantuml.sequencediagram.graphic.DrawableSetInitializer {
- ComponentType defaultLineType
- DrawableSet drawableSet
- boolean showTail
- double freeX
- Frontier freeY2
- Frontier lastFreeY2
- double autonewpage
- ConstraintSet constraintSet
- InGroupablesStack inGroupableStack
- boolean useContinueLineBecauseOfDelay()
- ParticipantRange getFullParticipantRange()
- ParticipantRange getParticipantRange(Event)
+ DrawableSet createDrawableSet(StringBounder)
- void takeParticipantEngloberPadding(StringBounder)
- void takeParticipantEngloberTitleWidth(StringBounder)
- double getTotalHeight(double,StringBounder)
+ double getYposition(StringBounder,Newpage)
- void prepareMissingSpace(StringBounder)
- void prepareNewpage(StringBounder,Newpage,ParticipantRange)
- void prepareNewpageSpecial(StringBounder,Newpage,Event,ParticipantRange)
- void prepareDivider(StringBounder,Divider,ParticipantRange)
- void prepareHSpace(StringBounder,HSpace,ParticipantRange)
- void prepareDelay(StringBounder,Delay,List<ParticipantBox>,ParticipantRange)
- void prepareGroupingStart(StringBounder,GroupingStart,ParticipantRange)
- void prepareGroupingLeaf(StringBounder,GroupingLeaf,ParticipantRange)
- void prepareNote(StringBounder,Note,ParticipantRange)
- NoteBox createNoteBox(StringBounder,Note,ParticipantRange)
- void prepareNotes(StringBounder,Notes,ParticipantRange)
- void prepareLiveEvent(StringBounder,LifeEvent,ParticipantRange)
- void prepareMessageExo(StringBounder,MessageExo,ParticipantRange)
- void prepareMessage(StringBounder,Message,ParticipantRange)
- void prepareReference(StringBounder,Reference,ParticipantRange)
- void prepareParticipant(StringBounder,Participant)
+ void addParticipant(Participant,ParticipantEnglober)
+ void addEvent(Event)
}
class net.sourceforge.plantuml.eps.PostScriptCommandRaw {
- String cmd
+ String toPostString()
}
class net.sourceforge.plantuml.style.StyleBuilder {
- Map<StyleSignature,Style> styles
- Set<StyleSignature> printedForLog
- SkinParam skinParam
- int counter
+ void printMe()
+ SkinParam getSkinParam()
+ Style createStyle(String)
+ StyleBuilder muteStyle(Style)
+ void put(StyleSignature,Style)
+ int getNextInt()
+ Style getMergedStyle(StyleSignature)
}
class net.sourceforge.plantuml.project.draw.FingerPrint {
- double x
- double y
- double width
- double height
+ String toString()
+ double overlap(FingerPrint)
}
class net.sourceforge.plantuml.sprite.CommandListSprite {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(UmlDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.salt.element.ElementDroplist {
- int box
- TextBlock openDrop
- {static} String extract(String)
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
}
class net.sourceforge.plantuml.ugraphic.color.HColorSet {
- {static} HColorSet singleton
- Map<String,String> htmlNames
- Set<String> names
+ {static} HColorSet instance()
+ Collection<String> names()
- void register(String,String)
- Gradient gradientFromString(String)
- Automatic automaticFromString(String)
+ HColor getColorOrWhite(String)
+ HColor getColorOrWhite(ThemeStyle,String)
+ HColor getColorOrWhite(ThemeStyle,String,HColor)
+ HColor getColor(ThemeStyle,String)
+ HColor getColorLEGACY(String)
+ HColor getColor(ThemeStyle,String,HColor)
- boolean isColorValid(String)
- HColor build(String,HColor)
- Color fromRGBa(String)
- String removeFirstDieseAndgoLowerCase(String)
}
class net.sourceforge.plantuml.ugraphic.color.HColorSet.Gradient {
- String s1
- char sep
- String s2
~ boolean isValid()
~ HColorGradient buildInternal(HColor)
}
class net.sourceforge.plantuml.ugraphic.color.HColorSet.Automatic {
- String[] colors
~ boolean isValid()
~ HColorAutomatic buildInternal(ThemeStyle,HColor)
}
class net.sourceforge.plantuml.project.command.CommandPrintBetween {
- {static} ComplementDate pattern
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(GanttDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionStart {
- LinkRendering inlinkRendering
+ boolean containsBreak()
+ Ftile createFtile(FtileFactory)
+ void add(Instruction)
+ boolean kill()
+ LinkRendering getInLinkRendering()
}
class net.sourceforge.plantuml.project.lang.SentencePausesDate {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow {
- LivingParticipantBox p1
- LivingParticipantBox p2
- Component compAliveBox
+ double getActualWidth(StringBounder)
- double getLeftStartInternal(StringBounder)
- double getRightEndInternal(StringBounder)
+ double getPreferredHeight(StringBounder)
+ double getStartingX(StringBounder)
+ int getDirection(StringBounder)
+ LivingParticipantBox getParticipantAt(StringBounder,NotePosition)
+ double getPreferredWidth(StringBounder)
# void drawInternalU(UGraphic,double,Context2D)
- Dimension2D getActualDimension(StringBounder)
+ double getArrowYStartLevel(StringBounder)
+ double getArrowYEndLevel(StringBounder)
+ double getMaxX(StringBounder)
+ double getMinX(StringBounder)
+ String toString(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.EntityImageLegend {
+ {static} TextBlock create(Display,ISkinParam)
}
class net.sourceforge.plantuml.creole.atom.AtomTable {
- List<Line> lines
- Map<Atom,Position> positions
- HColor lineColor
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
- void initMap(StringBounder)
- double getStartingX(int)
- double getEndingX(int)
- double getStartingY(int)
- double getEndingY(int)
- double getColWidth(int)
- double getLineHeight(int)
- Position getPosition(int,int)
- int getNbCols()
- int getNbLines()
- Line lastLine()
+ void addCell(Atom,HColor)
+ void newLine(HColor)
}
class net.sourceforge.plantuml.creole.atom.AtomTable.Line {
- List<Atom> cells
- List<HColor> cellsBackColor
- HColor lineBackColor
+ void add(Atom,HColor)
+ int size()
+ String toString()
}
class net.sourceforge.plantuml.salt.PSystemSaltFactory2 {
# List<Command> createCommands()
+ PSystemSalt createEmptyDiagram(UmlSource,ISkinSimple)
}
interface net.sourceforge.plantuml.api.mda.option2.MDAEntity {
+ String getName()
}
class net.sourceforge.plantuml.Dimension2DDouble {
- double width
- double height
+ String toString()
+ double getHeight()
+ double getWidth()
+ void setSize(double,double)
+ {static} Dimension2D delta(Dimension2D,double)
+ Dimension2DDouble withWidth(double)
+ {static} Dimension2D delta(Dimension2D,double,double)
+ {static} Dimension2D mergeTB(Dimension2D,Dimension2D)
+ {static} Dimension2D mergeTB(Dimension2D,Dimension2D,Dimension2D)
+ {static} Dimension2D mergeLR(Dimension2D,Dimension2D)
+ {static} Dimension2D mergeLayoutT12B3(Dimension2D,Dimension2D,Dimension2D)
+ {static} Dimension2D max(Dimension2D,Dimension2D)
+ {static} Dimension2D atLeast(Dimension2D,double,double)
}
class net.sourceforge.plantuml.mindmap.CommandMindMapOrgmodeMultiline {
~ {static} IRegex getRegexConcat()
+ String getPatternEnd()
# CommandExecutionResult executeNow(MindMapDiagram,BlocLines)
}
class net.sourceforge.plantuml.svek.DecorateEntityImage3 {
- TextBlock original
- HColor color
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ HColor getBackcolor()
}
class net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes {
- List<NoteBox> notes
- List<ParticipantBox> participants1
- List<ParticipantBox> participants2
+ void add(NoteBox,ParticipantBox,ParticipantBox)
+ void ensureConstraints(StringBounder,ConstraintSet)
+ double getMinX(StringBounder)
+ double getMaxX(StringBounder)
+ String toString(StringBounder)
# void drawInternalU(UGraphic,double,Context2D)
+ double getStartingX(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverLineTikz {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryTab {
+ Terminated<Element> create()
+ boolean ready()
}
class net.sourceforge.plantuml.preproc.ImportedFiles {
- List<SFile> imported
- AParentFolder currentDir
+ ImportedFiles withCurrentDir(AParentFolder)
+ {static} ImportedFiles createImportedFiles(AParentFolder)
+ String toString()
+ AFile getAFile(String)
+ List<SFile> getPath()
- List<SFile> includePath()
- boolean isAbsolute(String)
+ void add(SFile)
+ AParentFolder getCurrentDir()
+ FileWithSuffix getFile(String,String)
- boolean isAllowed(AFile)
}
abstract class net.sourceforge.plantuml.sequencediagram.Grouping {
- String title
- GroupingType type
- String comment
- HColor backColorElement
- Style style
- Style styleHeader
+ StyleSignature getDefaultStyleDefinition()
- StyleSignature getHeaderStyleDefinition()
+ Style[] getUsedStyles()
+ String toString()
+ String getTitle()
+ GroupingType getType()
+ {abstract}int getLevel()
+ {abstract}HColor getBackColorGeneral()
+ String getComment()
+ HColor getBackColorElement()
+ {abstract}boolean isParallel()
}
class net.sourceforge.plantuml.svek.Control {
- double margin
- double radius
- SymbolContext symbolContext
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.project.core.MomentImpl {
- Day start
- Day end
+ Day getStart()
+ Day getEnd()
}
class net.sourceforge.plantuml.elk.proxy.graph.ElkEdge {
+ ElkNode getContainingNode()
+ Collection<ElkLabel> getLabels()
+ List<ElkEdgeSection> getSections()
+ boolean isHierarchical()
}
class net.sourceforge.plantuml.creole.command.CommandCreoleStyle {
- FontStyle style
- boolean tryExtendedColor
+ {static} Command createCreole(FontStyle)
+ {static} Command createLegacy(FontStyle)
+ {static} Command createLegacyEol(FontStyle)
- HColor getExtendedColor(Matcher2)
+ String executeAndGetRemaining(String,StripeSimple)
+ int matchingSize(String)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandBoxStart {
~ {static} IRegex getRegexConcat()
- {static} ColorParser color()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandNote3 {
- {static} ColorParser color()
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileDecorateWelding {
- List<WeldingPoint> breaks
+ List<WeldingPoint> getWeldingPoints()
}
class net.sourceforge.plantuml.command.CommandRankDir {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(CucaDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.color.NoSuchColorException {
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverImageG2d {
- EnsureVisible visible
- double dpiFactor
+ void draw(UShape,double,double,ColorMapper,UParam,Graphics2D)
}
class net.sourceforge.plantuml.bpm.BpmBranch {
- int uid
- int counter
+ int incAndGetCounter()
- String getEntryId()
- String getExitId()
+ BpmElement getEntryElement()
+ BpmElement getElseElement()
+ BpmEvent getResumeEntryEvent()
+ BpmEvent getGoToEndEvent()
}
class net.sourceforge.plantuml.svek.extremity.MiddleCircle {
- double radius
- UEllipse circle
- HColor backColor
+ Point2D somePoint()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.cucadiagram.SuperGroup {
- Set<IGroup> groups
+ IGroup getFirstGroup()
}
class net.sourceforge.plantuml.ugraphic.UStroke {
- double dashVisible
- double dashSpace
- double thickness
+ String toString()
+ UStroke onlyThickness()
- UStroke applyThickness(UStroke)
+ double getDashVisible()
+ double getDashSpace()
+ double getThickness()
+ String getDasharraySvg()
+ String getDashTikz()
}
class net.sourceforge.plantuml.math.PSystemMathFactory {
+ PSystemMath initDiagram(UmlSource,String)
+ PSystemMath executeLine(UmlSource,PSystemMath,String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut {
- double dx
- double dy
+ FtileGeometry calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.sequencediagram.graphic.LifeLine {
- Pushable participant
- double nominalPreferredWidth
- List<Variation> events
- Stairs stairs
- int maxLevel
- boolean shadowing
- double create
+ void addSegmentVariation(LifeSegmentVariation,double,SymbolContext)
+ void finish(double)
~ int getMissingClose()
~ int getLevel(double)
+ int getMaxLevel()
+ double getRightShift(double)
+ double getLeftShift(double)
+ double getMaxRightShift()
+ double getMaxLeftShift()
- double getRightShiftAtLevel(int)
- double getLeftShiftAtLevel(int)
- double getStartingX(StringBounder)
- SegmentColored getSegment(int)
- Collection<SegmentColored> getSegmentsCutted(StringBounder,int)
+ void drawU(UGraphic,Rose,ISkinParam)
+ void setCreate(double)
+ double getCreate()
+ double getDestroy()
+ boolean shadowing()
+ SymbolContext getColors()
}
class net.sourceforge.plantuml.sequencediagram.graphic.LifeLine.Variation {
- LifeSegmentVariation type
- SymbolContext colors
- double y
+ String toString()
}
interface net.sourceforge.plantuml.SpriteContainer {
+ Sprite getSprite(String)
+ Guillemet guillemet()
+ ThemeStyle getThemeStyle()
}
class net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines {
- {static} IRegex getRegexConcat()
+ String getPatternEnd()
# CommandExecutionResult executeNow(AbstractClassOrObjectDiagram,BlocLines)
- IEntity executeArg0(AbstractClassOrObjectDiagram,RegexResult)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot {
- Point2D contact
- double angle
- double radius
+ Point2D somePoint()
+ void drawU(UGraphic)
- {static} void drawLine(UGraphic,double,double,Point2D,Point2D)
}
class net.sourceforge.plantuml.golem.TileArea {
- Tile tile
- TileGeometry position
+ Tile getTile()
+ TileGeometry getGeometry()
}
class net.sourceforge.plantuml.nwdiag.LinkedElement {
- TextBlock box
- Network network
- Square square
- Map<Network,TextBlock> conns
- List<Network> networks
- double marginAd
- double marginBox
+ boolean isLinkedTo(Network)
+ MinMax getMinMax(StringBounder,double,double)
+ void drawMe(UGraphic,double,double)
+ void drawLinks(UGraphic,double,double,double)
- TextBlock link1()
- TextBlock link2()
- void drawCenter(UGraphic,TextBlock,double,double)
+ Dimension2D naturalDimension(StringBounder)
+ Network getNetwork()
+ Square getElement()
}
interface net.sourceforge.plantuml.project.ToTaskDraw {
+ TaskDraw getTaskDraw(Task)
+ LoadPlanable getDefaultPlan()
}
abstract class net.sourceforge.plantuml.command.CommandMultilines3 {
- IRegex starting
- MultilinesStrategy strategy
+ {abstract}RegexConcat getPatternEnd2()
+ String[] getDescription()
+ CommandControl isValid(BlocLines)
+ CommandExecutionResult execute(S,BlocLines)
# {abstract}CommandExecutionResult executeNow(S,BlocLines)
# boolean isCommandForbidden()
# void actionIfCommandValid()
# IRegex getStartingPattern()
}
class net.sourceforge.plantuml.svek.image.EntityImagePort {
- boolean upPosition()
+ Dimension2D calculateDimension(StringBounder)
+ double getMaxWidthFromLabelForEntryExit(StringBounder)
- void drawSymbol(UGraphic)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.graphic.HtmlColorAndStyle {
- HColor arrowHeadColor
- HColor arrowColor
- LinkStyle style
+ String toString()
+ HColor getArrowColor()
+ HColor getArrowHeadColor()
+ LinkStyle getStyle()
+ {static} StyleSignature getDefaultStyleDefinitionArrow()
+ {static} HtmlColorAndStyle build(ISkinParam,String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderMerge {
# Ftile doStep1(Ftile)
# Ftile doStep2(Ftile,Ftile)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderMerge.ConnectionHorizontalThenVertical {
- Rainbow arrowColor
- UTranslate diamondTranslate
- UTranslate translate0
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder,double)
+ Point2D getDiamondOut(StringBounder)
+ UTranslate arrivalOnDiamond(StringBounder,double)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderMerge.ConnectionIn {
- double x
- Rainbow arrowColor
- Display label
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.svek.image.EntityImageMap {
- TextBlock name
- TextBlock stereo
- TextBlock entries
- Url url
- double roundCorner
- LineConfigurable lineConfig
- int marginEmptyFieldsOrMethod
- int xMarginCircle
+ Ports getPorts(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- UStroke getStroke()
- double getMethodOrFieldHeight(Dimension2D)
- Dimension2D getTitleDimension(StringBounder)
- Dimension2D getNameAndSteretypeDimension(StringBounder)
+ ShapeType getShapeType()
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
class net.sourceforge.plantuml.project.lang.ComplementWithColorLink {
+ IRegex toRegex(String)
+ Failable<CenterBorderColor> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.cucadiagram.Display {
- List<CharSequence> displayData
- HorizontalAlignment naturalHorizontalAlignment
- boolean isNull
- CreoleMode defaultCreoleMode
+ {static} Display NULL
+ {static} Pattern2 patternStereotype
+ Display withoutStereotypeIfNeeded(Style)
+ Stereotype getStereotypeIfAny()
+ Display replaceBackslashT()
+ Display replace(String,String)
+ boolean isWhite()
+ {static} Display empty()
+ {static} Display create(CharSequence)
+ {static} Display createFoo(List<StringLocated>)
+ {static} Display create(Collection<? extends CharSequence>)
+ {static} Display getWithNewlines(Code)
+ {static} Display getWithNewlines2(String)
+ {static} Display getWithNewlines(String)
- {static} List<CharSequence> manageEmbeddedDiagrams(Collection<? extends CharSequence>)
+ Display manageGuillemet()
+ Display withPage(int,int)
+ Display removeEndingStereotype()
+ String getEndingStereotype()
+ Display underlined()
+ Display underlinedName()
+ Display withCreoleMode(CreoleMode)
+ String toString()
+ int hashCode()
+ boolean equals(Object)
+ Display addAll(Display)
+ Display addFirst(CharSequence)
+ Display add(CharSequence)
+ Display addGeneric(CharSequence)
+ int size()
+ CharSequence get(int)
+ ListIterator<CharSequence> iterator()
+ Display subList(int,int)
+ List<? extends CharSequence> asList()
+ List<StringLocated> as2()
+ boolean hasUrl()
+ HorizontalAlignment getNaturalHorizontalAlignment()
+ List<Display> splitMultiline(Pattern2)
+ {static} boolean isNull(Display)
+ TextBlock create(FontConfiguration,HorizontalAlignment,ISkinSimple)
+ TextBlock createWithNiceCreoleMode(FontConfiguration,HorizontalAlignment,ISkinSimple)
+ TextBlock create7(FontConfiguration,HorizontalAlignment,ISkinSimple,CreoleMode)
+ TextBlock create8(FontConfiguration,HorizontalAlignment,ISkinSimple,CreoleMode,LineBreakStrategy)
+ TextBlock create9(FontConfiguration,HorizontalAlignment,ISkinSimple,LineBreakStrategy)
+ TextBlock create0(FontConfiguration,HorizontalAlignment,ISkinSimple,LineBreakStrategy,CreoleMode,UFont,HColor)
- TextBlock createStereotype(FontConfiguration,HorizontalAlignment,SpriteContainer,int,UFont,HColor,LineBreakStrategy,CreoleMode)
- TextBlock getCreole(FontConfiguration,HorizontalAlignment,ISkinSimple,LineBreakStrategy,CreoleMode,FontConfiguration)
- TextBlock createMessageNumber(FontConfiguration,HorizontalAlignment,ISkinSimple,LineBreakStrategy,FontConfiguration)
+ boolean hasSeveralGuideLines()
+ {static} boolean hasSeveralGuideLines(String)
- {static} boolean hasSeveralGuideLines(Collection<? extends CharSequence>)
}
class net.sourceforge.plantuml.png.PngSegment {
- int totalSize
- int nbPiece
+ int getStart(int)
+ int getLen(int)
}
class net.sourceforge.plantuml.ugraphic.PlacementStrategyY1Y2Left {
+ Map<TextBlock,Point2D> getPositions(double,double)
}
class net.sourceforge.plantuml.graphic.ColorChange {
- {static} Pattern2 colorPattern
- HColor color
~ HColor getColor()
+ FontConfiguration apply(FontConfiguration)
}
class net.sourceforge.plantuml.tim.EaterAssert {
+ void analyze(TContext,TMemory)
}
class net.sourceforge.plantuml.svek.CucaDiagramFileMakerSvek2InternalImage {
- List<IEntityImage> inners
- Separator separator
- ISkinParam skinParam
- Stereotype stereotype
- HColor getColor(ColorParam,Stereotype)
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
+ HColor getBackcolor()
+ double getOverscanX(StringBounder)
+ boolean isHidden()
+ Margins getShield(StringBounder)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.help.CommandHelpType {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(Help,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.salt.Cell {
- int minRow
- int maxRow
- int minCol
- int maxCol
+ void mergeLeft()
+ int getMinRow()
+ int getMaxRow()
+ int getMinCol()
+ int getMaxCol()
+ int getNbRows()
+ int getNbCols()
+ String toString()
}
class net.sourceforge.plantuml.zopfli.Cookie {
~ {static} int SPLIT_PARTITIONS
- {static} int POOL_MAX
~ {static} int[] intZeroes
~ {static} char[] charZeroes
~ {static} byte[] byteZeroes
~ {static} int[] intMOnes
~ {static} char[] charOnes
~ {static} long[] costMax
~ Node[] list0
~ Node[] list1
~ Node[] leaves1
~ Node[] leaves2
- Node[] nodes
- int nextNode
~ int[] i320a
~ int[] i320b
~ int[] i320c
~ int[] i288a
~ int[] i288b
~ int[] i288c
~ int[] i289a
~ char[] c259a
~ int[] i32a
~ int[] i32b
~ int[] i32c
~ int[] i19a
~ int[] i19b
~ int[] i19c
~ int[] i16a
~ int[] i16b
~ int[] p
~ int[] vp
~ char[] lengthArray
~ long[] costs
~ char[] path
~ int[] splitPoints
~ int[] splitSize
~ SymbolStats stats
~ SymbolStats bestStats
~ SymbolStats lastStats
~ Hash h
~ int lenVal
~ int distVal
~ int rnd
~ LzStore store1
~ LzStore store2
~ LongestMatchCache lmc
~ int masterBlockSize
~ int blockSplittingMax
~ {static} void expand(Object)
~ Node node(int,int,Node)
~ void resetPool()
~ {static} void fill0(int[],int)
~ {static} void fill0(char[],int)
~ {static} void fillCostMax(long[],int)
}
class net.sourceforge.plantuml.zopfli.Cookie.Node {
~ int weight
~ Node tail
~ int count
}
class net.sourceforge.plantuml.graphic.FontConfiguration {
- EnumSet<FontStyle> styles
- UFont currentFont
- UFont motherFont
- HColor motherColor
- HColor hyperlinkColor
- HColor currentColor
- HColor extendedColor
- FontPosition fontPosition
- SvgAttributes svgAttributes
- boolean hyperlink
- boolean useUnderlineForHyperlink
- int tabSize
+ String toStringDebug()
+ {static} FontConfiguration blackBlueTrue(UFont)
+ boolean useUnderlineForHyperlink()
+ HColor getHyperlinkColor()
- {static} EnumSet<FontStyle> getStyles(UFont)
+ String toString()
+ FontConfiguration forceFont(UFont,HColor)
+ FontConfiguration changeAttributes(SvgAttributes)
- FontConfiguration withHyperlink()
+ FontConfiguration changeColor(HColor)
+ FontConfiguration mute(Colors)
~ FontConfiguration changeExtendedColor(HColor)
+ FontConfiguration changeSize(float)
+ FontConfiguration bigger(double)
+ FontConfiguration changeFontPosition(FontPosition)
+ FontConfiguration changeFamily(String)
+ FontConfiguration resetFont()
+ FontConfiguration add(FontStyle)
+ FontConfiguration italic()
+ FontConfiguration bold()
+ FontConfiguration unbold()
+ FontConfiguration unitalic()
+ FontConfiguration underline()
+ FontConfiguration wave(HColor)
+ FontConfiguration hyperlink()
+ FontConfiguration remove(FontStyle)
+ UFont getFont()
+ HColor getColor()
+ HColor getExtendedColor()
+ boolean containsStyle(FontStyle)
+ int getSpace()
+ Map<String,String> getAttributes()
+ double getSize2D()
+ int getTabSize()
}
class net.sourceforge.plantuml.creole.legacy.PSystemCreoleFactory {
+ PSystemCreole initDiagram(UmlSource,String)
+ PSystemCreole executeLine(UmlSource,PSystemCreole,String)
}
class net.sourceforge.plantuml.wbs.WBSDiagramFactory {
# List<Command> createCommands()
+ WBSDiagram createEmptyDiagram(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.elk.proxy.graph.ElkBendPoint {
+ Object obj
+ int hashCode()
+ boolean equals(Object)
+ double getX()
+ double getY()
}
class net.sourceforge.plantuml.salt.element.LeftFirst {
+ int compare(Cell,Cell)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileGroup {
- double diffYY2
- Ftile inner
- TextBlock name
- TextBlock headerNote
- HColor borderColor
- HColor backColor
- double shadowing
- UStroke stroke
- USymbol type
- double roundCorner
- FtileGeometry cachedInnerDimension
+ StyleSignature getDefaultStyleDefinitionPartition()
+ Collection<Ftile> getMyChildren()
+ LinkRendering getInLinkRendering()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
- double diffHeightTitle(StringBounder)
- UTranslate getTranslate(StringBounder)
- MinMax getInnerMinMax(StringBounder)
+ double suppWidth(StringBounder)
- FtileGeometry getInnerDimension(StringBounder)
- FtileGeometry getInnerDimensionSlow(StringBounder)
# FtileGeometry calculateDimensionFtile(StringBounder)
- double headerNoteHeight(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox {
- ParticipantBox participantBox
- LifeLine lifeLine
+ ParticipantBox getParticipantBox()
+ LifeLine getLifeLine()
+ SegmentColored getLiveThicknessAt(StringBounder,double)
+ void drawLineU22(UGraphic,double,double,boolean,double)
+ double magicMargin(StringBounder)
+ void create(double)
+ double getCreate()
+ double getMaxX(StringBounder)
+ double getMinX(StringBounder)
+ String toString(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverCenteredCharacterTikz {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
class net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader {
- Component comp
- double endY
- boolean isParallel
- List<Component> notes
+ String toString()
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
# void drawInternalU(UGraphic,double,Context2D)
+ void setEndY(double)
+ void addNotes(StringBounder,Collection<Component>)
}
class net.sourceforge.plantuml.eps.EpsGraphics {
+ {static} String END_OF_FILE
# {static} long COEF
- StringBuilder body
- StringBuilder header
- Color color
- Color fillcolor
- String strokeWidth
- PostScriptCommandMacro setcolorgradient
- PostScriptCommandMacro simplerect
- PostScriptCommandMacro roundrect
- boolean setcolorgradientUsed
- boolean simplerectUsed
- boolean roundrectUsed
- boolean closeDone
- int maxX
- int maxY
- long dashVisible
- long dashSpace
- UrlArea urlArea
- ShadowManager shadowManager
# void ensureVisible(double,double)
# Color getColor()
+ void close()
- void checkCloseDone()
+ String getEPSCode()
# String getBodyString()
+ void setStrokeColor(Color)
+ void setFillColor(Color)
+ void setStrokeWidth(double,double,double)
+ void newpathDot()
- boolean isDashed()
- boolean isDashed2()
- boolean isDashed3()
+ void closepathDot()
+ void epsLine(double,double,double,double)
# void epsHLine(double,double,double)
# void epsVLine(double,double,double)
+ void epsPath(double,double,UPath)
+ void epsPolygon(HColorGradient,ColorMapper,double)
+ void epsPolygon(double)
+ void epsRectangle(double,double,double,double,double,double)
+ void epsRectangle(double,double,double,double,double,double,HColorGradient,ColorMapper)
- void epsRectangleInternal(double,double,double,double,double,double,boolean)
- void roundRectangle(double,double,double,double,double,double)
- void simpleRectangle(double,double,double,double,boolean)
- int convertToClockwiseAngle(double)
+ void epsEllipse(double,double,double,double,double,double)
+ void epsEllipse(double,double,double,double)
# void appendColor(Color)
# void appendColorShort(Color)
~ {static} String format(double)
+ {static} String formatSimple4(double)
- {static} String formatSimple2(double)
# void append(String,boolean)
+ void linetoNoMacro(double,double)
+ void movetoNoMacro(double,double)
+ void curvetoNoMacro(double,double,double,double,double,double)
+ void moveto(double,double)
+ void lineto(double,double)
+ void curveto(double,double,double,double,double,double)
+ void quadto(double,double,double,double)
+ void newpath()
+ void closepath()
+ void fill(int)
+ void drawImage(BufferedImage,double,double)
~ {static} String getRgb(int)
+ void drawEps(String,double,double)
# long getDashVisible()
# long getDashSpace()
+ void closeLink()
+ void epsUrlLink(int,int,int,int,String)
+ void openLink(String)
+ void epsRectangleShadow(double,double,double,double,double,double,double)
+ void epsPolygonShadow(double,double)
+ void epsEllipseShadow(double,double,double,double,double)
}
class net.sourceforge.plantuml.eps.EpsGraphics.UrlArea {
- String url
- int xmin
- int xmax
- int ymin
- int ymax
~ void ensureVisible(int,int)
}
class net.sourceforge.plantuml.cucadiagram.dot.ProcessRunner {
- String[] cmd
- String error
- String out
- ProcessState state
- Lock changeState
+ ProcessState run(byte[],OutputStream)
+ ProcessState run(byte[],OutputStream,SFile)
+ String getError()
+ String getOut()
- void close(InputStream)
- void close(OutputStream)
}
class net.sourceforge.plantuml.cucadiagram.dot.ProcessRunner.MainThread {
- String[] cmd
- SFile dir
- OutputStream redirection
- byte[] in
- Process process
- ThreadStream errorStream
- ThreadStream outStream
+ String getOut()
+ String getError()
+ void runJob()
+ void cancelJob()
- void startThreads()
+ int joinInternal()
}
class net.sourceforge.plantuml.cucadiagram.dot.ProcessRunner.ThreadStream {
- InputStream streamToRead
- OutputStream redirection
- StringBuffer sb
+ String getString()
+ void cancel()
+ void run()
}
class net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider {
- Component comp
# void drawInternalU(UGraphic,double,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getStartingX(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.ConditionalBuilder {
- Swimlane swimlane
- HColor borderColor
- HColor backColor
- Rainbow arrowColor
- FtileFactory ftileFactory
- ConditionStyle conditionStyle
- ConditionEndStyle conditionEndStyle
- Branch branch1
- Branch branch2
- ISkinParam skinParam
- StringBounder stringBounder
- FontConfiguration fontArrow
- FontConfiguration fontTest
- Ftile tile1
- Ftile tile2
- Url url
+ StyleSignature getDefaultStyleDefinitionDiamond()
+ StyleSignature getDefaultStyleDefinitionArrow()
+ {static} Ftile create(Swimlane,HColor,HColor,Rainbow,FtileFactory,ConditionStyle,ConditionEndStyle,Branch,Branch,ISkinParam,StringBounder,FontConfiguration,FontConfiguration,Url)
- {static} boolean isEmptyOrOnlySingleStopOrSpot(Branch)
- Ftile createDown(Branch,Branch)
- Ftile createNude()
- Ftile createWithDiamonds()
- Ftile createWithLinks()
- Ftile getDiamond1(boolean)
- Ftile getDiamond1(boolean,TextBlock,TextBlock)
- TextBlock getLabelPositive(Branch)
- Ftile getDiamond2(Branch,Branch,boolean)
+ boolean hasTwoBranches()
}
class net.sourceforge.plantuml.compositediagram.CompositeDiagramFactory {
- ISkinSimple skinParam
# List<Command> createCommands()
+ CompositeDiagram createEmptyDiagram(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.project.lang.SentenceAndAnd {
- SentenceSimple sentence1
- SentenceSimple sentence2
- SentenceSimple sentence3
+ IRegex toRegex()
+ CommandExecutionResult execute(GanttDiagram,RegexResult)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityExtends {
- UPolygon polygon
- HColor fill
- Point2D contact
+ Point2D somePoint()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.SkinParamBackcolored {
- HColor backColorElement
- HColor backColorGeneral
- boolean forceClickage
- Map<ColorParam,HColor> forced
+ String toString()
+ HColor getBackgroundColor(boolean)
+ HColor getHtmlColor(ColorParam,Stereotype,boolean)
+ void forceColor(ColorParam,HColor)
}
class net.sourceforge.plantuml.style.Style {
- Map<PName,Value> map
- StyleSignature signature
+ void printMe()
+ String toString()
+ Value value(PName)
+ boolean hasValue(PName)
+ Style mergeWith(Style)
+ Style eventuallyOverride(PName,HColor)
+ Style eventuallyOverride(PName,double)
+ Style eventuallyOverride(PName,String)
+ Style eventuallyOverride(Colors)
+ Style eventuallyOverride(SymbolContext)
+ StyleSignature getSignature()
+ UFont getUFont()
+ FontConfiguration getFontConfiguration(ThemeStyle,HColorSet)
+ SymbolContext getSymbolContext(ThemeStyle,HColorSet)
+ Style eventuallyOverride(UStroke)
+ UStroke getStroke()
+ UStroke getStroke(Colors)
+ LineBreakStrategy wrapWidth()
+ ClockwiseTopRightBottomLeft getPadding()
+ ClockwiseTopRightBottomLeft getMargin()
+ HorizontalAlignment getHorizontalAlignment()
- TextBlock createTextBlockInternal(Display,HColorSet,ISkinSimple,HorizontalAlignment)
+ TextBlock createTextBlockBordered(Display,HColorSet,ISkinSimple)
+ UGraphic applyStrokeAndLineColor(UGraphic,HColorSet,ThemeStyle)
}
abstract class net.sourceforge.plantuml.cucadiagram.WithLinkType {
# LinkType type
# boolean hidden
- boolean single
- Colors colors
- List<Colors> supplementary
+ HColor getSpecificColor()
+ void setSpecificColor(HColor)
+ void setSpecificColor(HColor,int)
+ List<Colors> getSupplementaryColors()
+ void setColors(Colors)
+ Colors getColors()
+ void goDashed()
+ void goDotted()
+ void goThickness(double)
+ void goHidden()
+ {abstract}void goNorank()
+ void goBold()
+ void goSingle()
+ boolean isSingle()
+ void applyStyle(ThemeStyle,String)
- void applyOneStyle(ThemeStyle,String,int)
+ LinkType getType()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondInside {
- HColor backColor
- HColor borderColor
- Swimlane swimlane
- TextBlock label
- TextBlock west
- TextBlock east
- TextBlock north
- TextBlock south
- double shadowing
+ Collection<Ftile> getMyChildren()
+ StyleSignature getDefaultStyleDefinition()
+ FtileDiamondInside withNorth(TextBlock)
+ FtileDiamondInside withWest(TextBlock)
+ FtileDiamondInside withEast(TextBlock)
+ Ftile withWestAndEast(TextBlock,TextBlock)
+ FtileDiamondInside withSouth(TextBlock)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ void drawU(UGraphic)
- FtileGeometry calculateDimensionAlone(StringBounder)
# FtileGeometry calculateDimensionFtile(StringBounder)
+ double getEastLabelWidth(StringBounder)
+ double getSouthLabelHeight(StringBounder)
}
class net.sourceforge.plantuml.syntax.LanguageDescriptor {
- Set<String> type
- Set<String> keyword
- Set<String> preproc
+ Cypher getCypher()
+ void print(PrintStream)
- {static} void print(PrintStream,String,Collection<String>)
+ Set<String> getType()
+ Set<String> getKeyword()
+ Set<String> getPreproc()
}
class net.sourceforge.plantuml.wire.CommandGoto {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(WireDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorInnerComment {
+ StringLocated peek()
}
class net.sourceforge.plantuml.ugraphic.comp.CompressionXorYBuilder {
+ {static} TextBlock build(CompressionMode,TextBlock,StringBounder)
- {static} PiecewiseAffineTransform getPiecewiseAffineTransform(CompressionMode,TextBlock,StringBounder)
}
abstract class net.sourceforge.plantuml.command.PSystemCommandFactory {
- List<Command> cmds
+ Diagram createSystem(UmlSource,ISkinSimple)
- AbstractPSystem executeFewLines(AbstractPSystem,UmlSource,IteratorCounter2)
- Step getCandidate(IteratorCounter2)
- BlocLines isMultilineCommandOk(IteratorCounter2,Command)
- BlocLines addOneSingleLineManageEmbedded2(IteratorCounter2,BlocLines)
# {abstract}List<Command> createCommands()
+ {abstract}AbstractPSystem createEmptyDiagram(UmlSource,ISkinSimple)
# void addCommonCommands1(List<Command>)
# void addCommonCommands2(List<Command>)
# void addCommonHides(List<Command>)
# void addTitleCommands(List<Command>)
+ List<String> getDescription()
}
class net.sourceforge.plantuml.command.PSystemCommandFactory.Step {
~ Command command
~ BlocLines blocLines
}
class net.sourceforge.plantuml.salt.PSystemSaltFactory {
+ PSystemSalt initDiagram(UmlSource,String)
+ PSystemSalt executeLine(UmlSource,PSystemSalt,String)
}
class net.sourceforge.plantuml.command.CommandPackageEmpty {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractEntityDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid {
+ Terminated<Element> create()
- boolean isStar(Element)
+ boolean ready()
}
abstract class net.sourceforge.plantuml.real.AbstractReal {
- RealLine line
~ RealLine getLine()
~ {abstract}double getCurrentValueInternal()
+ double getCurrentValue()
+ Real getMaxAbsolute()
+ Real getMinAbsolute()
}
class net.sourceforge.plantuml.graphic.USymbolNode {
+ SkinParameter getSkinParameter()
- void drawNode(UGraphic,double,double,boolean)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
+ int suppHeightBecauseOfShape()
+ int suppWidthBecauseOfShape()
}
class net.sourceforge.plantuml.graphic.USymbolNode.MyUGraphicNode {
- double endingX
# AbstractUGraphicHorizontalLine copy(UGraphic)
# void drawHline(UGraphic,UHorizontalLine,UTranslate)
- void drawHlineInternal(UGraphic,UHorizontalLine)
}
class net.sourceforge.plantuml.command.CommandScale {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractPSystem,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.command.CommandHeader {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.dedication.QBlock {
- BigInteger big
+ {static} QBlock read(InputStream,int)
+ {static} QBlock fromBuffer(byte[])
+ QBlock change(BigInteger,BigInteger)
+ byte[] getData512()
+ byte[] getDataRaw()
+ String toString()
+ void write(OutputStream,int)
}
class net.sourceforge.plantuml.wire.WireDiagram {
- WBlock root
- List<Spot> spots
- List<WLinkHorizontal> hlinks
- List<WLinkVertical> vlinks
+ DiagramDescription getDescription()
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
- TextBlockBackcolored getTextBlock()
- void drawMe(UGraphic)
+ CommandExecutionResult addComponent(String,String,int,int,HColor)
+ CommandExecutionResult newColumn(String)
+ CommandExecutionResult spot(String,HColor,String,String)
+ CommandExecutionResult wgoto(String,double,double)
+ CommandExecutionResult wmove(String,double,double)
+ CommandExecutionResult print(String,String)
- int computeIndentationLevel(String)
+ CommandExecutionResult vlink(String,String,String,String,WLinkType,WArrowDirection,HColor,Display)
+ CommandExecutionResult hlink(String,String,String,String,WLinkType,WArrowDirection,HColor,Display)
}
class net.sourceforge.plantuml.ugraphic.color.HColorAutomaticLegacy {
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines {
+ RegexConcat getPatternEnd2()
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeNow(ActivityDiagram3,BlocLines)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseNoteBox {
- SymbolContext symbolContext
- double roundCorner
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
+ double getPaddingX()
+ double getPaddingY()
# void drawInternalU(UGraphic,Area)
}
class net.sourceforge.plantuml.ugraphic.hand.UPathHand {
- UPath path
- double defaultVariation
+ UPath getHanddrawn()
}
interface net.sourceforge.plantuml.cucadiagram.Bodier {
+ void setLeaf(ILeaf)
+ Display getFieldsToDisplay()
+ Display getMethodsToDisplay()
+ void addFieldOrMethod(String)
+ TextBlock getBody(FontParam,ISkinParam,boolean,boolean,Stereotype,Style)
+ List<CharSequence> getRawBody()
+ void muteClassToObject()
+ boolean hasUrl()
}
class net.sourceforge.plantuml.cucadiagram.HideOrShow2 {
- String what
- boolean show
+ String toString()
- boolean isApplyable(ILeaf)
- boolean isApplyableUnlinked(ILeaf)
- boolean isApplyableStereotype(ILeaf,String)
- boolean isApplyableTag(ILeaf,String)
- boolean match(String,String)
+ boolean apply(boolean,ILeaf)
}
interface net.sourceforge.plantuml.project.draw.TaskDraw {
+ TaskDraw getTrueRow()
+ void setColorsAndCompletion(CenterBorderColor,int,Url,Display)
+ double getY(StringBounder)
+ double getY(StringBounder,Direction)
+ void pushMe(double)
+ void drawTitle(UGraphic,LabelStrategy,double,double)
+ double getTitleWidth(StringBounder)
+ double getFullHeightTask(StringBounder)
+ double getHeightMax(StringBounder)
+ Task getTask()
+ FingerPrint getFingerPrint(StringBounder)
+ FingerPrint getFingerPrintNote(StringBounder)
+ double getX1(TaskAttribute)
+ double getX2(TaskAttribute)
}
class net.sourceforge.plantuml.preproc.Sub {
- String name
- List<StringLocated> lines
+ String toString()
+ void add(StringLocated)
+ List<StringLocated> lines()
+ {static} Sub fromFile(ReadLine,String,TContext,TMemory)
}
abstract class net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex {
- DataSource dataSource
- Collection<ElementFactory> factories
- Dictionary dictionary
+ void addFactory(ElementFactory)
# Terminated<Element> getNextElement()
# DataSource getDataSource()
# Dictionary getDictionary()
}
class net.sourceforge.plantuml.descdiagram.command.CommandArchimateMultilines {
+ String getPatternEnd()
- {static} IRegex getRegexConcat()
- {static} ColorParser color()
# CommandExecutionResult executeNow(AbstractEntityDiagram,BlocLines)
}
class net.sourceforge.plantuml.Splash {
- {static} Color LINK_NORMAL
- {static} Color LINK_HOVER
- {static} Splash singleton
- int width
- int height
- BufferedImage logo
- AtomicInteger total
- AtomicInteger done
- AtomicInteger errors
- Font font
- int xClicked
- int yClicked
- int limY
- int limX
- Color link
+ {static} void main(String[])
+ void mouseDragged(MouseEvent)
+ void mouseMoved(MouseEvent)
- void updateLinkColor(Color)
+ void mouseReleased(MouseEvent)
+ void mousePressed(MouseEvent)
+ void mouseClicked(MouseEvent)
+ void mouseExited(MouseEvent)
+ void mouseEntered(MouseEvent)
- void incTotalInternal(int)
- void incDoneInternal(boolean)
+ void paint(Graphics)
- void drawProgessBar(Graphics,int,int)
- Rectangle2D getUsed(Graphics,String)
+ {static} void createSplash()
+ {static} void incTotal(int)
+ {static} void incDone(boolean)
+ {static} void disposeSplash()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorAddUrl {
+ Ftile addUrl(Ftile,Url)
}
class net.sourceforge.plantuml.svek.CircleAndArrow {
- AffineTransform at
- AffineTransform at2
- int radius
- Point2D center
- Point2D p1
- Point2D p2
- Point2D p3
- Point2D p4
- Point2D putOnCircle(Point2D)
+ void drawU(UGraphic)
- {static} void drawLine(UGraphic,double,double,Point2D,Point2D)
}
class net.sourceforge.plantuml.svek.image.EntityImageAssociationPoint {
- {static} int SIZE
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.preproc.StartDiagramExtractReader {
- ReadLine raw
- boolean finished
+ {static} StartDiagramExtractReader build(FileWithSuffix,StringLocated,String)
+ {static} StartDiagramExtractReader build(SURL,StringLocated,String,String)
+ {static} StartDiagramExtractReader build(InputStream,StringLocated,String)
- boolean checkUid(String,StringLocated)
- {static} ReadLine getReadLine(FileWithSuffix,StringLocated,String)
- {static} ReadLine getReadLine(InputStream,StringLocated,String)
- {static} ReadLine getReadLine(SURL,StringLocated,String)
+ {static} boolean containsStartDiagram(FileWithSuffix,StringLocated,String)
+ {static} boolean containsStartDiagram(SURL,StringLocated,String)
+ {static} boolean containsStartDiagram(InputStream,StringLocated,String)
- {static} boolean containsStartDiagram(ReadLine)
+ StringLocated readLine()
+ void close()
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseDestroy {
- HColor foregroundColor
- int crossSize
# void drawInternalU(UGraphic,Area)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandGoto {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.project.core.TaskCode {
- String code
+ int hashCode()
+ boolean equals(Object)
+ String toString()
+ String getSimpleDisplay()
}
class net.sourceforge.plantuml.sequencediagram.teoz.DelayTile {
- Delay delay
- TileArguments tileArguments
- Real middle
+ Event getEvent()
- void init(StringBounder)
- Component getComponent(StringBounder)
- double getPreferredWidth(StringBounder)
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.svek.image.EntityImageCircleStart {
- {static} int SIZE
- ColorParam colorParam
+ StyleSignature getDefaultStyleDefinitionCircle()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple {
- double freeY
+ double getFreeY(ParticipantRange)
+ FrontierSimple add(double,ParticipantRange)
}
class net.sourceforge.plantuml.directdot.PSystemDotFactory {
- StringBuilder data
+ PSystemDot initDiagram(UmlSource,String)
+ PSystemDot executeLine(UmlSource,PSystemDot,String)
}
interface net.sourceforge.plantuml.ugraphic.color.ColorMapper {
+ Color toColor(HColor)
+ String toSvg(HColor)
+ String toRGB(HColor)
}
class net.sourceforge.plantuml.bpm.Cell {
- Placeable data
- List<Placeable> destinations
+ Placeable getData()
+ void setData(Placeable)
+ String toString()
+ void addConnectionTo2(Placeable)
+ List<Placeable> getDestinations2()
}
class net.sourceforge.plantuml.ugraphic.color.HColorUtils {
+ {static} HColor BLACK
+ {static} HColor WHITE
+ {static} HColor RED_LIGHT
+ {static} HColor RED_DARK
+ {static} HColor RED
+ {static} HColor GREEN
+ {static} HColor BLUE
+ {static} HColor GRAY
+ {static} HColor LIGHT_GRAY
+ {static} HColor MY_YELLOW
+ {static} HColor MY_RED
+ {static} HColor MY_GREEN
+ {static} HColor COL_C82930
+ {static} HColor COL_F24D5C
+ {static} HColor COL_1963A0
+ {static} HColor COL_4177AF
+ {static} HColor COL_B38D22
+ {static} HColor COL_FFFF44
+ {static} HColor COL_038048
+ {static} HColor COL_84BE84
+ {static} HColor COL_DDDDDD
+ {static} HColor COL_EEEEEE
+ {static} HColor COL_FBFB77
+ {static} HColor COL_ADD1B2
+ {static} HColor COL_A9DCDF
+ {static} HColor COL_E3664A
+ {static} HColor COL_EB937F
+ {static} HColor COL_B4A7E5
+ {static} HColor COL_527BC6
+ {static} HColor COL_D1DBEF
+ {static} HColor COL_D7E0F2
+ {static} HColor COL_989898
+ {static} HColor COL_BBBBBB
- {static} HColorSimple TRANSPARENT
+ {static} HColor noGradient(HColor)
+ {static} UChange changeBack(UGraphic)
+ {static} HColor transparent()
+ {static} boolean isTransparent(HColor)
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryRetrieveFromDictonnary {
- Dictionary dictionary
- DataSource dataSource
+ Terminated<Element> create()
+ boolean ready()
}
class net.sourceforge.plantuml.code.SpiralOnRectangle {
- Spiral spiral
- int width
- int height
- PairInt delta
- boolean inside(PairInt)
+ PairInt nextPoint()
}
class net.sourceforge.plantuml.bpm.BpmEventResume {
- String id
+ String getId()
}
class net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol {
- {static} IRegex getRegexConcat()
- {static} ColorParser color()
# CommandExecutionResult executeArg(AbstractEntityDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d {
- double dpiFactor
- EnsureVisible visible
+ void draw(UShape,double,double,ColorMapper,UParam,Graphics2D)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd {
- {static} int SIZE
- HColor borderColor
- HColor backColor
- Swimlane swimlane
- double shadowing
+ Collection<Ftile> getMyChildren()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
}
class net.sourceforge.plantuml.descdiagram.EntityImageDesignedDomain {
- TextBlock name
- TextBlock stereo
- Url url
- UStroke getStroke()
- Dimension2D getTitleDimension(StringBounder)
- Dimension2D getNameAndSteretypeDimension(StringBounder)
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.sequencediagram.graphic.FreeYStrategyBasic {
+ double peekPosition(Event,ParticipantRange)
+ void addElement(Event,ParticipantRange,double)
}
class net.sourceforge.plantuml.style.FromSkinparamToStyle {
- {static} Map<String,List<Data>> knowlegde
- List<Style> styles
- String stereo
- ValueImpl getShadowingValue(String,AutomaticCounter)
- void addStyle(PName,Value,SName)
+ List<Style> getStyles()
- {static} void addConvert(String,PName,SName)
- {static} void addConFont(String,SName)
}
class net.sourceforge.plantuml.style.FromSkinparamToStyle.Data {
- PName propertyName
- SName[] styleNames
}
abstract class net.sourceforge.plantuml.PlainDiagram {
+ ImageBuilder createImageBuilder(FileFormatOption)
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
# {abstract}UDrawable getRootDrawable(FileFormatOption)
}
class net.sourceforge.plantuml.project.GanttConstraint {
- TaskInstant source
- TaskInstant dest
- StyleBuilder styleBuilder
- HColorSet colorSet
+ boolean isOn(Task)
+ boolean isThereRightArrow(Task)
+ String toString()
+ StyleSignature getStyleSignature()
+ UDrawable getUDrawable(TimeScale,ToTaskDraw)
+ boolean isHidden(Day,Day)
- boolean isHidden(Day,Day,Day)
+ void goNorank()
}
class net.sourceforge.plantuml.NullOutputStream {
+ void write(int)
+ void write(byte[])
+ void write(byte[],int,int)
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverCenteredCharacterG2d {
+ void draw(UShape,double,double,ColorMapper,UParam,Graphics2D)
}
class net.sourceforge.plantuml.project.lang.SentenceTaskStartsWithColor {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.tikz.TikzGraphics {
- List<String> cmd
- boolean withPreamble
- Color color
- Color fillcolor
- Color fillcolorGradient2
- char gradientPolicy
- double thickness
- double scale
- String dash
- Map<Color,String> colornames
- Map<String,Integer> styles
- Map<String,String> stylesID
- String pendingUrl
- boolean urlIgnoreText
- boolean hasUrl
- void addCommand(StringBuilder)
- String getColorName(Color)
+ void createData(OutputStream)
- String useStyle(String)
- void purgeStyles()
- String definecolor(String,Color)
+ void rectangle(double,double,double,double)
- String getAngleFromGradientPolicy()
- String couple(double,double)
+ {static} String format(double)
- void out(OutputStream,String)
+ void text(double,double,String,boolean,boolean,boolean)
+ void appendRaw(double,double,String)
- void appendPendingUrl(StringBuilder)
- {static} String extractInternalHref(String)
- String protectText(String)
+ void line(double,double,double,double)
+ void polygon(double[])
- void round(double,double[])
- void appendShadeOrDraw(StringBuilder)
+ void rectangleRound(double,double,double,double,double)
+ void upath(double,double,UPath)
+ void ellipse(double,double,double,double)
+ void arc(double,double,int,int,double)
+ void drawSingleCharacter(double,double,char)
+ void drawPathIterator(double,double,PathIterator)
+ void setFillColor(Color)
+ void setGradientColor(Color,Color,char)
+ void setStrokeColor(Color)
- void addColor(Color)
+ void setStrokeWidth(double,String)
+ void openLink(String,String)
+ void closeLink()
}
class net.sourceforge.plantuml.project.draw.TimeHeaderDaily {
- Map<Day,String> nameDays
+ double getTimeHeaderHeight()
+ double getTimeFooterHeight()
+ void drawTimeHeader(UGraphic,double)
+ void drawTimeFooter(UGraphic)
- void drawTextsDayOfWeek(UGraphic)
- void drawTextDayOfMonth(UGraphic)
- HColor getTextBackColor(Day)
- void drawMonths(UGraphic)
- void drawVBars(UGraphic,double)
- void printMonth(UGraphic,MonthYear,double,double)
- void drawVbar(UGraphic,double,double,double)
- void printNamedDays(UGraphic)
+ double getFullHeaderHeight()
- double getHeaderNameDayHeight()
}
class net.sourceforge.plantuml.sequencediagram.teoz.SequenceDiagramFileMakerTeoz {
- SequenceDiagram diagram
- FileFormatOption fileFormatOption
- Rose skin
- AnnotatedWorker annotatedWorker
- int index
- Englobers englobers
- StringBounder stringBounder
- TextBlock footer
- TextBlock header
- PlayingSpaceWithParticipants body
- TextBlock title
- TextBlock legend
- TextBlock caption
- Dimension2D dimTotal
- Real min1
- LivingSpaces livingSpaces
- double heightEnglober1
- double heightEnglober2
+ ImageData createOne(OutputStream,int,boolean)
- UGraphic goDownAndCenterForEnglobers(UGraphic)
- UGraphic goDown(UGraphic,TextBlock)
+ void printAligned(UGraphic,HorizontalAlignment,TextBlock)
- PlayingSpace createMainTile()
+ ISkinParam getSkinParam()
- TextBlock getTitle()
- TextBlock getLegend()
+ TextBlock getFooterOrHeader(FontParam)
+ int getNbPages()
- void drawInternal(UGraphic,int)
}
class net.sourceforge.plantuml.sequencediagram.teoz.SequenceDiagramFileMakerTeoz.Foo {
- int index
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.project.lang.SentenceAnd {
- SentenceSimple sentence1
- SentenceSimple sentence2
+ IRegex toRegex()
+ CommandExecutionResult execute(GanttDiagram,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandNoteLong3 {
- {static} ColorParser color()
+ String getPatternEnd()
# CommandExecutionResult executeNow(ActivityDiagram3,BlocLines)
~ {static} IRegex getRegexConcat()
}
abstract class net.sourceforge.plantuml.graphic.USymbol {
- {static} Map<String,USymbol> all
+ {static} USymbol STORAGE
+ {static} USymbol DATABASE
+ {static} USymbol CLOUD
+ {static} USymbol CARD
+ {static} USymbol FRAME
+ {static} USymbol NODE
+ {static} USymbol ARTIFACT
+ {static} USymbol PACKAGE
+ {static} USymbol FOLDER
+ {static} USymbol FILE
+ {static} USymbol RECTANGLE
+ {static} USymbol HEXAGON
+ {static} USymbol PERSON
+ {static} USymbol LABEL
+ {static} USymbol ARCHIMATE
+ {static} USymbol COLLECTIONS
+ {static} USymbol AGENT
+ {static} USymbol ACTOR_STICKMAN
+ {static} USymbol ACTOR_STICKMAN_BUSINESS
+ {static} USymbol ACTOR_AWESOME
+ {static} USymbol ACTOR_HOLLOW
+ {static} USymbol USECASE
+ {static} USymbol COMPONENT1
+ {static} USymbol COMPONENT2
+ {static} USymbol BOUNDARY
+ {static} USymbol ENTITY_DOMAIN
+ {static} USymbol CONTROL
+ {static} USymbol INTERFACE
+ {static} USymbol QUEUE
+ {static} USymbol STACK
+ {static} USymbol TOGETHER
+ {abstract}SkinParameter getSkinParameter()
+ FontParam getFontParam()
+ FontParam getFontParamStereotype()
+ ColorParam getColorParamBack()
+ ColorParam getColorParamBorder()
- {static} USymbol record(String,SkinParameter,USymbol)
+ {abstract}TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ {abstract}TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
+ int suppHeightBecauseOfShape()
+ int suppWidthBecauseOfShape()
+ {static} USymbol fromString(String,ActorStyle,ComponentStyle,PackageStyle)
+ {static} USymbol fromString(String,ISkinParam)
}
class net.sourceforge.plantuml.graphic.USymbol.Margin {
- double x1
- double x2
- double y1
- double y2
~ double getWidth()
~ double getHeight()
+ Dimension2D addDimension(Dimension2D)
+ double getX1()
+ double getY1()
}
class net.sourceforge.plantuml.cucadiagram.DisplaySection {
- Map<HorizontalAlignment,Display> map
+ DisplaySection withPage(int,int)
+ Display getDisplay()
+ {static} DisplaySection none()
+ HorizontalAlignment getHorizontalAlignment()
+ boolean isNull()
+ TextBlock createRibbon(FontConfiguration,ISkinSimple,Style)
+ void putDisplay(Display,HorizontalAlignment)
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryText {
- DataSource dataSource
- ISkinSimple spriteContainer
+ Terminated<Element> create()
+ boolean ready()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometryMerger {
- FtileGeometry result
+ FtileGeometry getResult()
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverTextG2d {
- EnsureVisible visible
+ void draw(UShape,double,double,ColorMapper,UParam,Graphics2D)
- void printSingleText(Graphics2D,FontConfiguration,String,double,double,ColorMapper,UParam)
+ {static} Dimension2D calculateDimension(StringBounder,UFont,String)
}
class net.sourceforge.plantuml.graphic.ColorAndSizeChange {
~ {static} Pattern2 colorPattern
~ {static} Pattern2 sizePattern
- HColor color
- Integer size
~ HColor getColor()
~ Integer getSize()
+ FontConfiguration apply(FontConfiguration)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane {
- Swimlane swimlane
- List<Swimlane> orderedList
+ void draw(UShape)
- void drawGoto()
+ UGraphic apply(UChange)
+ Swimlane getSwimlane()
+ List<Swimlane> getOrderedListOfAllSwimlanes()
}
class net.sourceforge.plantuml.svek.image.EntityImageStateBorder {
- boolean upPosition()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.svek.ClusterPosition {
- double minX
- double minY
- double maxX
- double maxY
+ boolean contains(double,double)
+ ClusterPosition merge(ClusterPosition)
+ ClusterPosition merge(Point2D)
+ boolean contains(Point2D)
+ String toString()
+ double getMinX()
+ double getMinY()
+ double getMaxX()
+ double getMaxY()
+ PointDirected getIntersection(CubicCurve2D.Double)
+ Point2D getPointCenter()
+ ClusterPosition withMinX(double)
+ ClusterPosition withMaxX(double)
+ ClusterPosition addMaxX(double)
+ ClusterPosition addMaxY(double)
+ ClusterPosition addMinX(double)
+ ClusterPosition addMinY(double)
+ ClusterPosition withMinY(double)
+ ClusterPosition withMaxY(double)
+ Point2D getProjectionOnFrontier(Point2D)
+ ClusterPosition delta(double,double)
+ Dimension2D getDimension()
+ boolean isPointJustUpper(Point2D)
+ Side getClosestSide(Point2D)
- boolean isSmallerThan(double,double,double,double)
}
class net.sourceforge.plantuml.creole.legacy.AtomTextUtils {
# {static} DelayedDouble ZERO
+ {static} Atom createLegacy(String,FontConfiguration)
+ {static} Atom create(String,FontConfiguration)
+ {static} Atom createUrl(Url,FontConfiguration,ISkinSimple)
- {static} Atom createAtomText(String,Url,FontConfiguration,ISkinSimple)
+ {static} Atom createListNumber(FontConfiguration,int,int)
}
class net.sourceforge.plantuml.CMapData {
- StringBuilder stringBuilder
+ String asString(String)
+ boolean containsData()
+ void appendString(String)
+ void appendLong(long)
- void appendUrl(int,Url,double)
+ {static} CMapData cmapString(Set<Url>,double)
}
abstract class net.sourceforge.plantuml.json.JsonValue {
+ {static} JsonValue TRUE
+ {static} JsonValue FALSE
+ {static} JsonValue NULL
+ {static} JsonValue readFrom(Reader)
+ {static} JsonValue readFrom(String)
+ {static} JsonValue valueOf(int)
+ {static} JsonValue valueOf(long)
+ {static} JsonValue valueOf(float)
+ {static} JsonValue valueOf(double)
+ {static} JsonValue valueOf(String)
+ {static} JsonValue valueOf(boolean)
+ boolean isObject()
+ boolean isArray()
+ boolean isNumber()
+ boolean isString()
+ boolean isBoolean()
+ boolean isTrue()
+ boolean isFalse()
+ boolean isNull()
+ JsonObject asObject()
+ JsonArray asArray()
+ int asInt()
+ long asLong()
+ float asFloat()
+ double asDouble()
+ String asString()
+ boolean asBoolean()
+ void writeTo(Writer)
+ void writeTo(Writer,WriterConfig)
+ String toString()
+ String toString(WriterConfig)
+ boolean equals(Object)
+ int hashCode()
~ {abstract}void write(JsonWriter)
}
class net.sourceforge.plantuml.openiconic.SvgPath {
- List<Movement> movements
- List<SvgCommand> commands
- List<SvgCommand> insertMissingLetter(List<SvgCommand>)
- void checkArguments(List<SvgCommand>)
- List<SvgCommand> manageHV(List<SvgCommand>)
+ String toSvg()
- String toSvgNew()
- UPath toUPath(double)
+ void drawMe(UGraphic,double)
}
class net.sourceforge.plantuml.sequencediagram.teoz.Stairs {
- List<Step> values
+ void addStep(Step)
+ int getMaxIndent()
+ Collection<Step> getSteps()
}
class net.sourceforge.plantuml.svek.image.EntityImageEmptyPackage {
- TextBlock desc
- {static} int MARGIN
- Stereotype stereotype
- TextBlock stereoBlock
- Url url
- SName styleName
- double shadowing
- HColor borderColor
- UStroke stroke
- double roundCorner
- HColor back
- Style getStyle()
- StyleSignature getDefaultStyleDefinition()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.brotli.Huffman {
- {static} int MAX_LENGTH
- {static} int getNextKey(int,int)
- {static} void replicateValue(int[],int,int,int,int)
- {static} int nextTableBitSize(int[],int,int)
~ {static} void buildHuffmanTable(int[],int,int,int[],int)
}
class net.sourceforge.plantuml.Pipe {
- Option option
- InputStream is
- PrintStream ps
- boolean closed
- String charset
- Stdrpt stdrpt
+ void managePipe(ErrorStatus)
- void printInfo(PrintStream,SourceStringReader)
- boolean isFinished(String)
- String readOneDiagram()
- void manageFormat(String)
- String readOneLine()
}
class net.sourceforge.plantuml.project.timescale.TimeScaleCompressed {
- TimeScale daily
+ double getStartingPosition(Day)
+ double getEndingPosition(Day)
+ double getWidth(Day)
+ boolean isBreaking(Day)
}
class net.sourceforge.plantuml.tim.stdlib.StringFunction {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
interface net.sourceforge.plantuml.sequencediagram.graphic.Pushable {
~ double getPreferredWidth(StringBounder)
~ double getCenterX(StringBounder)
~ void pushToLeft(double)
+ Collection<Segment> getDelays(StringBounder)
}
class net.sourceforge.plantuml.command.CommandScaleMaxWidthAndHeight {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractPSystem,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.project.lang.SentenceIsDeleted {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.classdiagram.ClassDiagram {
- boolean allowMixing
- int useLayoutExplicit
- Code getShortName1972(Code)
+ ILeaf getOrCreateLeaf(Ident,Code,LeafType,USymbol)
+ ILeaf createLeaf(Ident,Code,Display,LeafType,USymbol)
- ILeaf createEntityWithNamespace1972(Ident,Code,Display,LeafType,USymbol)
+ boolean leafExist(Code)
+ void setAllowMixing(boolean)
+ boolean isAllowMixing()
+ void layoutNewLine()
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
# ImageData exportLayoutExplicit(OutputStream,int,FileFormatOption)
- RowLayout getRawLayout(int)
- TextBlock getEntityImageClass(ILeaf)
+ String checkFinalError()
}
class net.sourceforge.plantuml.stats.TextTable {
- {static} DateFormat formatter
- List<TextLine> lines
+ void addLine(Object)
+ void addSeparator()
- int[] getColsWidth()
- int getNbCols()
+ void printMe(PrintStream)
+ int getLines()
}
interface net.sourceforge.plantuml.stats.TextTable.TextLine {
+ int nbCols()
+ int getPreferredWidth(int)
+ String getPrinted(int[])
}
class net.sourceforge.plantuml.stats.TextTable.Separator {
+ int nbCols()
+ int getPreferredWidth(int)
+ String getPrinted(int[])
}
class net.sourceforge.plantuml.stats.TextTable.DataLine {
- Object[] cells
+ int nbCols()
+ int getPreferredWidth(int)
+ String getPrinted(int[])
- String formatMe(Object,int)
}
class net.sourceforge.plantuml.project.GanttDiagramFactory {
- {static} Collection<Command> cache
- {static} List<Subject> subjects()
# List<Command> createCommands()
+ {static} void clearCache()
- {static} Collection<Command> getLanguageCommands()
+ GanttDiagram createEmptyDiagram(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.graphic.USymbolCloud {
- {static} boolean NEW
- {static} boolean DEBUG
+ SkinParameter getSkinParameter()
- void drawCloud(UGraphic,double,double,boolean)
- UPath getSpecificFrontierForCloudNew(double,double)
- void complex(Random,List<Point2D>,double,Point2D.Double,Point2D.Double,Point2D.Double,Point2D.Double)
- void simple(Random,List<Point2D>,double,Point2D.Double,Point2D.Double,Point2D.Double,Point2D.Double)
- {static} Point2D mvX(Point2D,double)
- {static} Point2D mvY(Point2D,double)
- void specialLine(double,Random,List<Point2D>,Point2D,Point2D)
- void bubbleLine(Random,List<Point2D>,Point2D,Point2D,double)
- void addCurve(Random,UPath,Point2D,Point2D)
- {static} double rnd(Random,double,double)
- {static} Point2D rnd(Random,Point2D,double)
- UPath getSpecificFrontierForCloud(double,double)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.style.StyleSignature {
- Set<String> names
+ {static} StyleSignature empty()
+ StyleSignature addClickable(Url)
+ StyleSignature add(String)
+ StyleSignature add(SName)
+ StyleSignature addStar()
+ boolean isStarred()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
+ boolean matchAll(StyleSignature)
+ Set<String> getNames()
+ {static} StyleSignature of(SName)
+ StyleSignature withStereotype(Stereotype)
+ StyleSignature with(Stereotype)
- String clean(String)
+ StyleSignature mergeWith(List<Style>)
+ StyleSignature mergeWith(StyleSignature)
+ Style getMergedStyle(StyleBuilder)
+ boolean match(Stereotype)
}
class net.sourceforge.plantuml.ugraphic.color.HColorBackground {
- HColor back
+ HColor getNull()
~ HColor getBack()
}
class net.sourceforge.plantuml.creole.CreoleHorizontalLine {
- FontConfiguration fontConfiguration
- String line
- char style
- ISkinSimple skinParam
+ {static} CreoleHorizontalLine create(FontConfiguration,String,char,ISkinSimple)
- UHorizontalLine getHorizontalLine()
- TextBlock getTitle()
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
}
class net.sourceforge.plantuml.ImageSelection {
- Image image
+ DataFlavor[] getTransferDataFlavors()
+ boolean isDataFlavorSupported(DataFlavor)
+ Object getTransferData(DataFlavor)
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverPixelG2d {
+ void draw(UShape,double,double,ColorMapper,UParam,Graphics2D)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileGoto {
- String name
# FtileGeometry calculateDimensionFtile(StringBounder)
+ String getName()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorateIn {
- LinkRendering linkRendering
+ LinkRendering getInLinkRendering()
}
class net.sourceforge.plantuml.stats.TextConverter {
- Stats stats
- int linesUsed
+ void printMe(PrintStream)
+ int getLinesUsed()
+ {static} void main(String[])
}
class net.sourceforge.plantuml.gitlog.GitDiagramFactory {
+ Diagram createSystem(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector {
- StringBounder stringBounder
- UTranslate translate
- Context context
+ UGraphic apply(UChange)
- {static} boolean collisionCheck(MinMax,Line2D)
+ StringBounder getStringBounder()
+ UParam getParam()
+ void draw(UShape)
- void drawSnake(Snake)
- void drawRectangle(URectangle)
- void drawPolygone(UPolygon)
+ ColorMapper getColorMapper()
+ void flushUg()
+ void drawDebug(UGraphic)
+ void setManageSnakes(boolean)
+ boolean matchesProperty(String)
+ double dpiFactor()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector.Context {
- List<MinMax> rectangles
- List<Snake> snakes
- boolean manageSnakes
+ void drawDebug(UGraphic)
- void drawLine(UGraphic,Line2D)
- boolean collision(Line2D)
- boolean collision(MinMax)
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverRectangleTikz {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandForkEnd3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.Genealogy {
- Map<Ftile,Ftile> myFatherIs
- Ftile root
- void process(Ftile)
+ Ftile getMyFather(Ftile)
- void setMyFather(Ftile,Ftile)
+ UTranslate getTranslate(Ftile,StringBounder)
}
class net.sourceforge.plantuml.ugraphic.html5.UGraphicHtml5 {
- StringBounder stringBounder
# AbstractCommonUGraphic copyUGraphic()
+ StringBounder getStringBounder()
+ String generateHtmlCode()
+ void writeImageTOBEMOVED(OutputStream,String,int)
}
class net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter {
- Component component
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
}
interface net.sourceforge.plantuml.timingdiagram.TimeProjected {
+ IntricatedPoint getTimeProjection(StringBounder,TimeTick)
}
interface net.sourceforge.plantuml.cucadiagram.SquareLinker {
+ void leftRight(O,O)
+ void topDown(O,O)
}
class net.sourceforge.plantuml.wire.WLinkVertical {
- UTranslate start
- double destination
- WLinkType type
- WArrowDirection direction
- HColor color
- Display label
- ISkinParam skinParam
- TextBlock getTextBlock()
+ void drawMe(UGraphic)
- void drawBusArrow(UGraphic)
- void drawNormalArrow(UGraphic)
}
class net.sourceforge.plantuml.svek.image.QuadraticEquation {
- double a
- double b
- double c
+ double[] solve()
+ double getV(double)
}
class net.sourceforge.plantuml.project.draw.TimeHeaderSimple {
+ double getFullHeaderHeight()
+ double getTimeHeaderHeight()
+ double getTimeFooterHeight()
- double getHeaderNameDayHeight()
- void drawSmallVlinesDay(UGraphic,TimeScale,double)
- void drawSimpleDayCounter(UGraphic,TimeScale)
+ void drawTimeHeader(UGraphic,double)
+ void drawTimeFooter(UGraphic)
}
class net.sourceforge.plantuml.webp.DeltaQ {
+ boolean update
+ int v
}
class net.sourceforge.plantuml.command.CommandScaleWidthOrHeight {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractPSystem,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.SkinParamColors {
- Colors colors
+ Colors getColors()
+ String toString()
+ boolean shadowing(Stereotype)
+ HColor getFontHtmlColor(Stereotype,FontParam)
+ HColor getHtmlColor(ColorParam,Stereotype,boolean)
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverDotPathTikz {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
abstract class net.sourceforge.plantuml.api.ImageDataAbstract {
- int width
- int height
- int status
+ int getWidth()
+ int getHeight()
+ int getStatus()
+ void setStatus(int)
}
interface net.sourceforge.plantuml.project.core3.Histogram {
+ long getValueAt(long)
}
class net.sourceforge.plantuml.preproc2.ReadFilterAddConfig {
- List<String> config
+ ReadLine applyFilter(ReadLine)
}
class net.sourceforge.plantuml.timingdiagram.command.TimeTickBuilder {
+ {static} IRegex expressionAtWithoutArobase(String)
+ {static} IRegex expressionAtWithArobase(String)
+ {static} IRegex optionalExpressionAtWithArobase(String)
+ {static} TimeTick parseTimeTick(String,RegexResult,Clocks)
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverLineG2d {
- double dpiFactor
+ void draw(UShape,double,double,ColorMapper,UParam,Graphics2D)
~ {static} void manageStroke(UParam,Graphics2D)
}
class net.sourceforge.plantuml.preproc.DefineSignature {
- String key
- String fonctionName
- List<Variables> variables
- boolean isMethod
+ String toString()
+ boolean isMethod()
+ String getKey()
+ List<Variables> getVariationVariables()
+ String getFonctionName()
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction {
- FunctionsSet functionsSet
- TContext context
- TMemory memory
- List<StringLocated> logs
+ StringLocated peek()
}
class net.sourceforge.plantuml.eps.PostScriptData {
- List<PostScriptCommand> data
- String toString
+ String toPostString()
- String toPostStringSlow()
+ void add(PostScriptCommand)
}
class net.sourceforge.plantuml.command.regex.RegexOr {
- String name
# String getFullSlow()
# int getStartCount()
+ Map<String,RegexPartialMatch> createPartialMatch(Iterator<String>)
+ boolean match(StringLocated)
}
class net.sourceforge.plantuml.json.JsonObject {
- List<String> names
- List<JsonValue> values
- HashIndexTable table
+ {static} JsonObject readFrom(Reader)
+ {static} JsonObject readFrom(String)
+ {static} JsonObject unmodifiableObject(JsonObject)
+ JsonObject add(String,int)
+ JsonObject add(String,long)
+ JsonObject add(String,float)
+ JsonObject add(String,double)
+ JsonObject add(String,boolean)
+ JsonObject add(String,String)
+ JsonObject add(String,JsonValue)
+ JsonObject set(String,int)
+ JsonObject set(String,long)
+ JsonObject set(String,float)
+ JsonObject set(String,double)
+ JsonObject set(String,boolean)
+ JsonObject set(String,String)
+ JsonObject set(String,JsonValue)
+ JsonObject remove(String)
+ boolean contains(String)
+ JsonObject merge(JsonObject)
+ JsonValue get(String)
+ int getInt(String,int)
+ long getLong(String,long)
+ float getFloat(String,float)
+ double getDouble(String,double)
+ boolean getBoolean(String,boolean)
+ String getString(String,String)
+ int size()
+ boolean isEmpty()
+ List<String> names()
+ Iterator<Member> iterator()
~ void write(JsonWriter)
+ boolean isObject()
+ JsonObject asObject()
+ int hashCode()
+ boolean equals(Object)
~ int indexOf(String)
- void readObject(ObjectInputStream)
- void updateHashIndex()
}
class net.sourceforge.plantuml.json.JsonObject.Member {
- String name
- JsonValue value
+ String getName()
+ JsonValue getValue()
+ int hashCode()
+ boolean equals(Object)
}
class net.sourceforge.plantuml.json.JsonObject.HashIndexTable {
- byte[] hashTable
~ void add(String,int)
~ void remove(int)
~ int get(Object)
- int hashSlotFor(Object)
}
class net.sourceforge.plantuml.graphic.TextBlockHorizontal {
- List<TextBlock> blocks
- VerticalAlignment alignment
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.svek.image.EntityImageDescription {
- ShapeType shapeType
- Url url
- TextBlock asSmall
- TextBlock name
- TextBlock desc
- TextBlock stereo
- boolean hideText
- Collection<Link> links
- boolean useRankSame
- boolean fixCircleLabelOverlapping
- Bibliotekon bibliotekon
- SymbolContext ctx
- USymbol getUSymbol(ILeaf)
+ Dimension2D getNameDimension(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
+ Margins getShield(StringBounder)
- boolean hasSomeHorizontalLinkVisible(ILeaf,Collection<Link>)
- boolean isThereADoubleLink(ILeaf,Collection<Link>)
- boolean hasSomeHorizontalLinkDoubleDecorated(ILeaf,Collection<Link>)
+ void drawU(UGraphic)
- void drawHexagon(UGraphic)
+ ShapeType getShapeType()
+ double getOverscanX(StringBounder)
}
interface net.sourceforge.plantuml.graphic.FontChange {
~ FontConfiguration apply(FontConfiguration)
}
interface net.sourceforge.plantuml.salt.DataSource {
~ Terminated<String> peek(int)
}
class net.sourceforge.plantuml.svek.Cluster {
- {static} String RANK_SAME
- {static} String RANK_SOURCE
- {static} String RANK_SINK
- {static} String ID_EE
+ {static} String CENTER_ID
- Cluster parentCluster
- IGroup group
- List<SvekNode> nodes
- List<Cluster> children
- int color
- int colorTitle
- ISkinParam skinParam
- int titleAndAttributeWidth
- int titleAndAttributeHeight
- TextBlock ztitle
- TextBlock zstereo
- double xTitle
- double yTitle
- double minX
- double minY
- double maxX
- double maxY
- ColorParam border
+ void moveSvek(double,double)
- Set<EntityPosition> entityPositionsExceptNormal()
+ String toString()
+ Cluster getParentCluster()
+ void addNode(SvekNode)
+ List<SvekNode> getNodes()
- List<SvekNode> getNodesOrderedTop(Collection<SvekLine>)
- List<SvekNode> getNodesOrderedWithoutTop(Collection<SvekLine>)
+ List<Cluster> getChildren()
+ Cluster createChild(int,int,TextBlock,TextBlock,ColorSequence,ISkinParam,IGroup)
+ Set<IGroup> getGroups()
+ int getTitleAndAttributeWidth()
+ int getTitleAndAttributeHeight()
+ double getWidth()
+ double getMinX()
+ ClusterPosition getClusterPosition()
+ void setTitlePosition(double,double)
- {static} HColor getColor(ColorParam,ISkinParam,Stereotype)
+ {static} StyleSignature getDefaultStyleDefinition(SName)
+ void drawU(UGraphic,UStroke,UmlDiagramType,ISkinParam)
+ {static} UStroke getStrokeInternal(IGroup,ISkinParam)
+ void manageEntryExitPoint(StringBounder)
- void drawSwinLinesState(UGraphic,HColor)
- HColor getColor(ISkinParam,ColorParam,Stereotype)
- void drawUState(UGraphic,HColor,ISkinParam,UStroke,UmlDiagramType)
+ void setPosition(double,double,double,double)
- Style getStyle(FontParam,ISkinParam)
- boolean isThereALinkFromOrToGroup(Collection<SvekLine>)
+ void printCluster1(StringBuilder,Collection<SvekLine>,StringBounder)
- List<IShapePseudo> addProtection(List<? extends IShapePseudo>,double)
- double getMaxWidthFromLabelForEntryExit(List<? extends IShapePseudo>,StringBounder)
- double getMaxWidthFromLabelForEntryExit(IShapePseudo,StringBounder)
- void printRanks(String,List<? extends IShapePseudo>,StringBuilder,StringBounder)
- List<? extends IShapePseudo> withPositionProtected(StringBounder,Set<EntityPosition>)
- List<SvekNode> withPosition(Set<EntityPosition>)
- void printClusterEntryExit(StringBuilder,StringBounder)
+ SvekNode printCluster2(StringBuilder,Collection<SvekLine>,StringBounder,DotMode,GraphvizVersion,UmlDiagramType)
- void appendRankSame(StringBuilder,Collection<SvekLine>)
- Set<String> getRankSame(Collection<SvekLine>)
+ void fillRankMin(Set<String>)
- boolean isInCluster(String)
+ String getClusterId()
+ {static} String getSpecialPointId(IEntity)
- boolean protection0(UmlDiagramType)
- boolean protection1(UmlDiagramType)
+ String getMinPoint(UmlDiagramType)
+ String getMaxPoint(UmlDiagramType)
- String getSourceInPoint(UmlDiagramType)
- String getSinkInPoint(UmlDiagramType)
- void printInternal(StringBuilder,Collection<SvekLine>,StringBounder,DotMode,GraphvizVersion,UmlDiagramType)
- boolean hasPort()
- String empty()
+ boolean isLabel()
- void subgraphClusterNoLabel(StringBuilder,String)
- void subgraphClusterWithLabel(StringBuilder,String,String)
+ int getColor()
+ int getTitleColor()
- HColor getBackColor(UmlDiagramType)
+ boolean isClusterOf(IEntity)
+ {static} HColor getBackColor(HColor,ISkinParam,Stereotype,SName)
+ double checkFolderPosition(Point2D,StringBounder)
}
interface net.sourceforge.plantuml.command.regex.IRegex {
+ String getPattern()
+ int count()
+ Map<String,RegexPartialMatch> createPartialMatch(Iterator<String>)
+ boolean match(StringLocated)
+ RegexResult matcher(String)
}
abstract class net.sourceforge.plantuml.timingdiagram.command.CommandChangeState {
~ {static} String STATE_CODE
~ {static} ColorParser color()
# CommandExecutionResult addState(TimingDiagram,RegexResult,Player,TimeTick)
- String[] getStates(RegexResult)
~ {static} IRegex getStateOrHidden()
}
class net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA2 {
~ {static} IRegex getRegexConcat()
}
class net.sourceforge.plantuml.picoweb.BadRequest400 {
}
class net.sourceforge.plantuml.argon2.Validation {
~ {static} void validateInput(Argon2)
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryTree {
+ Terminated<Element> create()
+ boolean ready()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactorySquare {
- HColor backgroundColor
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.svek.ConcurrentStateImage {
- List<IEntityImage> inners
- Separator separator
- ISkinParam skinParam
- HColor backColor
- HColor getColor(ColorParam)
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
+ HColor getBackcolor()
+ boolean isHidden()
+ Margins getShield(StringBounder)
+ ShapeType getShapeType()
+ double getOverscanX(StringBounder)
}
class net.sourceforge.plantuml.cucadiagram.SquareMaker {
+ void putInSquare(List<O>,SquareLinker<O>)
~ {static} int computeBranch(int)
~ {static} int getBottomLeft(int)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamond {
- HColor backColor
- HColor borderColor
- Swimlane swimlane
- TextBlock north
- TextBlock south
- TextBlock west1
- TextBlock east1
- double shadowing
+ StyleSignature getDefaultStyleDefinitionDiamond()
+ Collection<Ftile> getMyChildren()
+ FtileDiamond withNorth(TextBlock)
+ FtileDiamond withWest(TextBlock)
+ FtileDiamond withEast(TextBlock)
+ FtileDiamond withSouth(TextBlock)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
+ Ftile withWestAndEast(TextBlock,TextBlock)
+ double getEastLabelWidth(StringBounder)
+ double getSouthLabelHeight(StringBounder)
}
class net.sourceforge.plantuml.svek.Boundary {
- double margin
- double radius
- double left
- SymbolContext symbolContext
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.json.ParseException {
- Location location
+ Location getLocation()
+ int getOffset()
+ int getLine()
+ int getColumn()
}
class net.sourceforge.plantuml.sequencediagram.SequenceDiagram {
- List<Participant> participantsList
- List<Event> events
- Map<Participant,ParticipantEnglober> participantEnglobers2
- Rose skin2
- EventWithDeactivate lastEventWithDeactivate
- boolean ignoreNewpage
- int autonewpage
- Delay lastDelay
- Stack<AbstractMessage> activationState
- LifeEvent pendingCreate
- List<GroupingStart> openGroupings
- AutoNumber autoNumber
- boolean showFootbox
- ParticipantEnglober participantEnglober
- boolean autoactivate
- Set<EntityPortion> hiddenPortions
- List<LinkAnchor> linkAnchors
+ Participant getOrCreateParticipant(String)
+ Participant getOrCreateParticipant(String,Display)
- Participant participantsget(String)
+ EventWithDeactivate getLastEventWithDeactivate()
+ Participant createNewParticipant(ParticipantType,String,Display,int)
- void addWithOrder(Participant)
+ Collection<Participant> participants()
+ boolean participantsContainsKey(String)
+ String addMessage(AbstractMessage)
+ void addNote(Note,boolean)
+ void newpage(Display)
+ void ignoreNewpage()
+ int getAutonewpage()
+ void setAutonewpage(int)
+ void divider(Display)
+ void hspace()
+ void hspace(int)
+ void delay(Display)
+ List<Event> events()
- FileMaker getSequenceDiagramPngMaker(int,FileFormatOption)
- boolean modeTeoz()
+ ImageBuilder createImageBuilder(FileFormatOption)
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
+ AbstractMessage getActivatingMessage()
+ String activate(Participant,LifeEventType,HColor)
+ String activate(Participant,LifeEventType,HColor,HColor)
+ boolean grouping(String,String,GroupingType,HColor,HColor,boolean)
+ DiagramDescription getDescription()
+ void autonumberGo(DottedNumber,int,DecimalFormat)
+ void autonumberStop()
+ AutoNumber getAutoNumber()
+ String getNextMessageNumber()
+ boolean isShowFootbox()
+ void setShowFootbox(boolean)
+ void boxStart(Display,HColor,Stereotype)
+ void endBox()
+ boolean isBoxPending()
+ int getNbImages()
+ void removeHiddenParticipants()
- void remove(Participant)
- boolean isAlone(Participant)
+ void putParticipantInLast(String)
+ ParticipantEnglober getEnglober(Participant)
+ void setAutoactivate(boolean)
+ boolean isAutoactivate()
+ boolean hasUrl()
+ void addReference(Reference)
+ boolean isOk()
+ String checkFinalError()
+ void hideOrShow(Set<EntityPortion>,boolean)
+ Display manageVariable(Display)
+ CommandExecutionResult linkAnchor(String,String,String)
+ List<LinkAnchor> getLinkAnchors()
+ ClockwiseTopRightBottomLeft getDefaultMargins()
}
class net.sourceforge.plantuml.tim.TMode {
}
class net.sourceforge.plantuml.ugraphic.svg.DriverDotPathSvg {
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
class net.sourceforge.plantuml.sequencediagram.GroupingLeaf {
- GroupingStart start
- HColor backColorGeneral
- double posYendLevel
- List<Note> noteOnMessages
+ Grouping getJustAfter()
+ GroupingStart getGroupingStart()
+ int getLevel()
+ HColor getBackColorGeneral()
+ boolean dealWith(Participant)
+ Url getUrl()
+ boolean hasUrl()
+ boolean isParallel()
+ void setPosYendLevel(double)
+ double getPosYendLevel()
+ boolean addLifeEvent(LifeEvent)
+ void setNote(Note)
+ List<Note> getNoteOnMessages()
}
class net.sourceforge.plantuml.preproc.ReadLineSimple {
- StringLocated data
- String error
- int current
+ void close()
+ StringLocated readLine()
}
class net.sourceforge.plantuml.LineBreakStrategy {
+ {static} LineBreakStrategy NONE
- String value
+ String toString()
+ boolean isAuto()
+ double getMaxWidth()
}
class net.sourceforge.plantuml.timingdiagram.TimeTick {
- BigDecimal time
- TimingFormat format
+ BigDecimal getTime()
+ int compareTo(TimeTick)
+ TimingFormat getFormat()
+ String toString()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondInside3 {
- HColor backColor
- HColor borderColor
- Swimlane swimlane
- TextBlock label
- TextBlock west
- TextBlock east
- TextBlock north
- TextBlock south
+ FtileDiamondInside3 withNorth(TextBlock)
+ FtileDiamondInside3 withWest(TextBlock)
+ FtileDiamondInside3 withEast(TextBlock)
+ FtileDiamondInside3 withSouth(TextBlock)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ void drawU(UGraphic)
- FtileGeometry calculateDimensionAlone(StringBounder)
# FtileGeometry calculateDimensionFtile(StringBounder)
+ FtileGeometry getOverpassDimension(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.VCompactFactory {
- ISkinParam skinParam
- Rose rose
- StringBounder stringBounder
+ StringBounder getStringBounder()
+ StyleBuilder getCurrentStyleBuilder()
+ StyleSignature getDefaultStyleDefinitionCircle()
+ Ftile start(Swimlane)
+ Ftile stop(Swimlane)
+ Ftile spot(Swimlane,String,HColor)
+ Ftile end(Swimlane)
+ Ftile activity(Display,Swimlane,BoxStyle,Colors,Stereotype)
+ Ftile addNote(Ftile,Swimlane,Collection<PositionedNote>)
+ Ftile addUrl(Ftile,Url)
+ Ftile assembly(Ftile,Ftile)
+ Ftile repeat(BoxStyle,Swimlane,Swimlane,Display,Ftile,Display,Display,Display,Colors,Ftile,boolean,LinkRendering,LinkRendering)
+ Ftile createWhile(LinkRendering,Swimlane,Ftile,Display,Display,HColor,Instruction,Ftile,LinkRendering,LinkRendering)
+ Ftile createIf(Swimlane,List<Branch>,Branch,LinkRendering,LinkRendering,Url)
+ Ftile createSwitch(Swimlane,List<Branch>,LinkRendering,LinkRendering,Display)
+ Ftile createParallel(List<Ftile>,ForkStyle,String,Swimlane,Swimlane)
+ Ftile createGroup(Ftile,Display,HColor,HColor,PositionedNote,HColor,USymbol,double)
+ Ftile decorateIn(Ftile,LinkRendering)
+ Ftile decorateOut(Ftile,LinkRendering)
+ ISkinParam skinParam()
}
class net.sourceforge.plantuml.ditaa.PSystemDitaa {
- Object processingOptions
- boolean dropShadows
- String data
- float scale
- boolean performSeparationOfCommonEdges
~ PSystemDitaa add(String)
+ DiagramDescription getDescription()
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
}
class net.sourceforge.plantuml.wbs.ITFLeaf {
- TextBlock box
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ Point2D getT1(StringBounder)
+ Point2D getT2(StringBounder)
+ Point2D getF1(StringBounder)
+ Point2D getF2(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandGroup3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.tim.expression.TValue {
- int intValue
- String stringValue
- JsonValue jsonValue
+ {static} TValue fromInt(int)
+ {static} TValue fromBoolean(boolean)
+ {static} TValue fromJson(JsonValue)
+ String toString()
+ {static} TValue fromString(Token)
+ {static} TValue fromString(String)
+ {static} TValue fromNumber(Token)
+ TValue add(TValue)
+ TValue minus(TValue)
+ TValue multiply(TValue)
+ TValue dividedBy(TValue)
+ boolean isNumber()
+ boolean isJson()
+ Token toToken()
+ TValue greaterThanOrEquals(TValue)
+ TValue greaterThan(TValue)
+ TValue lessThanOrEquals(TValue)
+ TValue lessThan(TValue)
+ TValue equalsOperation(TValue)
+ TValue notEquals(TValue)
+ boolean toBoolean()
+ int toInt()
+ TValue logicalAnd(TValue)
+ TValue logicalOr(TValue)
+ JsonValue toJson()
}
class net.sourceforge.plantuml.ugraphic.color.ColorMapperReverse {
- ColorOrder order
+ Color toColor(HColor)
- Color getReverse(Color)
}
interface net.sourceforge.plantuml.core.Diagram {
~ ImageData exportDiagram(OutputStream,int,FileFormatOption)
~ int getNbImages()
~ DiagramDescription getDescription()
~ String getMetadata()
~ String getWarningOrError()
~ UmlSource getSource()
+ boolean hasUrl()
}
class net.sourceforge.plantuml.project.GanttArrow {
- TimeScale timeScale
- Direction atStart
- TaskInstant source
- Direction atEnd
- TaskInstant dest
- HColorSet colorSet
- Style style
- ToTaskDraw toTaskDraw
- StyleBuilder styleBuilder
- TaskDraw getSource()
- TaskDraw getDestination()
+ void drawU(UGraphic)
- void drawLine(UGraphic,double)
- StyleSignature getStyleSignatureTask()
- double getX(TaskAttribute,TaskDraw,Direction)
}
class net.sourceforge.plantuml.definition.PSystemDefinition {
- List<String> lines
- String startLine
+ DiagramDescription getDescription()
# UDrawable getRootDrawable(FileFormatOption)
+ void drawU(UGraphic)
+ void doCommandLine(String)
}
class net.sourceforge.plantuml.sequencediagram.teoz.TileParallel {
- List<Tile> tiles
# void callbackY_internal(double)
+ void add(Tile)
+ void drawU(UGraphic)
+ double getContactPointRelative()
+ double getZZZ()
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
+ Event getEvent()
+ boolean matchAnchor(String)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandSkin {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.classdiagram.command.CommandHideShowByVisibility {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(UmlDiagram,LineLocation,RegexResult)
- CommandExecutionResult executeArgClass(ClassDiagram,RegexResult)
- void addVisibilities(String,EntityPortion,Set<VisibilityModifier>)
- EntityPortion getEntityPortion(String)
}
class net.sourceforge.plantuml.nwdiag.GridTextBlockDecorated {
+ {static} int NETWORK_THIN
- List<NwGroup> groups
- List<Network> networks
# void drawGrid(UGraphic)
- void drawLinks(UGraphic)
- void drawGroups(UGraphic,NwGroup,ISkinParam)
- boolean isThereALink(int,Network)
- void drawNetworkTube(UGraphic)
- void computeMixMax(LinkedElement[],StringBounder,Network)
- Network getNetwork(int)
+ void checkGroups()
}
class net.sourceforge.plantuml.svek.image.EntityImagePseudoState {
- {static} int SIZE
- TextBlock desc
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryDoubleLine {
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
interface net.sourceforge.plantuml.salt.element.Element {
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
}
class net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObject {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractClassOrObjectDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.UGraphicInterceptorUDrawable2 {
- Map<String,UTranslate> positions
+ void draw(UShape)
- UTranslate getPosition()
- void drawGoto(FtileGoto)
+ UGraphic apply(UChange)
}
class net.sourceforge.plantuml.creole.command.CommandCreoleSprite {
- {static} Pattern2 pattern
- HColorSet colorSet
- ThemeStyle themeStyle
+ {static} Command create(ThemeStyle,HColorSet)
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandHighlight {
- {static} ColorParser color()
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
abstract class net.sourceforge.plantuml.sequencediagram.command.CommandParticipant {
~ {static} IRegex getOrderRegex()
~ {static} IRegex getRegexType()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileSwitch {
- double xSeparation
- List<Ftile> tiles
- Rainbow arrowColor
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
~ {static} Ftile create(Swimlane,HColor,HColor,Rainbow,FtileFactory,ConditionStyle,List<Branch>,FontConfiguration,LinkRendering,LinkRendering,FontConfiguration)
+ Collection<Ftile> getMyChildren()
+ UTranslate getTranslateFor(Ftile,StringBounder)
- UTranslate getTranslate1(Ftile,StringBounder)
+ void drawU(UGraphic)
- FtileGeometry calculateDimensionInternal(StringBounder)
# FtileGeometry calculateDimensionFtile(StringBounder)
}
class net.sourceforge.plantuml.project.command.CommandWeekNumberStrategy {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(GanttDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.tim.stdlib.CallUserFunction {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.png.PngIOMetadata {
- {static} String copyleft
+ {static} void writeWithMetadata(RenderedImage,OutputStream,String,int,String)
- {static} void writeInternal(RenderedImage,OutputStream,String,int,String)
- {static} void addDpi(IIOMetadata,double)
- {static} void addiText(IIOMetadata,String,String)
- {static} void addText(IIOMetadata,String,String)
- {static} ImageWriter getImageWriter()
}
class net.sourceforge.plantuml.project.lang.SentenceEnds {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementTail {
# void drawInternalU(UGraphic,double,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.skin.Area {
- Dimension2D dimensionToUse
- double deltaX1
+ String toString()
+ Dimension2D getDimensionToUse()
+ void setDeltaX1(double)
+ double getDeltaX1()
}
class net.sourceforge.plantuml.ugraphic.PlacementStrategyY1Y2Right {
+ Map<TextBlock,Point2D> getPositions(double,double)
}
class net.sourceforge.plantuml.project.core.TaskInstant {
- Moment task
- TaskAttribute attribute
- int delta
+ TaskInstant withDelta(int)
- Day manageDelta(Day)
+ Day getInstantPrecise()
+ Day getInstantTheorical()
+ String toString()
+ Moment getMoment()
+ boolean isTask()
+ TaskAttribute getAttribute()
+ boolean sameRowAs(TaskInstant)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop {
- Ftile tile1
- Ftile diamond1
- Ftile stop2
- Rainbow arrowColor
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
~ {static} Ftile create(Swimlane,HColor,HColor,Rainbow,FtileFactory,ConditionStyle,Branch,ISkinParam,StringBounder,Display)
- UTranslate getTranslate1(StringBounder)
- int getSuppHeight()
- UTranslate getTranslateDiamond1(StringBounder)
- UTranslate getTranslateStop(StringBounder)
- double getDiamondStopDistance()
+ UTranslate getTranslateFor(Ftile,StringBounder)
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop.ConnectionHorizontal {
- Rainbow color
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
}
class net.sourceforge.plantuml.argon2.algorithm.FillMemory {
+ {static} void fillMemoryBlocks(Instance)
- {static} void fillMemoryBlockSingleThreaded(Instance)
- {static} void fillMemoryBlockMultiThreaded(Instance)
- {static} void joinThreads(Instance,List<Future<?>>)
}
class net.sourceforge.plantuml.project.draw.TimeHeaderQuarterly {
+ double getTimeHeaderHeight()
+ double getTimeFooterHeight()
+ void drawTimeHeader(UGraphic,double)
+ void drawTimeFooter(UGraphic)
- void drawYears(UGraphic)
- void drawQuarters(UGraphic)
- String quarter(Day)
- void printYear(UGraphic,MonthYear,double,double)
- void printQuarter(UGraphic,String,double,double)
- void drawVbar(UGraphic,double,double,double)
- void printLeft(UGraphic,TextBlock,double)
+ double getFullHeaderHeight()
}
class net.sourceforge.plantuml.timingdiagram.command.CommandScalePixel {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.preproc.ReadLineNumbered {
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandSplitAgain3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex {
- double[] freeY
+ double getFreeY(ParticipantRange)
+ String toString()
+ FrontierComplex add(double,ParticipantRange)
~ FrontierComplex copy()
~ FrontierComplex mergeMax(FrontierComplex)
}
class net.sourceforge.plantuml.code.Tokens {
- List<String> keywords
+ {static} void main(String[])
+ String compressUnicodeE000(String)
+ String compressAscii128(String)
- void add(String)
}
class net.sourceforge.plantuml.tim.stdlib.GetVariableValue {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandDefineStateShort {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.mindmap.StripeFrontier {
- SortedSet<Stripe> stripes
+ boolean isEmpty()
+ String toString()
+ boolean contains(double,double)
+ double getContact(double,double)
+ void addSegment(double,double,double)
- void addSingleInternal(double,double,double,Stripe)
- boolean checkConsistent()
- SortedSet<Stripe> collisionning(double,double)
}
class net.sourceforge.plantuml.tim.EaterFunctionCall {
- List<TValue> values
- Map<String,TValue> namedArguments
- boolean isLegacyDefine
- boolean unquoted
+ void analyze(TContext,TMemory)
+ List<TValue> getValues()
+ Map<String,TValue> getNamedArguments()
+ String getEndOfLine()
}
interface net.sourceforge.plantuml.asciiart.BasicCharArea {
~ int getWidth()
~ int getHeight()
~ void drawChar(char,int,int)
~ void fillRect(char,int,int,int,int)
~ void drawStringLR(String,int,int)
~ void drawStringTB(String,int,int)
~ String getLine(int)
~ void print(PrintStream)
~ List<String> getLines()
~ void drawHLine(char,int,int,int)
~ void drawHLine(char,int,int,int,char,char)
~ void drawVLine(char,int,int,int)
}
class net.sourceforge.plantuml.tim.EaterImport {
- String location
+ void analyze(TContext,TMemory)
+ String getLocation()
}
class net.sourceforge.plantuml.json.PrettyPrint {
- char[] indentChars
+ {static} PrettyPrint singleLine()
+ {static} PrettyPrint indentWithSpaces(int)
+ {static} PrettyPrint indentWithTabs()
# JsonWriter createWriter(Writer)
}
class net.sourceforge.plantuml.json.PrettyPrint.PrettyPrintWriter {
- char[] indentChars
- int indent
# void writeArrayOpen()
# void writeArrayClose()
# void writeArraySeparator()
# void writeObjectOpen()
# void writeObjectClose()
# void writeMemberSeparator()
# void writeObjectSeparator()
- boolean writeNewLine()
}
class net.sourceforge.plantuml.ugraphic.MinMaxMutable {
- double maxX
- double maxY
- double minX
- double minY
+ {static} MinMaxMutable getEmpty(boolean)
+ boolean isInfinity()
+ String toString()
+ void addPoint(double,double)
+ {static} MinMaxMutable fromMax(double,double)
+ double getMaxX()
+ double getMaxY()
+ double getMinX()
+ double getMinY()
+ Dimension2D getDimension()
}
class net.sourceforge.plantuml.nwdiag.Network {
- String name
- Map<Square,String> localSquare
- HColor color
- boolean visible
- String ownAdress
- boolean fullWidth
- int stage
- double xmin
- double xmax
- double y
+ String toString()
+ String getAdress(Square)
+ void addSquare(Square,Map<String,String>)
+ boolean constainsLocally(String)
+ String getOwnAdress()
+ void setOwnAdress(String)
+ String getName()
+ HColor getColor()
+ void setColor(HColor)
+ void goInvisible()
+ boolean isVisible()
+ void setFullWidth(boolean)
+ boolean isFullWidth()
+ int getStage()
+ void setMinMax(double,double)
+ double getXmin()
+ double getXmax()
+ double getY()
+ void setY(double)
}
class net.sourceforge.plantuml.ugraphic.PlacementStrategyVisibility {
- int col2
+ Map<TextBlock,Point2D> getPositions(double,double)
}
class net.sourceforge.plantuml.svek.image.Opale {
- {static} int cornersize
- HColor noteBackgroundColor
- HColor borderColor
- int marginX1
- int marginX2
- int marginY
- double shadowing2
- Direction strategy
- Point2D pp1
- Point2D pp2
- boolean withLink
- double roundCorner
- TextBlock textBlock
- double delta
+ void setRoundCorner(double)
+ void setOpale(Direction,Point2D,Point2D)
- double getWidth(StringBounder)
- double getHeight(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- UPath getPolygonNormal(StringBounder)
+ {static} UPath getCorner(double,double)
+ {static} UPath getPolygonNormal(double,double,double)
- UPath getPolygonLeft(StringBounder,Point2D,Point2D)
- UPath getPolygonRight(StringBounder,Point2D,Point2D)
- UPath getPolygonUp(StringBounder,Point2D,Point2D)
- UPath getPolygonDown(StringBounder,Point2D,Point2D)
+ int getMarginX1()
}
class net.sourceforge.plantuml.utils.StartUtils {
+ {static} Pattern2 patternFilename
+ {static} String PAUSE_PATTERN
+ {static} String START_PATTERN
- {static} Pattern2 append
+ {static} String beforeStartUml(String)
+ {static} boolean isArobaseStartDiagram(String)
+ {static} boolean startsWithSymbolAnd(String,StringLocated)
+ {static} boolean startsWithSymbolAnd(String,String)
+ {static} boolean startOrEnd(StringLocated)
+ {static} boolean isArobaseEndDiagram(String)
+ {static} boolean isArobasePauseDiagram(String)
+ {static} boolean isArobaseUnpauseDiagram(String)
+ {static} boolean isExit(CharSequence)
+ {static} StringLocated getPossibleAppend(StringLocated)
}
class net.sourceforge.plantuml.help.Help {
- List<CharSequence> lines
+ DiagramDescription getDescription()
+ ImageBuilder createImageBuilder(FileFormatOption)
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
+ void add(CharSequence)
+ ClockwiseTopRightBottomLeft getDefaultMargins()
}
class net.sourceforge.plantuml.project.time.MonthYear {
- int year
- Month month
+ {static} MonthYear create(int,Month)
+ String shortName()
+ String shortNameYYYY()
+ String longName()
+ String longNameYYYY()
+ int year()
+ MonthYear next()
+ Month month()
- int internalNumber()
+ String toString()
+ int hashCode()
+ boolean equals(Object)
+ int compareTo(MonthYear)
}
class net.sourceforge.plantuml.posimo.DotxMaker {
- Cluster root
- Collection<Path> paths
+ String createDotString(String)
- void printCluster(StringBuilder,Cluster)
- String getPathString(Path)
- String getNodeAttibute(Block)
}
class net.sourceforge.plantuml.graphic.TextBlockWithUrl {
- TextBlock block
- Url url
+ {static} TextBlock withUrl(TextBlock,Url)
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
+ MinMax getMinMax(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
}
class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteTop {
- Tile tile
- AbstractMessage message
- Rose skin
- ISkinParam skinParam
- Note noteOnMessage
- double spacey
+ Event getEvent()
+ double getContactPointRelative()
# void callbackY_internal(double)
- Component getComponent(StringBounder)
- Real getNotePosition(StringBounder)
+ void drawU(UGraphic)
- void drawLine(UGraphic,double,double,double,double)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactoryDelegator {
- FtileFactory factory
- Rose rose
+ StyleSignature getDefaultStyleDefinitionActivity()
+ StyleSignature getDefaultStyleDefinitionDiamond()
+ StyleSignature getDefaultStyleDefinitionArrow()
# Rainbow getInLinkRenderingColor(Ftile)
# TextBlock getTextBlock(Display)
# Display getInLinkRenderingDisplay(Ftile)
+ Ftile start(Swimlane)
+ Ftile end(Swimlane)
+ Ftile stop(Swimlane)
+ Ftile spot(Swimlane,String,HColor)
+ Ftile activity(Display,Swimlane,BoxStyle,Colors,Stereotype)
+ Ftile addNote(Ftile,Swimlane,Collection<PositionedNote>)
+ Ftile addUrl(Ftile,Url)
+ Ftile decorateIn(Ftile,LinkRendering)
+ Ftile decorateOut(Ftile,LinkRendering)
+ Ftile assembly(Ftile,Ftile)
+ Ftile repeat(BoxStyle,Swimlane,Swimlane,Display,Ftile,Display,Display,Display,Colors,Ftile,boolean,LinkRendering,LinkRendering)
+ Ftile createWhile(LinkRendering,Swimlane,Ftile,Display,Display,HColor,Instruction,Ftile,LinkRendering,LinkRendering)
+ Ftile createIf(Swimlane,List<Branch>,Branch,LinkRendering,LinkRendering,Url)
+ Ftile createSwitch(Swimlane,List<Branch>,LinkRendering,LinkRendering,Display)
+ Ftile createParallel(List<Ftile>,ForkStyle,String,Swimlane,Swimlane)
+ Ftile createGroup(Ftile,Display,HColor,HColor,PositionedNote,HColor,USymbol,double)
+ StringBounder getStringBounder()
# Rose getRose()
+ ISkinParam skinParam()
# FtileFactory getFactory()
}
class net.sourceforge.plantuml.project.lang.SentenceLasts {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.tim.TimLoader {
- TContext context
- TMemory global
- boolean preprocessorError
- List<StringLocated> resultList
+ Set<FileWithSuffix> load(List<StringLocated>)
- void changeLastLine(List<StringLocated>,String)
+ List<StringLocated> getResultList()
+ List<StringLocated> getDebug()
+ boolean isPreprocessorError()
}
class net.sourceforge.plantuml.tim.stdlib.Darken {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryBorder {
+ Terminated<Element> create()
+ boolean ready()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandForkAgain3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryNotNavigable {
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileKilled {
- Ftile tile
+ Collection<Ftile> getMyChildren()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
# FtileGeometry calculateDimensionFtile(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple {
- Ftile tile1
- Ftile tile2
- Map<Ftile,UTranslate> cachedTranslation
- FtileGeometry calculateDimension
+ String toString()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ UTranslate getTranslateFor(Ftile,StringBounder)
- UTranslate getTranslateForSlow(Ftile,StringBounder)
+ void drawU(UGraphic)
+ LinkRendering getInLinkRendering()
+ LinkRendering getOutLinkRendering()
+ FtileGeometry calculateDimension(StringBounder)
- UTranslate getTranslated1(StringBounder)
- UTranslate getTranslated2(StringBounder)
+ Collection<Connection> getInnerConnections()
+ Set<Swimlane> getSwimlanes()
+ ISkinParam skinParam()
+ UStroke getThickness()
+ List<WeldingPoint> getWeldingPoints()
+ Collection<Ftile> getMyChildren()
+ HorizontalAlignment arrowHorizontalAlignment()
}
class net.sourceforge.plantuml.eggs.PSystemLostFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.jsondiagram.TextBlockJson {
- List<Line> lines
- Style style
- Style styleHightlight
- ISkinParam skinParam
- double totalWidth
- JsonValue root
- HColor getBackColor()
- Style getRightStyle(boolean)
- boolean isHighlighted(String,List<String>)
+ int size()
- String getShortString(JsonValue)
+ List<JsonValue> children()
+ List<String> keys()
+ Dimension2D calculateDimension(StringBounder)
+ double getWidthColA(StringBounder)
+ double getWidthColB(StringBounder)
+ void drawU(UGraphic)
- double getTotalHeight(StringBounder)
- TextBlock getTextBlock(Style,String)
+ void setTotalWidth(double)
+ HColor getBackcolor()
}
class net.sourceforge.plantuml.jsondiagram.TextBlockJson.Line {
~ TextBlock b1
~ TextBlock b2
~ boolean highlighted
~ double getHeightOfRow(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.svg.UGraphicSvg {
- StringBounder stringBounder
- boolean textAsPath2
- String target
+ double dpiFactor()
# AbstractCommonUGraphic copyUGraphic()
# boolean manageHiddenAutomatically()
# void beforeDraw()
# void afterDraw()
- void register()
+ SvgGraphics getSvgGraphics()
+ StringBounder getStringBounder()
+ void createXml(OutputStream,String)
+ void startGroup(UGroupType,String)
+ void closeGroup()
+ void startUrl(Url)
+ void closeUrl()
+ void writeImageTOBEMOVED(OutputStream,String,int)
# void drawComment(UComment)
+ boolean matchesProperty(String)
}
class net.sourceforge.plantuml.graphic.Rainbow {
- {static} Rose rose
- List<HtmlColorAndStyle> colors
- int colorArrowSeparationSpace
+ String toString()
+ {static} Rainbow none()
+ {static} Rainbow fromColor(HColor,HColor)
+ {static} Rainbow build(ISkinParam)
+ {static} Rainbow build(Style,HColorSet,ThemeStyle)
+ Rainbow withDefault(Rainbow)
+ {static} Rainbow build(HtmlColorAndStyle)
+ {static} Rainbow build(ISkinParam,String,int)
+ boolean isInvisible()
+ List<HtmlColorAndStyle> getColors()
+ HColor getColor()
+ int getColorArrowSeparationSpace()
+ int size()
}
class net.sourceforge.plantuml.command.CommandSpriteFile {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
- Sprite getImageFromZip(SFile,String)
- boolean isSvg(String)
}
interface net.sourceforge.plantuml.graphic.StringBounder {
+ Dimension2D calculateDimension(UFont,String)
+ double getDescent(UFont,String)
}
class net.sourceforge.plantuml.vizjs.GraphvizJsRuntimeException {
}
class net.sourceforge.plantuml.xmi.XmiStateDiagram {
- StateDiagram diagram
- Document document
- Element ownedElement
- void addState(IEntity,Element)
+ {static} String forXMI(String)
+ {static} String forXMI(Display)
- void addLink(Link)
- Element createEntityNode(IEntity)
+ void transformerXml(OutputStream)
}
class net.sourceforge.plantuml.eggs.SentenceDecoder {
- String secret
+ boolean isOk()
+ String getSecret()
}
abstract class net.sourceforge.plantuml.project.draw.TimeHeaderCalendar {
# LoadPlanable defaultPlan
# Map<Day,HColor> colorDays
# Map<DayOfWeek,HColor> colorDaysOfWeek
# void drawTextsBackground(UGraphic,double)
}
class net.sourceforge.plantuml.project.draw.TimeHeaderCalendar.Pending {
~ double x1
~ double x2
~ HColor color
+ void draw(UGraphic,double)
}
interface net.sourceforge.plantuml.tim.expression.Knowledge {
+ TValue getVariable(String)
+ TFunction getFunction(TFunctionSignature)
}
interface net.sourceforge.plantuml.project.core.Moment {
+ Day getStart()
+ Day getEnd()
}
class net.sourceforge.plantuml.webp.IDCT {
- {static} int cospi8sqrt2minus1
- {static} int sinpi8sqrt2
+ {static} int[][] idct4x4llm(int[])
+ {static} int[][] iwalsh4x4(int[])
}
class net.sourceforge.plantuml.svek.image.EntityImageUseCase {
- TextBlock desc
- Url url
- UStroke getStroke()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- void specialBusiness(UGraphic,UEllipse)
- void specialBusiness0(UGraphic,UEllipse)
- void drawLine(UGraphic,Point2D,Point2D)
- double getTrueAngle(double,double)
- HColor getBackColor()
- Style getStyle()
- StyleSignature getDefaultStyleDefinition()
- HColor getLineColor()
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.svek.image.EntityImageUseCase.MyUGraphicEllipse {
- double startingX
- double yTheoricalPosition
- UEllipse ellipse
# AbstractUGraphicHorizontalLine copy(UGraphic)
- double getNormalized(double)
- double getStartingXInternal(double)
- double getEndingXInternal(double)
- Stencil getStencil2(UTranslate)
# void drawHline(UGraphic,UHorizontalLine,UTranslate)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityDiamond {
- UPolygon polygon
- boolean fill
- Point2D contact
- HColor backgroundColor
+ Point2D somePoint()
+ void drawU(UGraphic)
+ Point2D isTooSmallSoGiveThePointCloserToThisOne(Point2D)
}
class net.sourceforge.plantuml.command.CommandFootboxIgnored {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(UmlDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.sequencediagram.graphic.GraphicalHSpace {
- int size
# void drawInternalU(UGraphic,double,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getStartingX(StringBounder)
}
class net.sourceforge.plantuml.graphic.USymbolActor {
- ActorStyle actorStyle
+ SkinParameter getSkinParameter()
# TextBlock getDrawing(SymbolContext)
}
abstract class net.sourceforge.plantuml.graphic.UGraphicDelegator {
- UGraphic ug
+ String toString()
+ boolean matchesProperty(String)
+ StringBounder getStringBounder()
+ UParam getParam()
+ void draw(UShape)
+ ColorMapper getColorMapper()
+ void startUrl(Url)
+ void closeUrl()
+ void startGroup(UGroupType,String)
+ void closeGroup()
# UGraphic getUg()
+ void flushUg()
+ HColor getDefaultBackground()
}
abstract class net.sourceforge.plantuml.graphic.AbstractTextBlock {
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
+ MinMax getMinMax(StringBounder)
}
class net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader {
- ComponentType type
- Display stringsToDisplay
- FileFormat fileFormat
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorCreateGroup {
- Rose rose
+ Ftile createGroup(Ftile,Display,HColor,HColor,PositionedNote,HColor,USymbol,double)
}
class net.sourceforge.plantuml.creole.atom.AtomVerticalTexts {
- List<Atom> all
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.utils.CharHidder {
+ {static} String addTileAtBegin(String)
+ {static} String hide(String)
- {static} boolean isToBeHidden(char)
- {static} char hideChar(char)
- {static} char unhideChar(char)
+ {static} String unhide(String)
}
class net.sourceforge.plantuml.EmptyImageBuilder {
- BufferedImage im
- Graphics2D g2d
- Color background
- int getType(Color)
- void printWatermark(String,int,int)
- int getWidth(String,Font,FontMetrics)
- List<String> withBreaks(String,Font,FontMetrics,int)
+ BufferedImage getBufferedImage()
+ Graphics2D getGraphics2D()
+ UGraphicG2d getUGraphicG2d()
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d {
- Color color
- Color colorLine
- ConvolveOp getConvolveOp(int,double)
# void drawShadow(Graphics2D,Shape,double,double)
# void drawOnlyLineShadow(Graphics2D,Shape,double,double)
# void drawOnlyLineShadowSpecial(Graphics2D,Shape,double,double)
}
class net.sourceforge.plantuml.creole.atom.AtomOpenIcon {
- OpenIcon openIcon
- double factor
- Url url
- HColor color
- TextBlock asTextBlock()
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandNote {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.project.Value {
}
class net.sourceforge.plantuml.eps.PostScriptCommandCurveTo {
- double x1
- double y1
- double x2
- double y2
- double x3
- double y3
+ String toPostString()
}
class net.sourceforge.plantuml.utils.Cypher {
- {static} Pattern p
- SecureRandom rnd
- Map<String,String> convert
- Set<String> except
- List<String> words
+ String cypher(String)
- String changeWord(String)
- String buildRandomWord(int)
+ void addException(String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude {
# Ftile tile1
# Ftile tile2
- Swimlane in
+ Collection<Ftile> getMyChildren()
+ boolean hasTwoBranches(StringBounder)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
# UTranslate getTranslate1(StringBounder)
# UTranslate getTranslate2(StringBounder)
+ UTranslate getTranslateFor(Ftile,StringBounder)
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
# FtileGeometry calculateDimensionInternalSlow(StringBounder)
# double widthInner(StringBounder)
}
class net.sourceforge.plantuml.graphic.FontFamilyChange {
- {static} Pattern2 colorPattern
- String family
+ FontConfiguration apply(FontConfiguration)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork {
- String label
- Swimlane in
- Swimlane out
# List<Ftile> getFoo2(List<Ftile>)
- Ftile computeNewFtile(Ftile,double,double,double)
- double getSuppForIncomingArrow(Ftile)
- double getXSuppForDisplay(Ftile,Display)
# Swimlane swimlaneOutForStep2()
# Ftile doStep1(Ftile)
- double getSuppSpace1(List<Ftile>,StringBounder)
- double getSuppSpace2(List<Ftile>,StringBounder)
- double getJustBeforeBar2(Ftile,StringBounder)
# Ftile doStep2(Ftile,Ftile)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork.ConnectionIn {
- double x
- Rainbow arrowColor
- Display label
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork.ConnectionOut {
- double x
- Rainbow arrowColor
- Display label
- double justBeforeBar2
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryRadioOn {
- DataSource dataSource
- ISkinSimple spriteContainer
+ Terminated<Element> create()
- List<String> extracted(String)
+ boolean ready()
}
class net.sourceforge.plantuml.activitydiagram3.InstructionGroup {
- InstructionList list
- Instruction parent
- HColor backColor
- HColor borderColor
- HColor titleColor
- LinkRendering linkRendering
- USymbol type
- Display test
- double roundCorner
- PositionedNote note
+ boolean containsBreak()
+ void add(Instruction)
+ Ftile createFtile(FtileFactory)
+ Instruction getParent()
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ boolean addNote(Display,NotePosition,NoteType,Colors,Swimlane)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Instruction getLast()
}
interface net.sourceforge.plantuml.dedication.Dedication {
+ {static} int SIZE
+ {static} BigInteger E
+ {static} BigInteger N
+ BufferedImage getImage(TinyHashableString)
}
class net.sourceforge.plantuml.EmbeddedDiagram {
- Display system
+ {static} String getEmbeddedType(CharSequence)
+ int length()
+ char charAt(int)
+ CharSequence subSequence(int,int)
+ Draw asDraw(ISkinSimple)
}
class net.sourceforge.plantuml.EmbeddedDiagram.Draw {
- BufferedImage image
- ISkinSimple skinParam
+ List<Atom> splitInTwo(StringBounder,double)
+ double getStartingAltitude(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- String getImageSvg()
- BufferedImage getImage()
- BufferedImage getImageSlow()
+ HorizontalAlignment getHorizontalAlignment()
- Diagram getSystem()
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseDatabase {
- TextBlock stickman
- boolean head
# void drawInternalU(UGraphic,Area)
- double getTextMiddlePostion(StringBounder)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.project.command.CommandColorTask {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(GanttDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.tim.EaterWhile {
- TokenStack expression
+ void analyze(TContext,TMemory)
+ TokenStack getWhileExpression()
}
class net.sourceforge.plantuml.cucadiagram.LinkType {
- LinkHat hat1
- LinkDecor decor1
- LinkStyle linkStyle
- LinkDecor decor2
- LinkHat hat2
- LinkMiddleDecor middleDecor
+ boolean isDoubleDecorated()
+ boolean looksLikeRevertedForSvg()
+ boolean looksLikeNoDecorAtAllSvg()
+ LinkType withoutDecors1()
+ LinkType withoutDecors2()
+ String toString()
+ int hashCode()
+ boolean equals(Object)
+ boolean isInvisible()
+ LinkType goDashed()
+ LinkType goDotted()
+ LinkType goThickness(double)
+ LinkType goBold()
+ LinkType getInversed()
+ LinkType withMiddleCircle()
+ LinkType withMiddleCircleCircled()
+ LinkType withMiddleCircleCircled1()
+ LinkType withMiddleCircleCircled2()
+ LinkType getInvisible()
+ String getSpecificDecorationSvek()
+ LinkDecor getDecor1()
+ LinkStyle getStyle()
+ LinkDecor getDecor2()
- boolean isExtendsOrAggregationOrCompositionOrPlus()
- boolean isOf(LinkDecor)
- boolean isExtends()
- boolean isPlus()
- boolean isAggregationOrComposition()
+ LinkType getPart1()
+ LinkType getPart2()
+ UStroke getStroke3(UStroke)
+ LinkMiddleDecor getMiddleDecor()
+ LinkHat getHat1()
+ LinkHat getHat2()
+ LinkType withLollipopInterfaceEye2()
+ LinkType withLollipopInterfaceEye1()
}
class net.sourceforge.plantuml.preproc2.PreprocessorUtils {
+ {static} String withEnvironmentVariable(String)
+ {static} String getenv(String)
- {static} InputStream getStdlibInputStream(String)
+ {static} ReadLine getReaderStdlibInclude(StringLocated,String)
+ {static} ReadLine getReaderIncludeUrl(SURL,StringLocated,String,String)
+ {static} ReadLine getReaderInclude(SURL,LineLocation,String)
}
class net.sourceforge.plantuml.svek.RoundedContainer {
- Dimension2D dim
- double titleHeight
- double attributeHeight
- HColor borderColor
- HColor backColor
- HColor imgBackcolor
- UStroke stroke
+ void drawU(UGraphic,boolean)
}
class net.sourceforge.plantuml.creole.command.CommandCreoleColorAndSizeChange {
- Pattern2 mypattern
- ThemeStyle themeStyle
+ {static} String fontPattern
- {static} Pattern2 pattern
- {static} Pattern2 patternEol
+ {static} Command create(ThemeStyle)
+ {static} Command createEol(ThemeStyle)
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.creole.Position {
- double x
- double y
- Dimension2D dim
+ String toString()
+ Position align(double)
+ double getMinY()
+ double getMaxY()
+ UGraphic translate(UGraphic)
+ Position translateY(double)
+ Position translateX(double)
+ MinMax update(MinMax)
+ void drawDebug(UGraphic)
+ double getHeight()
+ double getWidth()
+ UTranslate getTranslate()
}
class net.sourceforge.plantuml.font.PSystemListFonts {
+ DiagramDescription getDescription()
}
interface net.sourceforge.plantuml.bpm.BpmEvent {
}
class net.sourceforge.plantuml.eggs.PSystemWelcome {
- List<String> strings
- GraphicPosition position
# UDrawable getRootDrawable(FileFormatOption)
+ TextBlockBackcolored getGraphicStrings()
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseDivider {
- HColor borderColor
- HColor background
- boolean empty
- boolean withShadow
- UStroke stroke
- double roundCorner
# void drawInternalU(UGraphic,Area)
- void drawSep(UGraphic,double)
- void drawRectLong(UGraphic,double)
- void drawDoubleLine(UGraphic,double)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.nwdiag.NwDiagramFactory {
+ NwDiagram createEmptyDiagram(UmlSource,ISkinSimple)
# List<Command> createCommands()
}
class net.sourceforge.plantuml.swing.ImageHelper {
+ {static} BufferedImage getScaledInstance(BufferedImage,Dimension,RenderingHints,boolean)
+ {static} BufferedImage toBufferedImage(Image)
+ {static} Dimension getScaledDimension(Dimension,Dimension)
+ {static} Dimension getScaledDimensionWidthFit(Dimension,Dimension)
+ {static} Dimension getScaledDimension(Dimension,double)
}
class net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersions {
- {static} GraphvizVersions singleton
- Map<File,GraphvizVersion> map
+ {static} GraphvizVersions getInstance()
+ GraphvizVersion getVersion(File)
~ {static} GraphvizVersion checkVersionSlow(String)
}
class net.sourceforge.plantuml.project.lang.SentenceDisplayOnSameRowAs {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseGroupingHeader {
- int cornersize
- int commentMargin
- TextBlock commentTextBlock
- HColor background
- SymbolContext symbolContext
- SymbolContext symbolContextCorner
- double roundCorner
- double getSuppHeightForComment(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
# void drawBackgroundInternalU(UGraphic,Area)
# void drawInternalU(UGraphic,Area)
- UPath getCorner(double,double)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileUtils {
+ {static} Ftile addConnection(Ftile,Connection)
+ {static} Ftile addConnection(Ftile,Collection<Connection>)
+ {static} Ftile withSwimlaneOut(Ftile,Swimlane)
+ {static} Ftile addBottom(Ftile,double)
+ {static} Ftile addVerticalMargin(Ftile,double,double)
+ {static} Ftile addHorizontalMargin(Ftile,double,double)
+ {static} Ftile addHorizontalMargin(Ftile,double)
}
class net.sourceforge.plantuml.project.lang.SentencePausesDayOfWeek {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.flowdiagram.ActivityBox {
- {static} int CORNER
- {static} int MARGIN
- Tile tile
- String id
- String label
- TextBlock tb
+ Tile getTile()
+ String getId()
+ String getLabel()
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.PlacementStrategyX1Y2Y3 {
+ Map<TextBlock,Point2D> getPositions(double,double)
- Iterator<Dimension2D> butFirst()
}
class net.sourceforge.plantuml.style.CommandStyleMultilinesCSS {
+ String getPatternEnd()
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeNow(TitledDiagram,BlocLines)
}
class net.sourceforge.plantuml.nwdiag.CommandGroup {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(NwDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.svek.image.EntityImageNote {
- HColor noteBackgroundColor
- HColor borderColor
- double shadowing
- int marginX1
- int marginX2
- int marginY
- boolean withShadow
- ISkinParam skinParam
- TextBlock textBlock
- SvekLine opaleLine
- SvekNode node
- SvekNode other
- {static} ISkinParam getISkinParam(ISkinParam,IEntity)
~ {static} ISkinParam getSkin(ISkinParam,IEntity)
- {static} HColor getColorStatic(ISkinParam,ColorParam,Stereotype)
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
- Dimension2D getSize(StringBounder,TextBlock)
# double getTextHeight(StringBounder)
# TextBlock getTextBlock()
# double getPureTextWidth(StringBounder)
+ double getTextWidth(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
+ StyleSignature getDefaultStyleDefinition()
+ void drawU(UGraphic)
- double getRoundCorner()
- {static} Point2D move(Point2D,double,double)
- void drawNormal(UGraphic)
- UGraphic applyStroke(UGraphic)
- Direction getOpaleStrategy(double,double,Point2D)
- {static} double getOrthoDistance(Line2D.Double,Point2D)
- {static} boolean isHorizontal(Line2D.Double)
- {static} boolean isVertical(Line2D.Double)
+ ShapeType getShapeType()
+ void setOpaleLine(SvekLine,SvekNode,SvekNode)
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
class net.sourceforge.plantuml.graphic.USymbolLabel {
- SkinParameter skinParameter
+ SkinParameter getSkinParameter()
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
interface net.sourceforge.plantuml.math.ScientificEquation {
+ Dimension2D getDimension()
+ UImageSvg getSvg(double,Color,Color)
+ MutableImage getImage(Color,Color)
+ String getSource()
}
class net.sourceforge.plantuml.project.time.Instant {
- long ms
+ {static} Instant create(long)
+ {static} Instant today()
+ long getMillis()
+ String toString()
+ int hashCode()
- Long toLong()
+ boolean equals(Object)
+ int compareTo(Instant)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileMarged {
- Ftile tile
- double margin1
- double margin2
+ Collection<Ftile> getMyChildren()
+ LinkRendering getInLinkRendering()
+ LinkRendering getOutLinkRendering()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
# FtileGeometry calculateDimensionFtile(StringBounder)
+ UTranslate getTranslateFor(Ftile,StringBounder)
- UTranslate getTranslate()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.nwdiag.NwArray {
- LinkedElement[][] data
+ int getNbLines()
+ int getNbCols()
+ LinkedElement get(int,int)
+ LinkedElement[] getLine(int)
+ void set(int,int,LinkedElement)
+ void swapCols(int,int)
+ Footprint getFootprint(NwGroup)
}
class net.sourceforge.plantuml.ugraphic.html5.DriverLineHtml5 {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,Html5Drawer)
}
class net.sourceforge.plantuml.creole.command.CommandCreoleOpenIcon {
- {static} Pattern2 pattern
- HColorSet colorSet
- ThemeStyle themeStyle
+ {static} Command create(ThemeStyle,HColorSet)
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.jcckit.PSystemJcckitFactory {
- StringBuilder data
- int width
- int height
+ PSystemJcckit initDiagram(UmlSource,String)
- void extractDimension(String)
~ String getDimension()
- PSystemJcckit createSystem(UmlSource)
+ PSystemJcckit executeLine(UmlSource,PSystemJcckit,String)
}
interface net.sourceforge.plantuml.graphic.TextBlock {
+ Dimension2D calculateDimension(StringBounder)
+ MinMax getMinMax(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
}
class net.sourceforge.plantuml.ScaleMaxWidth {
- double maxWidth
+ double getScaleInternal(double,double)
}
class net.sourceforge.plantuml.command.note.CommandFactoryNoteActivity {
- IRegex getRegexConcatMultiLine()
- IRegex getRegexConcatSingleLine()
+ Command<ActivityDiagram> createMultiLine(boolean)
+ Command<ActivityDiagram> createSingleLine()
- CommandExecutionResult executeInternal(ActivityDiagram,RegexResult,IEntity)
}
class net.sourceforge.plantuml.zopfli.Options {
+ int numIterations
+ BlockSplitting blockSplitting
+ OutputFormat outputType
}
class net.sourceforge.plantuml.SourceStringReader {
- List<BlockUml> blocks
+ String generateImage(OutputStream)
+ DiagramDescription outputImage(OutputStream)
+ String generateImage(SFile)
+ DiagramDescription outputImage(SFile)
+ String generateImage(OutputStream,FileFormatOption)
+ DiagramDescription outputImage(OutputStream,FileFormatOption)
+ String generateImage(OutputStream,int)
+ DiagramDescription outputImage(OutputStream,int)
+ String generateImage(OutputStream,int,FileFormatOption)
+ DiagramDescription outputImage(OutputStream,int,FileFormatOption)
+ DiagramDescription generateDiagramDescription(int,FileFormatOption)
+ DiagramDescription generateDiagramDescription()
+ DiagramDescription generateDiagramDescription(FileFormatOption)
+ DiagramDescription generateDiagramDescription(int)
+ String getCMapData(int,FileFormatOption)
+ ImageData noStartumlFound(OutputStream,FileFormatOption)
+ List<BlockUml> getBlocks()
}
class net.sourceforge.plantuml.SignatureUtils {
+ {static} byte[] salting(String,byte[])
+ {static} String getSignature(String)
+ {static} String toString(byte[])
+ {static} String toHexString(byte[])
+ {static} String getMD5Hex(String)
+ {static} String getSHA512Hex(String)
+ {static} byte[] getMD5raw(String)
+ {static} byte[] getSHA512raw(String)
+ {static} byte[] getSHA512raw(byte[])
+ {static} String getSignatureSha512(SFile)
+ {static} String getSignatureSha512(InputStream)
+ {static} String getSignatureWithoutImgSrc(String)
+ {static} String purge(String)
+ {static} String getSignature(SFile)
}
class net.sourceforge.plantuml.board.CardBox {
- Display label
- ISkinParam skinParam
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.sequencediagram.Divider {
- Display text
- Style style
+ StyleSignature getDefaultStyleDefinition()
+ Style[] getUsedStyles()
+ Display getText()
+ boolean dealWith(Participant)
}
class net.sourceforge.plantuml.project.command.CommandGanttArrow {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(GanttDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.asciiart.ComponentTextArrow {
- ComponentType type
- Display stringsToDisplay
- FileFormat fileFormat
- ArrowConfiguration config
- int maxAsciiMessageLength
+ {static} Display cleanAndManageBoldNumber(Display,FileFormat)
- {static} String removeTagAndManageBoldNumber(String,FileFormat)
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ Point2D getStartPoint(StringBounder,Dimension2D)
+ Point2D getEndPoint(StringBounder,Dimension2D)
+ double getPaddingY()
+ double getYPoint(StringBounder)
+ double getPosArrow(StringBounder)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandAutonumber {
- {static} RegexConcat getConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.cucadiagram.Stereotype {
- {static} RegexComposed circleChar
- {static} RegexComposed circleSprite
- double radius
- UFont circledFont
- boolean automaticPackageStyle
- String label
- HColor htmlColor
- char character
- String spriteName
- double spriteScale
+ HColor getHtmlColor()
+ char getCharacter()
+ TextBlock getSprite(SpriteContainer)
+ boolean isWithOOSymbol()
+ List<String> getMultipleLabels()
+ boolean isSpotted()
+ String toString()
+ char charAt(int)
+ int length()
+ CharSequence subSequence(int,int)
+ double getRadius()
+ UFont getCircledFont()
+ String getLabel(Guillemet)
+ List<String> getLabels(Guillemet)
+ List<Style> getStyles(StyleBuilder)
+ List<String> getStyleNames()
- {static} List<String> cutLabels(String,Guillemet)
+ PackageStyle getPackageStyle()
+ boolean isBiddableOrUncertain()
+ boolean isCausal()
+ boolean isLexicalOrGiven()
+ boolean isDesignedOrSolved()
+ boolean isMachineOrSpecification()
}
interface net.sourceforge.plantuml.svek.extremity.MiddleFactory {
+ UDrawable createUDrawable(double)
}
class net.sourceforge.plantuml.tim.stdlib.Feature {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.activitydiagram.command.CommandEndif {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseBoundary {
- TextBlock stickman
- boolean head
# void drawInternalU(UGraphic,Area)
- double getTextMiddlePostion(StringBounder)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.tim.stdlib.FileExists {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
- boolean fileExists(String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileHeightFixedCentered {
- Ftile tile
- double fixedHeight
+ Collection<Ftile> getMyChildren()
+ LinkRendering getInLinkRendering()
+ LinkRendering getOutLinkRendering()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
# FtileGeometry calculateDimensionFtile(StringBounder)
- UTranslate getTranslate(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.png.PngTitler {
- HColor textColor
- HColor hyperlinkColor
- DisplaySection text
- int fontSize
- String fontFamily
- boolean useUnderlineForHyperlink
- Style style
- HColorSet set
- ISkinSimple spriteContainer
+ Dimension2D getTextDimension(StringBounder)
+ TextBlock getRibbonBlock()
}
class net.sourceforge.plantuml.graphic.USymbolFolder {
- {static} int marginTitleX1
- {static} int marginTitleX2
- {static} int marginTitleX3
- {static} int marginTitleY0
- {static} int marginTitleY1
- {static} int marginTitleY2
- SkinParameter skinParameter
- boolean showTitle
+ String toString()
+ SkinParameter getSkinParameter()
- void drawFolder(UGraphic,double,double,Dimension2D,boolean,double)
- double getHTitle(Dimension2D)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
interface net.sourceforge.plantuml.creole.rosetta.ReaderWiki {
+ {static} String REGEX_HTTP
+ List<String> transform(List<String>)
}
class net.sourceforge.plantuml.core.UmlSource {
- List<StringLocated> source
- List<StringLocated> rawSource
+ UmlSource removeInitialSkinparam()
+ boolean containsIgnoreCase(String)
- {static} boolean hasInitialSkinparam(List<StringLocated>)
+ DiagramType getDiagramType()
+ IteratorCounter2 iterator2()
+ String getPlainString()
+ String getRawString()
+ long seed()
+ String getLine(LineLocation)
+ int getTotalLineCount()
+ boolean getTotalLineCountLessThan5()
+ boolean isEmpty()
+ Display getTitle()
+ boolean isStartDef()
+ String getId()
}
class net.sourceforge.plantuml.SourceFileReaderCopyCat {
# SuggestedFile getSuggestedFile(BlockUml)
}
class net.sourceforge.plantuml.creole.SheetBlock2 {
- SheetBlock1 block
- UStroke defaultStroke
- Stencil stencil
+ List<Atom> splitInTwo(StringBounder,double)
+ SheetBlock2 enlargeMe(double,double)
+ String toString()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ double getStartingAltitude(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
}
class net.sourceforge.plantuml.tim.ExecutionContextWhile {
- TokenStack whileExpression
- CodePosition codePosition
- boolean skipMe
+ String toString()
+ {static} ExecutionContextWhile fromValue(TokenStack,CodePosition)
+ TValue conditionValue(LineLocation,TContext,TMemory)
+ void skipMe()
+ boolean isSkipMe()
+ CodePosition getStartWhile()
}
class net.sourceforge.plantuml.api.ImageDataComplex {
- CMapData cmap
- String warningOrError
+ boolean containsCMapData()
+ String getCMapData(String)
+ String getWarningOrError()
}
abstract class net.sourceforge.plantuml.PlainStringsDiagram {
# BufferedImage image
# GraphicPosition imagePosition
# List<String> strings
+ UDrawable getRootDrawable(FileFormatOption)
}
class net.sourceforge.plantuml.tim.stdlib.IsLight {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.ugraphic.UGraphicNull {
# AbstractCommonUGraphic copyUGraphic()
+ StringBounder getStringBounder()
+ void writeImageTOBEMOVED(OutputStream,String,int)
+ void ensureVisible(double,double)
}
class net.sourceforge.plantuml.Option {
- List<String> excludes
- List<String> config
- Map<String,String> defines
- String charset
- boolean computeurl
- boolean decodeurl
- boolean pipe
- String pipeDelimitor
- boolean pipeMap
- boolean pipeNoStdErr
- boolean syntax
- boolean checkOnly
- OptionPreprocOutputMode preprocessorOutput
- boolean failfast
- boolean failfast2
- boolean duration
- boolean debugsvek
- boolean splash
- boolean textProgressBar
- int nbThreads
- int ftpPort
- String picowebBindAddress
- int picowebPort
- boolean hideMetadata
- boolean checkMetadata
- int stdrpt
- int imageIndex
- String fileDir
- File outputDir
- File outputFile
- String filename
- List<String> result
- FileFormatOption fileFormatOption
+ void setFileFormat(FileFormat)
+ void setFileFormatOption(FileFormatOption)
+ Stdrpt getStdrpt()
+ int getFtpPort()
+ String getPicowebBindAddress()
+ int getPicowebPort()
- void addInConfig(BufferedReader)
+ void initConfig(String)
- void initInclude(String)
- void manageDefine(String)
- void manageSkinParam(String)
- void skinParam(String,String)
+ File getOutputDir()
+ {static} String getPattern()
+ void setOutputDir(File)
+ List<String> getExcludes()
+ Defines getDefaultDefines(SFile)
+ Defines getDefaultDefines(java.io.File)
+ Defines getDefaultDefines()
+ void define(String,String)
+ List<String> getConfig()
+ List<String> getResult()
+ String getCharset()
+ void setCharset(String)
+ boolean isComputeurl()
+ boolean isDecodeurl()
+ boolean isPipe()
+ boolean isPipeMap()
+ boolean isSyntax()
+ FileFormatOption getFileFormatOption()
+ boolean isDuration()
+ int getNbThreads()
+ void setNbThreads(int)
+ {static} int defaultNbThreads()
+ boolean isCheckOnly()
+ void setCheckOnly(boolean)
+ boolean isFailfastOrFailfast2()
+ boolean isFailfast2()
+ void setFailfast(boolean)
+ void setFailfast2(boolean)
+ File getOutputFile()
+ void setDebugSvek(boolean)
~ boolean isDebugSvek()
+ boolean isSplash()
+ void setSplash(boolean)
+ boolean isTextProgressBar()
+ String getPipeDelimitor()
+ boolean isPipeNoStdErr()
+ int getImageIndex()
+ void setFilename(String)
+ boolean isCheckMetadata()
+ OptionPreprocOutputMode getPreprocessorOutputMode()
+ String getFileDir()
}
interface net.sourceforge.plantuml.asciiart.UmlCharArea {
~ void drawBoxSimple(int,int,int,int)
~ void drawBoxSimpleUnicode(int,int,int,int)
~ void drawNoteSimple(int,int,int,int)
~ void drawNoteSimpleUnicode(int,int,int,int)
~ void drawShape(AsciiShape,int,int)
~ void drawStringsLRSimple(Collection<? extends CharSequence>,int,int)
~ void drawStringsLRUnicode(Collection<? extends CharSequence>,int,int)
}
class net.sourceforge.plantuml.json.JsonWriter {
- {static} int CONTROL_CHARACTERS_END
- {static} char[] QUOT_CHARS
- {static} char[] BS_CHARS
- {static} char[] LF_CHARS
- {static} char[] CR_CHARS
- {static} char[] TAB_CHARS
- {static} char[] UNICODE_2028_CHARS
- {static} char[] UNICODE_2029_CHARS
- {static} char[] HEX_DIGITS
# Writer writer
# void writeLiteral(String)
# void writeNumber(String)
# void writeString(String)
# void writeArrayOpen()
# void writeArrayClose()
# void writeArraySeparator()
# void writeObjectOpen()
# void writeObjectClose()
# void writeMemberName(String)
# void writeMemberSeparator()
# void writeObjectSeparator()
# void writeJsonString(String)
- {static} char[] getReplacementChars(char)
}
class net.sourceforge.plantuml.UrlBuilder {
- {static} String S_QUOTED
- {static} String S_ONLY_TOOLTIP
- {static} String S_ONLY_TOOLTIP_AND_LABEL
- {static} String S_LINK_TOOLTIP_NOLABEL
- {static} String S_LINK_WITH_OPTIONAL_TOOLTIP_WITH_OPTIONAL_LABEL
- {static} Pattern2 QUOTED
- {static} Pattern2 ONLY_TOOLTIP
- {static} Pattern2 ONLY_TOOLTIP_AND_LABEL
- {static} Pattern2 LINK_TOOLTIP_NOLABEL
- {static} Pattern2 LINK_WITH_OPTIONAL_TOOLTIP_WITH_OPTIONAL_LABEL
- String topurl
- ModeUrl mode
+ {static} String getRegexp()
+ Url getUrl(String)
- boolean matchesOrFind(Matcher2)
- String withTopUrl(String)
}
class net.sourceforge.plantuml.donors.PSystemDonorsFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.xmi.XmiClassDiagramStandard {
}
class net.sourceforge.plantuml.argon2.algorithm.FillSegment {
~ {static} void fillSegment(Instance,Position)
- {static} boolean isDataIndependentAddressing(Instance,Position)
- {static} void initAddressBlocks(Instance,Position,Block,Block,Block)
- {static} boolean isWithXor(Instance,Position)
- {static} int getPrevOffset(Instance,int)
- {static} int rotatePrevOffset(Instance,int,int)
- {static} int getStartingIndex(Position)
- {static} void nextAddresses(Block,Block,Block)
- {static} long getPseudoRandom(Instance,Position,Block,Block,Block,int,boolean)
- {static} int getRefLane(Instance,Position,long)
- {static} int getRefColumn(Instance,Position,long,boolean)
}
class net.sourceforge.plantuml.salt.element.ElementTabBar {
- Collection<Element> tabs
- UFont font
- ISkinSimple spriteContainer
- double margin1
- double margin2
- double margin3
- boolean vertical
+ void addTab(String)
+ Dimension2D getPreferredDimension(StringBounder,double,double)
- Dimension2D getPreferredDimensionHorizontal(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
- void drawUHorizontal(UGraphic,double,double,int,Dimension2D)
- Dimension2D getPreferredDimensionVertical(StringBounder,double,double)
- void drawUVertical(UGraphic,double,double,int,Dimension2D)
+ boolean isVertical()
+ void setVertical(boolean)
}
class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile {
- LivingSpace livingSpace1
- LivingSpace livingSpace2
- LivingSpaces livingSpaces
- Message message
- Rose skin
- ISkinParam skinParam
+ {static} double LIVE_DELTA_SIZE
+ Event getEvent()
+ String toString()
+ boolean isReverse(StringBounder)
- boolean isCreate()
- double getArrowThickness()
- ArrowComponent getComponent(StringBounder)
- ArrowComponent getComponentMulticast(StringBounder,boolean)
+ double getContactPointRelative()
# void callbackY_internal(double)
+ void drawU(UGraphic)
- void drawMulticast(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
- Real getPoint1(StringBounder)
- Real getPoint2(StringBounder)
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.tim.stdlib.ReverseColor {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorSub {
- Map<String,Sub> subs
- CodeIterator readingInProgress
- TMemory memory
- TContext context
+ Map<String,Sub> getSubs()
+ StringLocated peek()
+ void next()
}
abstract class net.sourceforge.plantuml.style.ValueAbstract {
+ String asString()
+ HColor asColor(ThemeStyle,HColorSet)
+ int asInt()
+ double asDouble()
+ boolean asBoolean()
+ int asFontStyle()
+ HorizontalAlignment asHorizontalAlignment()
+ int getPriority()
}
class net.sourceforge.plantuml.sprite.SpriteSvg {
- String svg
+ TextBlock asTextBlock(HColor,double)
}
class net.sourceforge.plantuml.argon2.Argon2 {
- byte[] output
- int outputLength
- double duration
- byte[] password
- byte[] salt
- byte[] secret
- byte[] additional
- int iterations
- int memory
- int lanes
- int version
- Argon2Type type
- boolean clearMemory
- Charset charset
- boolean encodedOnly
- boolean rawOnly
- {static} byte[] toByteArray(char[],Charset)
+ void hashNow()
+ void clear()
~ void printSummary()
+ Argon2 setMemoryInKiB(int)
+ Argon2 setParallelism(int)
+ Argon2 setPassword(char[])
+ Argon2 setSalt(String)
+ byte[] getOutput()
+ void setOutput(byte[])
+ String getOutputString()
+ int getOutputLength()
+ Argon2 setOutputLength(int)
+ byte[] getPassword()
+ Argon2 setPassword(byte[])
+ int getPasswordLength()
+ byte[] getSalt()
+ Argon2 setSalt(byte[])
+ int getSaltLength()
+ byte[] getSecret()
+ Argon2 setSecret(byte[])
+ int getSecretLength()
+ byte[] getAdditional()
+ Argon2 setAdditional(byte[])
+ int getAdditionalLength()
+ int getIterations()
+ Argon2 setIterations(int)
+ int getMemory()
+ Argon2 setMemory(int)
+ int getLanes()
+ int getVersion()
+ Argon2 setVersion(int)
+ Argon2Type getType()
+ Argon2 setType(Argon2Type)
+ boolean isClearMemory()
+ void setClearMemory(boolean)
+ Charset getCharset()
+ void setEncodedOnly(boolean)
+ void setRawOnly(boolean)
+ String getEncoded()
}
class net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant {
- Arrow arrow
- ParticipantBox participantBox
- double paddingParticipant
+ void setMaxX(double)
+ double getArrowOnlyWidth(StringBounder)
+ double getArrowYEndLevel(StringBounder)
+ double getArrowYStartLevel(StringBounder)
+ int getDirection(StringBounder)
+ LivingParticipantBox getParticipantAt(StringBounder,NotePosition)
# void drawInternalU(UGraphic,double,Context2D)
- double getDiff(UGraphic)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getActualWidth(StringBounder)
+ double getStartingX(StringBounder)
+ double getMaxX(StringBounder)
+ double getMinX(StringBounder)
+ String toString(StringBounder)
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorIf {
- TContext context
- TMemory memory
- List<StringLocated> logs
+ StringLocated peek()
- void executeIf(TContext,TMemory,StringLocated)
- void executeElseIf(TContext,TMemory,StringLocated)
- void executeIfdef(TContext,TMemory,StringLocated)
- void executeIfndef(TContext,TMemory,StringLocated)
- void executeElse(TContext,TMemory,StringLocated)
- void executeEndif(TContext,TMemory,StringLocated)
}
class net.sourceforge.plantuml.flashcode.FlashCodeUtilsZxing {
- {static} boolean USE_FLASH
+ BufferedImage exportFlashcode(String,Color,Color)
}
class net.sourceforge.plantuml.cucadiagram.dot.Neighborhood {
- ILeaf leaf
- List<Link> sametailLinks
- List<Link> allButSametails
- {static} double epsilon
+ void drawU(UGraphic,double,double,Bibliotekon,Dimension2D)
- Point2D drawExtends(UGraphic,Point2D,double)
~ {static} Point2D intersection(Rectangle2D,Point2D,Point2D)
- {static} Point2D intersection(Point2D,Point2D,Point2D,Point2D)
- {static} Point2D intersection(double,double,double,double,double,double,double,double)
- void drawLine(UGraphic,Point2D,Point2D)
- void drawLine(UGraphic,double,double,double,double)
}
class net.sourceforge.plantuml.bpm.BpmElement {
- String id
- BpmElementType type
- Display display
- Dimension2D dimension
+ String toString()
+ BpmElementType getType()
+ Display getDisplay()
+ TextBlock toTextBlock(ISkinParam)
- void drawLine(UGraphic,Where,Dimension2D)
+ TextBlock toTextBlockInternal(ISkinParam)
+ Dimension2D getDimension(StringBounder,ISkinParam)
+ String getId()
}
class net.sourceforge.plantuml.StdrptPipe0 {
+ void printInfo(PrintStream,Diagram)
+ void finalMessage(ErrorStatus)
+ void errorLine(int,File)
}
class net.sourceforge.plantuml.elk.proxy.core.math.ElkPadding {
+ Object obj
+ Object getTrueObject()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityCircleCross {
- double px
- double py
- Point2D dest
- double radius
- HColor backgroundColor
+ Point2D somePoint()
+ void drawU(UGraphic)
- Point2D getPointOnCircle(double)
- {static} void drawLine(UGraphic,double,double,Point2D,Point2D)
}
class net.sourceforge.plantuml.cucadiagram.MagmaList {
- List<Magma> all
+ void add(Magma)
+ MagmaList getMagmas(IGroup)
+ int size()
+ void putInSquare()
}
class net.sourceforge.plantuml.GeneratedImageImpl {
- SFile pngFile
- String description
- BlockUml blockUml
- int status
+ int getStatus()
+ File getPngFile()
+ String getDescription()
+ int lineErrorRaw()
+ String toString()
+ int compareTo(GeneratedImage)
+ int hashCode()
+ boolean equals(Object)
+ BlockUml getBlockUml()
}
class net.sourceforge.plantuml.ugraphic.UClip {
- double x
- double y
- double width
- double height
+ UClip enlarge(double)
+ String toString()
+ UClip translate(double,double)
+ UClip translate(UTranslate)
+ double getX()
+ double getY()
+ double getWidth()
+ double getHeight()
+ boolean isInside(Point2D)
+ boolean isInside(double,double)
+ Rectangle2D.Double getClippedRectangle(Rectangle2D.Double)
+ Line2D.Double getClippedLine(Line2D.Double)
- double getClippedX(double)
- double getClippedY(double)
+ boolean isInside(double,double,UPath)
}
class net.sourceforge.plantuml.project.PlanUtils {
+ {static} LoadPlanable minOf(LoadPlanable,LoadPlanable)
+ {static} LoadPlanable multiply(LoadPlanable,LoadPlanable)
}
class net.sourceforge.plantuml.descdiagram.BoxedCharacter {
- String c
- UFont font
- HColor innerCircle
- HColor circle
- HColor fontColor
- double radius
+ void drawU(UGraphic)
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.project.lang.SubjectDayOfWeek {
+ IRegex toRegex()
+ Failable<? extends Object> getMe(GanttDiagram,RegexResult)
+ Collection<? extends SentenceSimple> getSentences()
}
class net.sourceforge.plantuml.project.lang.SubjectDayOfWeek.AreClose {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectDayOfWeek.InColor {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.ugraphic.UComment {
- String comment
+ String getComment()
}
class net.sourceforge.plantuml.salt.Positionner2 {
- int row
- int col
- int maxRow
- int maxCol
- Map<Element,Cell> positions
- Cell last
+ void add(Terminated<Element>)
- void moveNextColumn()
- void moveNextRow()
- void addWithoutMove(Element)
+ void mergeLeft(Terminator)
- void updateMax()
+ Map<Element,Cell> getAll()
+ int getNbRows()
+ int getNbCols()
}
class net.sourceforge.plantuml.project.draw.PathUtils {
+ {static} UPath UtoRight(double,double,double)
+ {static} UPath UtoLeft(double,double,double)
}
class net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxesDrawer {
- double y1
- SymbolContext symbolContext
- Component cross
- Context2D context
- Rose skin
- ISkinParam skinParam
- Component compForWidth
- Collection<Segment> delays
+ double getWidth(StringBounder)
+ void addStart(double,SymbolContext)
+ void doDrawing(UGraphic,double)
+ void drawDestroyIfNeeded(UGraphic,Step)
- void drawInternal(UGraphic,double,double,ComponentType)
}
class net.sourceforge.plantuml.cucadiagram.EntityPort {
- String entityUid
- String portId
+ String getFullString()
- boolean isShielded()
+ String getPrefix()
+ boolean startsWith(String)
+ boolean equalsId(EntityPort)
}
class net.sourceforge.plantuml.command.CommandSkinParamMultilines {
# boolean isLineConsistent(String,int)
- boolean hasStartingQuote(CharSequence)
+ CommandExecutionResult execute(TitledDiagram,BlocLines)
}
interface net.sourceforge.plantuml.flashcode.FlashCodeUtils {
+ BufferedImage exportFlashcode(String,Color,Color)
}
class net.sourceforge.plantuml.descdiagram.command.StringWithArrow {
- String label
- LinkArrow linkArrow
+ String getLabel()
+ LinkArrow getLinkArrow()
+ Display getDisplay()
+ {static} TextBlock addMagicArrow(TextBlock,GuideLine,FontConfiguration)
- {static} TextBlock addMagicArrow2(TextBlock,GuideLine,FontConfiguration)
+ {static} TextBlock addSeveralMagicArrows(Display,GuideLine,FontConfiguration,HorizontalAlignment,ISkinParam)
}
interface net.sourceforge.plantuml.creole.command.Command {
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.activitydiagram.command.CommandEndPartition {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandElse3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.bpm.CleanerInterleavingLines {
+ boolean clean(Grid)
- void mergeLines(Grid,Line,Line)
- boolean mergeable(Grid,Line,Line)
- Placeable merge(Placeable,Placeable)
- boolean mergeable(Placeable,Placeable)
- boolean mergeablePuzzleSingle(ConnectorPuzzleEmpty,BpmElement)
- boolean mergeablePuzzleSingle(BpmElement,ConnectorPuzzleEmpty)
- boolean mergeableCC(ConnectorPuzzleEmpty,ConnectorPuzzleEmpty)
}
interface net.sourceforge.plantuml.ugraphic.MutableImage {
+ BufferedImage getImage()
+ MutableImage withScale(double)
+ MutableImage muteColor(Color)
+ MutableImage muteTransparentColor(Color)
}
class net.sourceforge.plantuml.zopfli.LongestMatchCache {
- {static} int CACHE_LENGTH
+ char[] length
+ char[] dist
- char[] subLenPos
- byte[] subLenLen
~ void init(int)
~ void subLenToCache(char[],int,int)
~ void cacheToSubLen(int,int,char[])
~ int maxCachedSubLen(int)
}
class net.sourceforge.plantuml.asciiart.ComponentTextDestroy {
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.mindmap.MindMapDiagramFactory {
# List<Command> createCommands()
+ MindMapDiagram createEmptyDiagram(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.creole.command.CommandCreoleFontFamilyChange {
- {static} Pattern2 pattern
- {static} Pattern2 patternEol
- Pattern2 mypattern
+ {static} Command create()
+ {static} Command createEol()
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.ugraphic.svg.DriverNoneSvg {
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
class net.sourceforge.plantuml.command.BlocLines {
- List<StringLocated> lines
+ String toString()
+ {static} BlocLines load(SFile,LineLocation)
+ {static} BlocLines load(InputStream,LineLocation)
+ {static} BlocLines from(List<StringLocated>)
- {static} BlocLines loadInternal(BufferedReader,LineLocation)
+ Display toDisplay()
+ {static} BlocLines single(StringLocated)
+ {static} BlocLines singleString(String)
+ {static} BlocLines fromArray(String[])
+ {static} BlocLines getWithNewlines(String)
+ BlocLines add(StringLocated)
+ BlocLines addString(String)
+ List<String> getLinesAsStringForSprite()
+ int size()
+ StringLocated getAt(int)
+ StringLocated getFirst()
+ StringLocated getLast()
+ BlocLines cleanList(MultilinesStrategy)
+ BlocLines trim()
+ BlocLines removeEmptyLines()
+ BlocLines removeEmptyColumns()
- {static} boolean firstColumnRemovable(List<StringLocated>)
+ char getLastChar()
+ BlocLines removeStartingAndEnding(String,int)
+ BlocLines overrideLastLine(String)
+ BlocLines toSingleLineWithHiddenNewLine()
+ BlocLines trimSmart(int)
- {static} int nbStartingSpace(CharSequence)
- {static} boolean isSpaceOrTab(char)
- {static} StringLocated removeStartingSpaces(StringLocated,int)
+ BlocLines subExtract(int,int)
+ BlocLines subList(int,int)
+ Iterator<StringLocated> iterator()
+ BlocLines eventuallyMoveBracket()
+ BlocLines eventuallyMoveAllEmptyBracket()
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseQueue {
- TextBlock stickman
- boolean head
# void drawInternalU(UGraphic,Area)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleCrowfoot {
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.tim.EaterIfdef {
- String expression
+ void analyze(TContext,TMemory)
+ boolean isTrue(TContext,TMemory)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionBreak {
- LinkRendering inlinkRendering
+ Ftile createFtile(FtileFactory)
+ void add(Instruction)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ boolean containsBreak()
}
abstract class net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow {
- int arrowDeltaX
- int arrowDeltaY
- HColor foregroundColor
- ArrowConfiguration arrowConfiguration
# TextBlock getTextBlock()
+ {abstract}double getYPoint(StringBounder)
# HColor getForegroundColor()
# int getArrowDeltaX()
# int getArrowDeltaY()
+ double getPaddingY()
+ ArrowConfiguration getArrowConfiguration()
}
class net.sourceforge.plantuml.sequencediagram.teoz.ElseTile {
- Rose skin
- ISkinParam skinParam
- GroupingLeaf anElse
- Tile parent
+ Event getEvent()
+ double getContactPointRelative()
+ Component getComponent(StringBounder)
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.command.CommandScaleMaxWidth {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractPSystem,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.project.timescale.TimeScaleDaily {
- TimeScaleWink basic
- double delta
+ double getStartingPosition(Day)
+ double getEndingPosition(Day)
+ double getWidth(Day)
+ boolean isBreaking(Day)
}
class net.sourceforge.plantuml.board.BNode {
- String name
- int stage
- int x
- BNode parent
- List<BNode> children
+ void addChild(BNode)
+ String getName()
+ int getStage()
+ BNode getParent()
+ String toString()
+ void computeX(AtomicInteger)
+ void initBarray(BArray)
+ int getX()
}
class net.sourceforge.plantuml.salt.element.ElementBorder {
- Element north
- Element south
- Element east
- Element west
- Element center
+ void setNorth(Element)
+ void setSouth(Element)
+ void setEast(Element)
+ void setWest(Element)
+ void setCenter(Element)
+ void drawU(UGraphic,int,Dimension2D)
+ Dimension2D getPreferredDimension(StringBounder,double,double)
}
interface net.sourceforge.plantuml.cucadiagram.dot.Graphviz {
+ ProcessState createFile3(OutputStream)
+ File getDotExe()
+ String dotVersion()
+ ExeState getExeState()
+ boolean graphviz244onWindows()
}
class net.sourceforge.plantuml.graphic.TextBlockUtils {
+ {static} TextBlock EMPTY_TEXT_BLOCK
+ {static} TextBlock bordered(TextBlock,UStroke,HColor,HColor,double)
+ {static} TextBlock bordered(TextBlock,UStroke,HColor,HColor,double,double,double)
+ {static} TextBlock bordered(TextBlock,UStroke,HColor,HColor,double,ClockwiseTopRightBottomLeft)
+ {static} TextBlock title(FontConfiguration,Display,ISkinParam)
+ {static} TextBlock withMargin(TextBlock,double,double)
+ {static} TextBlock withMargin(TextBlock,ClockwiseTopRightBottomLeft)
+ {static} TextBlock withMargin(TextBlock,double,double,double,double)
+ {static} TextBlock withMinWidth(TextBlock,double,HorizontalAlignment)
+ {static} TextBlock empty(double,double)
+ {static} Positionable asPositionable(TextBlock,StringBounder,Point2D)
+ {static} Positionable asPositionable(Dimension2D,StringBounder,Point2D)
+ {static} TextBlock mergeLR(TextBlock,TextBlock,VerticalAlignment)
+ {static} TextBlock mergeTB(TextBlock,TextBlock,HorizontalAlignment)
+ {static} TextBlock mergeTB(TextBlock,UImage,HorizontalAlignment)
+ {static} MinMax getMinMax(UDrawable,StringBounder,boolean)
+ {static} boolean isEmpty(TextBlock,StringBounder)
+ {static} FontRenderContext getFontRenderContext()
+ {static} TextBlock fullInnerPosition(TextBlock,String)
+ {static} TextBlockBackcolored addBackcolor(TextBlock,HColor)
+ {static} TextBlock fromUImage(UImage)
}
class net.sourceforge.plantuml.statediagram.StateDiagramFactory {
+ StateDiagram createEmptyDiagram(UmlSource,ISkinSimple)
# List<Command> createCommands()
}
class net.sourceforge.plantuml.activitydiagram3.InstructionPartition {
- InstructionList list
- Instruction parent
+ Instruction getParent()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Ftile createFtile(FtileFactory)
+ void add(Instruction)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ boolean addNote(Display,NotePosition,NoteType,Colors,Swimlane)
+ boolean containsBreak()
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryLine {
- DataSource dataSource
+ Terminated<Element> create()
+ boolean ready()
- boolean isLine(String,char)
}
class net.sourceforge.plantuml.real.RealMiddle {
- RealMoveable p1
- RealMoveable p2
- double delta
~ double getCurrentValueInternal()
+ Real addFixed(double)
+ Real addAtLeast(double)
+ void ensureBiggerThan(Real)
+ String getName()
+ void printCreationStackTrace()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis {
- Point2D dest
- double radius2
- double ortho
- double ang
+ Point2D somePoint()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.command.regex.Matcher2 {
- {static} boolean INSTRUMENT
- Matcher matcher
- String id
- {static} Map<String,Long> durations
- {static} long printed
+ {static} Matcher2 build(Pattern,CharSequence)
+ boolean matches()
- void addTime(long)
- {static} void addTime(String,long)
- {static} String getLongest()
+ String group(int)
+ String group()
+ int groupCount()
+ boolean find()
+ int end()
+ int start()
}
class net.sourceforge.plantuml.timingdiagram.PlayerRobustConcise {
- Set<ChangeState> changes
- List<TimeConstraint> constraints
- List<TimingNote> notes
- Map<String,String> statesLabel
- TimingStyle type
- String initialState
- PDrawing cached
- Colors initialColors
- PDrawing buildPDrawing()
+ TextBlock getPart1(double,double)
+ UDrawable getPart2()
- UTranslate getTranslateForTimeDrawing(StringBounder)
+ double getFullHeight(StringBounder)
- double getTitleHeight(StringBounder)
- PDrawing getTimeDrawing()
- PDrawing computeTimeDrawing()
- double getZoneHeight(StringBounder)
+ void setState(TimeTick,String,Colors,String)
- String decodeState(String)
+ IntricatedPoint getTimeProjection(StringBounder,TimeTick)
+ void createConstraint(TimeTick,TimeTick,String)
+ void addNote(TimeTick,Display,Position)
+ void defineState(String,String)
}
class net.sourceforge.plantuml.ugraphic.visio.DriverLineVdx {
+ void draw(UShape,double,double,ColorMapper,UParam,VisioGraphics)
}
class net.sourceforge.plantuml.activitydiagram.ActivityDiagramFactory {
+ ActivityDiagram createEmptyDiagram(UmlSource,ISkinSimple)
# List<Command> createCommands()
}
class net.sourceforge.plantuml.ugraphic.debug.UGraphicDebug {
- List<String> output
- double scaleFactor
- Dimension2D dim
- String svgLinkTarget
- String hoverPathColorRGB
- long seed
- String preserveAspectRatio
# AbstractCommonUGraphic copyUGraphic()
+ StringBounder getStringBounder()
+ void draw(UShape)
- void outCenteredCharacter(UCenteredCharacter)
- void outComment(UComment)
- void outPath(UPath)
- void outPolygon(UPolygon)
- void outText(UText)
- void outEmpty(UEmpty)
- void outEllipse(UEllipse)
- void outRectangle(URectangle)
- void outLine(ULine)
- String pointd(double,double)
- String colorToString(HColor)
+ void writeImageTOBEMOVED(OutputStream,String,int)
- void print(OutputStream,String)
}
class net.sourceforge.plantuml.openiconic.SvgCommandLetter {
- char letter
+ String toString()
+ String toSvg()
+ int argumentNumber()
+ boolean isUpperCase()
+ boolean is(char)
+ char getLetter()
}
class net.sourceforge.plantuml.anim.Animation {
- List<AffineTransformation> all
+ {static} Animation singleton(AffineTransformation)
+ {static} Animation create(List<String>)
+ Collection<AffineTransformation> getAll()
+ void setDimension(Dimension2D)
+ AffineTransformation getFirst()
+ MinMax getMinMax(Dimension2D)
}
class net.sourceforge.plantuml.posimo.Cluster {
- {static} int CPT
- Cluster parent
- Collection<Block> blocs
- Collection<Cluster> children
- int uid
- double x
- double y
- double width
- double height
- double titleWidth
- double titleHeight
+ Collection<Cluster> getSubClusters()
+ Collection<Block> getRecursiveContents()
- void addContentRecurse(Collection<Block>)
+ int getUid()
+ void addBloc(Block)
+ Cluster getParent()
+ Collection<Block> getContents()
+ Block getBlock(int)
+ Point2D getPosition()
+ Dimension2D getSize()
+ void setX(double)
+ void setY(double)
+ void setWidth(double)
+ void setHeight(double)
+ double getTitleWidth()
+ double getTitleHeight()
+ void moveSvek(double,double)
}
abstract class net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement {
- double startingY
~ void pushToDown(double)
# double getStartingY()
+ void drawU(UGraphic,double,Context2D)
# {abstract}void drawInternalU(UGraphic,double,Context2D)
+ {abstract}double getStartingX(StringBounder)
+ {abstract}double getPreferredWidth(StringBounder)
+ {abstract}double getPreferredHeight(StringBounder)
}
interface net.sourceforge.plantuml.bpm.ConnectorPuzzle {
+ void append(Where)
+ void remove(Where)
+ boolean have(Where)
}
class net.sourceforge.plantuml.definition.PSystemDefinitionFactory {
+ PSystemDefinition initDiagram(UmlSource,String)
+ PSystemDefinition executeLine(UmlSource,PSystemDefinition,String)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandBoxEnd {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.wire.CommandWLink {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(WireDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.wbs.Fork {
- TextBlock main
- List<ITF> right
- double delta1x
- double deltay
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.sdot.DebugUtils {
+ {static} void printDebugEdge(ST_Agedge_s)
+ {static} void printDebugBezier(ST_bezier)
+ {static} void printDebugNode(ST_Agnode_s)
+ {static} String pointftoString(ST_pointf)
}
class net.sourceforge.plantuml.ProgressBar {
- {static} boolean enable
- {static} String last
- {static} AtomicInteger total
- {static} AtomicInteger done
- {static} void print(String)
+ {static} void clear()
+ {static} void incTotal(int)
- {static} void printBar(int,int)
- {static} String getBar(int,int)
+ {static} void incDone(boolean)
+ {static} void setEnable(boolean)
}
class net.sourceforge.plantuml.sprite.ListSpriteDiagramFactory {
# List<Command> createCommands()
+ ListSpriteDiagram createEmptyDiagram(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.SkinParamUtils {
- {static} Rose rose
+ {static} UFont getFont(ISkinParam,FontParam,Stereotype)
+ {static} HColor getFontColor(ISkinParam,FontParam,Stereotype)
+ {static} HColor getColor(ISkinParam,Stereotype,ColorParam)
}
class net.sourceforge.plantuml.elk.proxy.core.RecursiveGraphLayoutEngine {
- Object obj
+ void layout(ElkNode,NullElkProgressMonitor)
}
class net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited {
- PathIterator path
- int limit
- int current
+ {static} int count(Shape)
+ int currentSegment(float[])
+ int currentSegment(double[])
+ int getWindingRule()
+ boolean isDone()
+ void next()
}
class net.sourceforge.plantuml.sprite.PSystemListInternalSprites {
# UDrawable getRootDrawable(FileFormatOption)
+ DiagramDescription getDescription()
}
interface net.sourceforge.plantuml.svek.Point2DFunction {
~ Point2D.Double apply(Point2D)
}
class net.sourceforge.plantuml.timingdiagram.PlayerClock {
- int period
- int pulse
- double ymargin
+ double getFullHeight(StringBounder)
+ void drawFrameTitle(UGraphic)
- SymbolContext getContext()
+ IntricatedPoint getTimeProjection(StringBounder,TimeTick)
+ void addNote(TimeTick,Display,Position)
+ void defineState(String,String)
+ void setState(TimeTick,String,Colors,String)
+ void createConstraint(TimeTick,TimeTick,String)
- double getPulseCoef()
+ int getPeriod()
+ TextBlock getPart1(double,double)
+ UDrawable getPart2()
}
interface net.sourceforge.plantuml.elk.proxy.ElkObjectProxy {
+ Object getTrueObject()
}
class net.sourceforge.plantuml.ugraphic.PlacementStrategyX1X2 {
+ Map<TextBlock,Point2D> getPositions(double,double)
}
class net.sourceforge.plantuml.creole.atom.AtomMath {
- ScientificEquationSafe math
- HColor foreground
- HColor background
- ColorMapper colorMapper
- Dimension2D dim
- Dimension2D calculateDimensionSlow(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
- Color getColor(HColor,Color)
}
class net.sourceforge.plantuml.mindmap.CommandMindMapPlus {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(MindMapDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.preproc2.PreprocessorModeSet {
+ ImportedFiles getImportedFiles()
+ String getCharset()
}
class net.sourceforge.plantuml.sequencediagram.teoz.HSpaceTile {
- HSpace hspace
- Real origin
+ Event getEvent()
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.golem.Path {
- List<TileArea> all
+ {static} Path build(TileArea,TileArea)
+ TileArea getStart()
+ TileArea getDest()
}
class net.sourceforge.plantuml.nwdiag.NwDiagram {
- boolean initDone
- Map<String,Square> squares
- List<Network> networks
- List<NwGroup> groups
- NwGroup currentGroup
- double margin
+ DiagramDescription getDescription()
+ void init()
- Network currentNetwork()
+ CommandExecutionResult openGroup(String)
+ CommandExecutionResult openNetwork(String)
- Network createNetwork(String)
+ CommandExecutionResult link(String,String)
- Square addSquare(Square,String,Map<String,String>)
+ CommandExecutionResult endSomething()
+ CommandExecutionResult addElement(String,String)
- CommandExecutionResult errorNoInit()
- Map<String,String> toSet(String)
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
- TextBlockBackcolored getTextBlock()
- TextBlock toTextBlock(String,String)
- FontConfiguration getFontConfiguration()
- Dimension2D getTotalDimension(StringBounder)
- void drawMe(UGraphic)
- Map<Network,String> getLinks(Square)
- GridTextBlockDecorated buildGrid()
+ CommandExecutionResult setProperty(String,String)
+ ClockwiseTopRightBottomLeft getDefaultMargins()
}
class net.sourceforge.plantuml.creole.legacy.CreoleParser {
- FontConfiguration fontConfiguration
- ISkinSimple skinParam
- HorizontalAlignment horizontalAlignment
- CreoleMode creoleMode
- FontConfiguration stereotype
- Stripe createStripe(String,CreoleContext,Stripe,FontConfiguration)
+ {static} boolean isTableLine(String)
+ {static} boolean doesStartByColor(String)
+ Sheet createSheet(Display)
+ {static} void checkColor(Display)
}
class net.sourceforge.plantuml.posimo.PathDrawerInterface {
- Rose rose
- ISkinParam param
- LinkType linkType
+ {static} PathDrawerInterface create(ISkinParam,LinkType)
+ void drawPathBefore(UGraphic,Positionable,Positionable,Path)
- void noDash(UGraphic)
- void goDash(UGraphic)
+ void drawPathAfter(UGraphic,Positionable,Positionable,Path)
- double atan2(Point2D,Point2D)
- Point2D drawSymbol(UGraphic,double,Point2D,LinkDecor)
- CubicCurve2D.Double getLine(Point2D,Point2D)
- {static} Point2D getFarest(Point2D,Point2D,Collection<Point2D>)
- Point2D drawSquare(UGraphic,double,double)
~ Point2D drawExtends(UGraphic,double,double,double)
- Point2D drawDiamond(UGraphic,double,double,double)
- Point2D drawArrow(UGraphic,double,double,double)
- Point2D nullIfContained(Point2D,Positionable,Positionable)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandFootboxOld {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.OptionFlags {
- {static} OptionFlags singleton
+ {static} boolean ALLOW_INCLUDE
+ {static} boolean USE_HECTOR
+ {static} boolean ADD_NICE_FOR_DOT
+ {static} boolean STRICT_SELFMESSAGE_POSITION
+ {static} boolean FORCE_TEOZ
+ {static} boolean USE_INTERFACE_EYE1
+ {static} boolean USE_INTERFACE_EYE2
- boolean verbose
- boolean extractFromMetadata
- boolean word
- boolean systemExit
- boolean gui
- boolean quiet
- boolean checkDotError
- boolean printFonts
- boolean encodesprite
- boolean dumpHtmlStats
- boolean dumpStats
- boolean loopStats
- boolean overwrite
- boolean enableStats
- boolean stdLib
- boolean silentlyCompletelyIgnoreErrors
- boolean extractStdLib
- boolean clipboardLoop
- boolean clipboard
- String fileSeparator
- long timeoutMs
- SFile logData
- AtomicBoolean logDataInitized
+ {static} void setAllowIncludeFalse()
+ {static} void setMaxPixel(int)
+ void reset()
+ void setDotExecutable(String)
- void reset(boolean)
+ boolean useJavaInsteadOfDot()
+ {static} OptionFlags getInstance()
+ boolean isVerbose()
+ void setVerbose(boolean)
+ boolean isExtractFromMetadata()
+ void setExtractFromMetadata(boolean)
+ boolean isWord()
+ void setWord(boolean)
+ boolean isSystemExit()
+ void setSystemExit(boolean)
+ boolean isGui()
+ void setGui(boolean)
+ boolean isQuiet()
+ void setQuiet(boolean)
+ boolean isCheckDotError()
+ void setCheckDotError(boolean)
+ void logData(SFile,Diagram)
+ void setLogData(SFile)
+ boolean isPrintFonts()
+ void setPrintFonts(boolean)
+ boolean isUseSuggestEngine2()
+ boolean isEncodesprite()
+ void setEncodesprite(boolean)
+ boolean isOverwrite()
+ void setOverwrite(boolean)
+ String getFileSeparator()
+ void setFileSeparator(String)
+ boolean isDumpHtmlStats()
+ void setDumpHtmlStats(boolean)
+ boolean isDumpStats()
+ void setDumpStats(boolean)
+ boolean isLoopStats()
+ void setLoopStats(boolean)
- {static} boolean defaultForStats()
- {static} boolean isTrue(String)
+ boolean isEnableStats()
+ void setEnableStats(boolean)
+ long getTimeoutMs()
+ void setTimeoutMs(long)
+ void setExtractStdLib(boolean)
+ boolean isExtractStdLib()
+ boolean isClipboardLoop()
+ void setClipboardLoop(boolean)
+ boolean isClipboard()
+ void setClipboard(boolean)
+ boolean isStdLib()
+ void setStdLib(boolean)
+ boolean isSilentlyCompletelyIgnoreErrors()
+ void setSilentlyCompletelyIgnoreErrors(boolean)
}
class net.sourceforge.plantuml.creole.command.CommandCreoleMonospaced {
- Pattern2 pattern
- String monospacedFamily
+ {static} Command create(String)
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.eps.EpsGraphicsMacro {
- PostScriptData data
- PostScriptCommandMacro rquadto
- double posX
- double posY
- int macroCpt
- Map<PostScriptCommandMacro,String> macros
- PostScriptCommandMacro macroInProgress
# void append(String,boolean)
# String getBodyString()
+ void newpath()
+ void closepath()
+ void fill(int)
+ void moveto(double,double)
+ void lineto(double,double)
+ void curveto(double,double,double,double,double,double)
+ void quadto(double,double,double,double)
- void openMacro()
- String macroName()
- void closeMacro()
# void epsHLine(double,double,double)
# void epsVLine(double,double,double)
}
class net.sourceforge.plantuml.help.CommandHelp {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(Help,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.brotli.DictionaryData {
- {static} String DATA0
- {static} String DATA1
- {static} String SKIP_FLIP
- {static} void unpackDictionaryData(ByteBuffer,String,String,String)
}
interface net.sourceforge.plantuml.preproc2.ReadFilter {
+ ReadLine applyFilter(ReadLine)
}
class net.sourceforge.plantuml.jsondiagram.JsonDiagramFactory {
+ Diagram createSystem(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.nwdiag.CommandNwDiagInit {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(NwDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.pdf.PdfConverter {
+ {static} void convert(File,File)
}
class net.sourceforge.plantuml.sequencediagram.graphic.Step1MessageExo {
- MessageExoArrow messageArrow
~ Frontier prepareMessage(ConstraintSet,InGroupablesStack)
- LivingParticipantBox getLivingParticipantBox()
- Arrow createArrow()
- ArrowConfiguration getArrowType(MessageExo)
}
class net.sourceforge.plantuml.eggs.SentenceProducer {
- String secret
+ String getSecret()
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverEllipseTikz {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
class net.sourceforge.plantuml.descdiagram.EntityImageDomain {
- TextBlock name
- TextBlock tag
- TextBlock stereo
- Url url
- UStroke getStroke()
- Dimension2D getTitleDimension(StringBounder)
- Dimension2D getNameAndSteretypeDimension(StringBounder)
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
+ void drawU(UGraphic)
- Dimension2D getTagDimension(StringBounder)
+ ShapeType getShapeType()
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.tim.stdlib.AlwaysFalse {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandBackward3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
+ {static} LinkRendering getBackRendering(ActivityDiagram3,RegexResult,String)
- {static} Rainbow getRainbow(String,ActivityDiagram3,RegexResult)
}
class net.sourceforge.plantuml.svek.image.EntityImageNoteLink {
- Component comp
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
+ HColor getBackcolor()
+ Margins getShield(StringBounder)
+ boolean isHidden()
+ double getOverscanX(StringBounder)
}
class net.sourceforge.plantuml.salt.CommandAnything {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(PSystemSalt,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.statediagram.command.CommandCreateState {
- {static} IRegex getRegexConcat()
- {static} ColorParser color()
# CommandExecutionResult executeArg(StateDiagram,LineLocation,RegexResult)
- LeafType getTypeFromStereotype(String)
}
class net.sourceforge.plantuml.bpm.CommandDockedEvent {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(BpmDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorWhile {
+ Ftile createWhile(LinkRendering,Swimlane,Ftile,Display,Display,HColor,Instruction,Ftile,LinkRendering,LinkRendering)
- LinkRendering ensureColor(LinkRendering,Rainbow)
}
class net.sourceforge.plantuml.ugraphic.eps.DriverPolygonEps {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,EpsGraphics)
}
class net.sourceforge.plantuml.descdiagram.command.CommandLinkElement {
- {static} String KEY1
- {static} String KEY2
+ {static} String LINE_STYLE
- {static} String LINE_STYLE_MUTILPLES
+ {static} String STYLE_COLORS_MULTIPLES
~ {static} IRegex getRegexConcat()
- {static} ColorParser color()
- String getHead(RegexResult,String)
- LinkType getLinkType(RegexResult)
- {static} String trimAndLowerCase(String)
- Direction getDirection(RegexResult)
- String getQueue(RegexResult)
- {static} RegexLeaf getGroup(String)
# CommandExecutionResult executeArg(DescriptionDiagram,LineLocation,RegexResult)
- IEntity getFoo1(DescriptionDiagram,Code,Ident,Ident)
- ILeaf getOrCreateLeaf1972(DescriptionDiagram,Ident,Code,LeafType,USymbol,Ident)
}
class net.sourceforge.plantuml.graphic.TextBlockMinWidth {
- TextBlock textBlock
- double minWidth
- HorizontalAlignment horizontalAlignment
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.svek.Bibliotekon {
- List<Cluster> allCluster
- Map<ILeaf,SvekNode> nodeMap
- List<SvekLine> lines0
- List<SvekLine> lines1
- List<SvekLine> allLines
+ SvekNode createNode(ILeaf,IEntityImage,ColorSequence,StringBounder)
+ Cluster getCluster(IGroup)
+ void addLine(SvekLine)
- {static} boolean first(SvekLine)
+ void addCluster(Cluster)
+ SvekNode getNode(IEntity)
+ String getNodeUid(ILeaf)
+ String getWarningOrError(int)
+ Map<String,Double> getMaxX()
+ List<SvekLine> allLines()
+ List<SvekLine> lines0()
+ List<SvekLine> lines1()
+ List<Cluster> allCluster()
+ Collection<SvekNode> allNodes()
+ List<SvekLine> getAllLineConnectedTo(IEntity)
+ SvekLine getLine(Link)
+ IEntity getOnlyOther(IEntity)
+ ILeaf getLeaf(SvekNode)
}
class net.sourceforge.plantuml.creole.command.CommandCreoleImg {
- {static} Pattern2 pattern
+ {static} Command create()
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.timingdiagram.graphic.PentaAShape {
- double width
- double height
- SymbolContext context
- double delta
+ {static} PentaAShape create(double,double,SymbolContext)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.graphic.DisplayUtils {
- {static} Display breakLines(Display,FontConfiguration,SpriteContainer,double)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseDelayText {
# void drawInternalU(UGraphic,Area)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.BaseFile {
- String basename
- SFile basedir
- {static} String extractBasename(String)
+ String toString()
+ String getBasename()
+ SFile getBasedir()
+ SFile getTraceFile(String)
}
class net.sourceforge.plantuml.BackSlash {
+ {static} String BS_BS_N
+ {static} String NEWLINE
+ {static} char CHAR_NEWLINE
+ {static} char hiddenNewLine()
+ {static} String convertHiddenNewLine(String)
+ {static} List<String> splitHiddenNewLine(String)
+ {static} String manageNewLine(String)
+ {static} List<String> getWithNewlines(CharSequence)
+ {static} String translateBackSlashes(CharSequence)
- {static} boolean isEnglishLetterOfBackSlash(char)
+ {static} String untranslateBackSlashes(CharSequence)
- {static} char translateChar(char)
}
class net.sourceforge.plantuml.project.lang.ComplementInColors2 {
+ IRegex toRegex(String)
+ Failable<CenterBorderColor> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandSwimlane {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.graphic.TextBlockSprited {
- TextBlock parent
- TextBlock sprite
+ Dimension2D calculateDimension(StringBounder)
- double getCircledCharacterWithAndMargin(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.project.command.CommandFootbox {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(GanttDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.bpm.Col {
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInner {
- List<Ftile> forks
+ Collection<Ftile> getMyChildren()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Set<Swimlane> getSwimlanes()
+ {static} Set<Swimlane> mergeSwimlanes(List<Ftile>)
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
+ UTranslate getTranslateFor(Ftile,StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat {
- Ftile repeat
- Ftile diamond1
- Ftile diamond2
- Ftile backward
- TextBlock tbTest
+ Collection<Ftile> getMyChildren()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Set<Swimlane> getSwimlanes()
+ {static} Ftile create(Swimlane,Swimlane,Ftile,Ftile,Display,Display,Display,HColor,HColor,Rainbow,Rainbow,ConditionStyle,ISkinSimple,FontConfiguration,FontConfiguration,Ftile,boolean,LinkRendering,LinkRendering)
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
- Dimension2D calculateDimensionInternal(StringBounder)
+ UTranslate getTranslateFor(Ftile,StringBounder)
- UTranslate getTranslateForRepeat(StringBounder)
- UTranslate getTranslateDiamond1(StringBounder)
- UTranslate getTranslateBackward(StringBounder)
- UTranslate getTranslateDiamond2(StringBounder)
- double getLeft(StringBounder)
- double getRight(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionIn {
- Rainbow arrowColor
- TextBlock tbin
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionOut {
- Rainbow arrowColor
- TextBlock tbout
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackComplex1 {
- Rainbow arrowColor
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackBackward1 {
- Rainbow arrowColor
- TextBlock tbback
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackBackward2 {
- Rainbow arrowColor
- TextBlock label
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackSimple {
- Rainbow arrowColor
- TextBlock tbback
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.svek.PointListIteratorImpl {
- SvgResult svg
- int pos
~ {static} PointListIterator create(SvgResult,int)
+ PointListIterator cloneMe()
+ boolean hasNext()
+ List<Point2D.Double> next()
+ void remove()
}
class net.sourceforge.plantuml.error.PSystemErrorEmpty {
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandActivityLegacy1 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.webp.LoopFilter {
- {static} int abs(int)
- {static} int c(int)
- {static} int common_adjust(boolean,Segment)
+ {static} boolean filter_yes(int,int,int,int,int,int,int,int,int,int)
- {static} Segment getSegH(SubBlock,SubBlock,int)
- {static} Segment getSegV(SubBlock,SubBlock,int)
+ {static} boolean hev(int,int,int,int,int)
+ {static} void loopFilter(VP8Frame)
+ {static} void loopFilterSimple(VP8Frame)
+ {static} void loopFilterUV(VP8Frame)
+ {static} void loopFilterY(VP8Frame)
~ {static} void MBfilter(int,int,int,Segment)
- {static} int s2u(int)
- {static} void setSegH(SubBlock,SubBlock,Segment,int)
- {static} void setSegV(SubBlock,SubBlock,Segment,int)
- {static} void simple_segment(int,Segment)
+ {static} void subblock_filter(int,int,int,Segment)
- {static} int u2s(int)
}
interface net.sourceforge.plantuml.stats.api.StatsLine {
+ Collection<StatsColumn> getColumnHeaders()
+ Object getValue(StatsColumn)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine {
- Point2D contact
- double angle
+ Point2D somePoint()
+ void drawU(UGraphic)
- {static} void drawLine(UGraphic,double,double,Point2D,Point2D)
}
class net.sourceforge.plantuml.cucadiagram.BodierMap {
- List<CharSequence> rawBody
- Map<String,String> map
- ILeaf leaf
+ void muteClassToObject()
+ void setLeaf(ILeaf)
+ {static} String getLinkedEntry(String)
+ void addFieldOrMethod(String)
+ Display getMethodsToDisplay()
+ Display getFieldsToDisplay()
+ boolean hasUrl()
+ TextBlock getBody(FontParam,ISkinParam,boolean,boolean,Stereotype,Style)
+ List<CharSequence> getRawBody()
}
class net.sourceforge.plantuml.stats.HumanDuration {
- long duration
+ String toString()
}
class net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty {
+ {static} ConnectorPuzzleEmpty get(String)
+ boolean checkDirections(String)
+ String toString()
+ Dimension2D getDimension(StringBounder,ISkinParam)
+ TextBlock toTextBlock(ISkinParam)
+ String getId()
+ void drawU(UGraphic)
- void drawLine(UGraphic,Where)
+ Dimension2D calculateDimension(StringBounder)
+ MinMax getMinMax(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
}
class net.sourceforge.plantuml.svek.SvgResult {
+ {static} String D_EQUALS
+ {static} String POINTS_EQUALS
- String svg
- Point2DFunction function
+ PointListIterator getPointsWithThisColor(int)
+ List<Point2D.Double> extractList(String)
+ int getIndexFromColor(int)
+ List<Point2D.Double> getPoints(String)
+ Point2D.Double getNextPoint()
- Point2D.Double getFirstPoint(String)
+ int indexOf(String,int)
+ SvgResult substring(int)
+ SvgResult substring(int,int)
+ String getSvg()
}
class net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA {
~ {static} IRegex getRegexConcat()
}
class net.sourceforge.plantuml.golem.MinMaxDouble {
- double minX
- double minY
- double maxX
- double maxY
+ void manage(double,double)
+ double getMinX()
+ double getMinY()
+ double getMaxX()
+ double getMaxY()
+ double getWidth()
+ double getHeight()
}
class net.sourceforge.plantuml.SkinParamBackcoloredReference {
- HColor sequenceReferenceHeaderBackground
- HColor sequenceReferenceBackground
+ HColor getHtmlColor(ColorParam,Stereotype,boolean)
}
class net.sourceforge.plantuml.utils.MTRandom {
- {static} long serialVersionUID
- {static} int UPPER_MASK
- {static} int LOWER_MASK
- {static} int N
- {static} int M
- {static} int[] MAGIC
- {static} int MAGIC_FACTOR1
- {static} int MAGIC_FACTOR2
- {static} int MAGIC_FACTOR3
- {static} int MAGIC_MASK1
- {static} int MAGIC_MASK2
- {static} int MAGIC_SEED
- {static} long DEFAULT_SEED
- int[] mt
- int mti
- boolean compat
- int[] ibuf
- void setSeed(int)
+ void setSeed(long)
+ void setSeed(byte[])
+ void setSeed(int[])
# int next(int)
+ {static} int[] pack(byte[])
}
class net.sourceforge.plantuml.cucadiagram.CodeImpl {
- String name
+ {static} Code of(String)
+ String getName()
+ String toString()
+ int hashCode()
+ boolean equals(Object)
+ Code eventuallyRemoveStartingAndEndingDoubleQuote(String)
}
class net.sourceforge.plantuml.jsondiagram.JsonCurve {
- List<Point2D> points
- double maxX
- Mirror xMirror
- double veryFirstLine
- Point2D sp
- Point2D ep
- Point2D getPoint(ST_splines,int)
+ void drawCurve(HColor,UGraphic)
+ void drawSpot(UGraphic)
- Point2D getVeryFirst()
- {static} Point2D supp(Point2D,Point2D,double)
+ double getMaxX()
+ double getMaxY()
}
class net.sourceforge.plantuml.cucadiagram.dot.CucaDiagramSimplifierState {
- CucaDiagram diagram
- StringBounder stringBounder
- Collection<IGroup> getOrdered(IGroup)
- void addOneLevel(Collection<IGroup>)
- List<IGroup> reverse(Collection<IGroup>)
- IEntityImage computeImage(IGroup)
}
class net.sourceforge.plantuml.posimo.Mirror {
- double max
+ double getMirrored(double)
}
class net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteCommand {
- IRegex getRegexConcatMultiLine()
- IRegex getRegexConcatSingleLine()
- {static} ColorParser color()
+ Command<SequenceDiagram> createMultiLine(boolean)
+ Command<SequenceDiagram> createSingleLine()
- CommandExecutionResult executeInternal(SequenceDiagram,RegexResult,BlocLines)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryArrowAndCircle {
- HColor backgroundColor
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionFork {
- List<InstructionList> forks
- Instruction parent
- LinkRendering inlinkRendering
- ISkinParam skinParam
- Swimlane swimlaneIn
- Swimlane swimlaneOut
- ForkStyle style
- String label
~ boolean finished
+ boolean containsBreak()
- InstructionList getLastList()
+ void add(Instruction)
+ Ftile createFtile(FtileFactory)
+ Instruction getParent()
+ void forkAgain(Swimlane)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ boolean addNote(Display,NotePosition,NoteType,Colors,Swimlane)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ void manageOutRendering(LinkRendering,boolean)
+ void setStyle(ForkStyle,String,Swimlane)
}
class net.sourceforge.plantuml.webp.MacroBlock {
- int filterLevel
- boolean keepDebugInfo
- int segmentId
- int skipCoeff
- boolean skipInnerLoopFilter
~ SubBlock[][] uSubBlocks
- int uVFilterLevel
- int uvMode
~ SubBlock[][] vSubBlocks
- int x
~ SubBlock y2SubBlock
- int yMode
~ SubBlock[][] ySubBlocks
+ void decodeMacroBlock(VP8Frame)
- void decodeMacroBlockTokens(VP8Frame,boolean)
- boolean decodePlaneTokens(VP8Frame,int,SubBlock.PLANE,boolean)
+ void dequantMacroBlock(VP8Frame)
+ void drawDebug()
+ SubBlock getBottomSubBlock(int,SubBlock.PLANE)
+ String getDebugString()
+ int getFilterLevel()
+ SubBlock getLeftSubBlock(int,SubBlock.PLANE)
+ SubBlock getRightSubBlock(int,SubBlock.PLANE)
+ int getSkipCoeff()
+ SubBlock getSubBlock(SubBlock.PLANE,int,int)
+ int getSubblockX(SubBlock)
+ int getSubblockY(SubBlock)
+ SubBlock getUSubBlock(int,int)
+ int getUVFilterLevel()
+ int getUvMode()
+ SubBlock getVSubBlock(int,int)
+ int getX()
+ int getY()
+ SubBlock getY2SubBlock()
+ int getYMode()
+ SubBlock getYSubBlock(int,int)
+ boolean isKeepDebugInfo()
+ boolean isSkip_inner_lf()
+ void predictUV(VP8Frame)
+ void predictY(VP8Frame)
+ void recon_mb()
+ void setFilterLevel(int)
+ void setSegmentId(int)
+ void setSkipCoeff(int)
+ void setUVFilterLevel(int)
+ void setUvMode(int)
+ void setYMode(int)
+ String toString()
+ int getSegmentId()
}
class net.sourceforge.plantuml.ugraphic.arc.ExtendedGeneralPath {
- GeneralPath path
- int numVals
- int numSeg
- double[] values
- int[] types
- double mx
- double my
- double cx
- double cy
+ void arcTo(double,double,double,boolean,boolean,double,double)
+ {static} Arc2D computeArc(double,double,double,double,double,boolean,boolean,double,double)
+ void moveTo(double,double)
+ void lineTo(double,double)
+ void quadTo(double,double,double,double)
+ void curveTo(double,double,double,double,double,double)
+ void closePath()
# void checkMoveTo()
+ void append(Shape,boolean)
+ void append(PathIterator,boolean)
+ void append(ExtendedPathIterator,boolean)
+ int getWindingRule()
+ void setWindingRule(int)
+ Point2D getCurrentPoint()
+ void reset()
+ void transform(AffineTransform)
+ Shape createTransformedShape(AffineTransform)
+ Rectangle getBounds()
+ Rectangle2D getBounds2D()
+ boolean contains(double,double)
+ boolean contains(Point2D)
+ boolean contains(double,double,double,double)
+ boolean contains(Rectangle2D)
+ boolean intersects(double,double,double,double)
+ boolean intersects(Rectangle2D)
+ PathIterator getPathIterator(AffineTransform)
+ PathIterator getPathIterator(AffineTransform,double)
+ ExtendedPathIterator getExtendedPathIterator()
+ Object clone()
- void makeRoom(int)
}
class net.sourceforge.plantuml.ugraphic.arc.ExtendedGeneralPath.EPI {
- int segNum
- int valsIdx
+ int currentSegment()
+ int currentSegment(double[])
+ int getWindingRule()
+ boolean isDone()
+ void next()
}
class net.sourceforge.plantuml.PSystemBuilder {
+ {static} long startTime
- {static} List<PSystemFactory> factories
+ Diagram createPSystem(ISkinSimple,List<StringLocated>,List<StringLocated>)
- boolean isOk(Diagram)
}
class net.sourceforge.plantuml.ugraphic.eps.DriverPathEps {
+ void draw(UShape,double,double,ColorMapper,UParam,EpsGraphics)
}
class net.sourceforge.plantuml.board.Activity {
- BNode node
- ISkinParam skinParam
- BNode cursor
- BoardDiagram boardDiagram
- BArray array
+ TextBlock getBox()
+ void addRelease(int,String)
- BArray getArray()
+ double getFullWidth()
+ int getMaxStage()
+ void drawMe(UGraphic)
}
class net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteAcrossCommand {
- IRegex getRegexConcatMultiLine()
- IRegex getRegexConcatSingleLine()
- {static} ColorParser color()
+ Command<SequenceDiagram> createSingleLine()
+ Command<SequenceDiagram> createMultiLine(boolean)
- CommandExecutionResult executeInternal(SequenceDiagram,RegexResult,BlocLines)
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverEllipseG2d {
- double dpiFactor
- EnsureVisible visible
- {static} double ROU
+ void draw(UShape,double,double,ColorMapper,UParam,Graphics2D)
~ {static} double round(double)
}
class net.sourceforge.plantuml.graphic.ResetFont {
+ FontConfiguration apply(FontConfiguration)
}
class net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElementLiveEvent {
# void drawInternalU(UGraphic,double,Context2D)
+ double getStartingX(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.svg.DriverImagePng {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
class net.sourceforge.plantuml.cucadiagram.dot.GraphvizLinux {
# File specificDotExe()
# String getExeName()
+ boolean graphviz244onWindows()
}
class net.sourceforge.plantuml.ugraphic.debug.StringBounderDebug {
# Dimension2D calculateDimensionInternal(UFont,String)
+ double getDescent(UFont,String)
}
class net.sourceforge.plantuml.creole.atom.AtomHorizontalTexts {
- List<Atom> all
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
}
interface net.sourceforge.plantuml.argon2.blake2.Blake2b {
~ void update(byte[])
~ void update(byte)
~ void update(byte[],int,int)
~ byte[] digest()
~ byte[] digest(byte[])
~ void digest(byte[],int,int)
~ void reset()
}
interface net.sourceforge.plantuml.argon2.blake2.Blake2b.Spec {
~ int param_bytes
~ int block_bytes
~ int max_digest_bytes
~ int max_key_bytes
~ int max_salt_bytes
~ int max_personalization_bytes
~ int state_space_len
~ int max_tree_fantout
~ int max_tree_depth
~ int max_tree_leaf_length
~ long max_node_offset
~ int max_tree_inner_length
~ long[] IV
~ {static} byte[][] sigma
}
class net.sourceforge.plantuml.argon2.blake2.Blake2b.Digest {
+ {static} Digest newInstance()
+ {static} Digest newInstance(int)
+ {static} Digest newInstance(Param)
}
class net.sourceforge.plantuml.argon2.blake2.Blake2b.Mac {
+ {static} Mac newInstance(byte[])
+ {static} Mac newInstance(byte[],int)
+ {static} Mac newInstance(Key,int)
+ {static} Mac newInstance(Param)
}
class net.sourceforge.plantuml.argon2.blake2.Blake2b.Tree {
~ int depth
~ int fanout
~ int leaf_length
~ int inner_length
~ int digest_length
- Param treeParam()
+ Digest getNode(int,int)
+ Digest getRoot()
}
class net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine {
~ {static} int[] sig_g00
~ {static} int[] sig_g01
~ {static} int[] sig_g10
~ {static} int[] sig_g11
~ {static} int[] sig_g20
~ {static} int[] sig_g21
~ {static} int[] sig_g30
~ {static} int[] sig_g31
~ {static} int[] sig_g40
~ {static} int[] sig_g41
~ {static} int[] sig_g50
~ {static} int[] sig_g51
~ {static} int[] sig_g60
~ {static} int[] sig_g61
~ {static} int[] sig_g70
~ {static} int[] sig_g71
- {static} byte[] zeropad
- long[] h
- long[] t
- long[] f
- long[] m
- long[] v
- byte[] buffer
- Param param
- int outlen
- boolean last_node
- int buflen
- byte[] oneByte
+ {static} void main(String)
- void initialize()
+ void reset()
+ void update(byte[],int,int)
+ void update(byte)
+ void update(byte[])
+ void digest(byte[],int,int)
+ byte[] digest()
+ byte[] digest(byte[])
- void hashout(byte[],int,int)
- void compress(byte[],int)
}
interface net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine.flag {
~ int last_block
~ int last_node
}
class net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine.Debug {
+ {static} void dumpState(Blake2b.Engine,String)
+ {static} void dumpArray(String,long[])
+ {static} void dumpBuffer(PrintStream,String,byte[])
+ {static} void dumpBuffer(PrintStream,byte[])
+ {static} void dumpBuffer(PrintStream,byte[],int,int)
+ {static} void dumpBuffer(PrintStream,String,byte[],int,int)
}
class net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine.Assert {
+ {static} String exclusiveUpperBound
+ {static} String inclusiveUpperBound
+ {static} String exclusiveLowerBound
+ {static} String inclusiveLowerBound
~ {static} String assertFail(String,T,String,T)
}
class net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine.LittleEndian {
- {static} byte[] hex_digits
- {static} byte[] HEX_digits
+ {static} String toHexStr(byte[])
+ {static} String toHexStr(byte[],boolean)
+ {static} int readInt(byte[],int)
+ {static} long readLong(byte[],int)
+ {static} void writeLong(long,byte[],int)
+ {static} void writeInt(int,byte[],int)
}
class net.sourceforge.plantuml.argon2.blake2.Blake2b.Param {
~ {static} byte[] default_bytes
~ {static} long[] default_h
- long[] h
- boolean hasKey
- byte[] key_bytes
- byte[] bytes
+ long[] initialized_H()
+ byte[] getBytes()
~ byte getByteParam(int)
~ int getIntParam(int)
~ long getLongParam(int)
+ int getDigestLength()
+ Param setDigestLength(int)
+ int getKeyLength()
+ int getFanout()
+ Param setFanout(int)
+ int getDepth()
+ Param setDepth(int)
+ int getLeafLength()
+ Param setLeafLength(int)
+ long getNodeOffset()
+ Param setNodeOffset(long)
+ int getNodeDepth()
+ Param setNodeDepth(int)
+ int getInnerLength()
+ Param setInnerLength(int)
+ boolean hasKey()
+ Param clone()
~ void lazyInitBytes()
+ Param setKey(Key)
+ Param setKey(byte[])
+ Param setSalt(byte[])
+ Param setPersonal(byte[])
}
interface net.sourceforge.plantuml.argon2.blake2.Blake2b.Param.Xoff {
~ int digest_length
~ int key_length
~ int fanout
~ int depth
~ int leaf_length
~ int node_offset
~ int node_depth
~ int inner_length
~ int reserved
~ int salt
~ int personal
}
interface net.sourceforge.plantuml.argon2.blake2.Blake2b.Param.Default {
~ byte digest_length
~ byte key_length
~ byte fanout
~ byte depth
~ int leaf_length
~ long node_offset
~ byte node_depth
~ byte inner_length
}
class net.sourceforge.plantuml.activitydiagram3.ActivityDiagramFactory3 {
# List<Command> createCommands()
+ ActivityDiagram3 createEmptyDiagram(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.activitydiagram3.LinkRendering {
- Rainbow rainbow
- Display display
+ {static} LinkRendering none()
+ LinkRendering withRainbow(Rainbow)
+ LinkRendering withDisplay(Display)
+ Display getDisplay()
+ Rainbow getRainbow()
+ Rainbow getRainbow(Rainbow)
+ boolean isNone()
+ String toString()
}
class net.sourceforge.plantuml.creole.rosetta.MyChar {
~ String unicode
~ String htmlDebug
~ String toRightSyntax(WikiLanguage)
+ String toHtmlDebug(String)
}
class net.sourceforge.plantuml.nwdiag.CommandComment {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(NwDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.bpm.CommandNewBranch {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(BpmDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand {
+ Command<D> createSingleLine()
+ Command<D> createMultiLine(boolean)
}
class net.sourceforge.plantuml.command.CommandSkinParam {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.stats.StatsTableImpl {
- String name
- Collection<StatsColumn> columnHeaders
- List<StatsLine> lines
+ String getName()
+ Collection<StatsColumn> getColumnHeaders()
+ List<StatsLine> getLines()
+ void addLine(StatsLine)
}
class net.sourceforge.plantuml.golem.Magnet {
}
class net.sourceforge.plantuml.sprite.SpriteColorBuilder {
- {static} ColorPalette COLOR_PALETTE
+ {static} Sprite buildSprite(List<CharSequence>)
+ {static} List<String> encodeColor(BufferedImage)
}
class net.sourceforge.plantuml.error.PSystemErrorPreprocessor {
}
class net.sourceforge.plantuml.command.note.CommandConstraintOnLinks {
- {static} IRegex getRegexConcat()
- {static} ColorParser color()
# CommandExecutionResult executeArg(CucaDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.FontParamConstant {
~ String FAMILY
~ String COLOR
}
class net.sourceforge.plantuml.mindmap.Stripe {
- double x1
- double x2
- double value
+ String toString()
+ boolean contains(double)
+ int compareTo(Stripe)
+ double getValue()
+ double getStart()
+ double getEnd()
}
class net.sourceforge.plantuml.ugraphic.color.HSLColor {
- Color rgb
- float[] hsl
- float alpha
+ Color adjustHue(float)
+ Color adjustLuminance(float)
+ Color adjustSaturation(float)
+ Color adjustShade(float)
+ Color adjustTone(float)
+ float getAlpha()
+ Color getComplementary()
+ float getHue()
+ float[] getHSL()
+ float getLuminance()
+ Color getRGB()
+ float getSaturation()
+ String toString()
+ {static} float[] fromRGB(Color)
+ {static} Color toRGB(float[])
+ {static} Color toRGB(float[],float)
+ {static} Color toRGB(float,float,float)
+ {static} Color toRGB(float,float,float,float)
- {static} float HueToRGB(float,float,float)
}
class net.sourceforge.plantuml.tim.EaterExceptionLocated {
- String message
- StringLocated location
+ {static} EaterExceptionLocated located(String,StringLocated)
+ String getMessage()
+ StringLocated getLocation()
}
class net.sourceforge.plantuml.version.PSystemVersion {
- {static} BufferedImage transparentIcon
+ {static} BufferedImage getPlantumlImage()
+ {static} BufferedImage getCharlieImage()
+ {static} BufferedImage getTime01()
+ {static} BufferedImage getTime15()
+ {static} BufferedImage getPlantumlSmallIcon()
+ {static} BufferedImage getArecibo()
+ {static} BufferedImage getDotc()
+ {static} BufferedImage getDotd()
+ {static} BufferedImage getApple2Image()
- {static} BufferedImage getImage(String)
- {static} BufferedImage getImageWebp(String)
+ {static} BufferedImage getPlantumlSmallIcon2()
+ {static} PSystemVersion createShowVersion2(UmlSource)
+ {static} PSystemVersion createStdLib(UmlSource)
+ {static} PSystemVersion createShowAuthors2(UmlSource)
+ {static} List<String> getAuthorsStrings(boolean)
- {static} void add(List<String>,String,boolean)
+ {static} PSystemVersion createTestDot(UmlSource)
+ {static} PSystemVersion createKeyDistributor(UmlSource)
+ DiagramDescription getDescription()
+ List<String> getLines()
}
interface net.sourceforge.plantuml.bpm.Navigator {
+ O next()
+ O previous()
+ O get()
+ void set(O)
+ void insertBefore(O)
+ void insertAfter(O)
}
class net.sourceforge.plantuml.graphic.USymbolBoundary {
+ SkinParameter getSkinParameter()
# TextBlock getDrawing(SymbolContext)
}
class net.sourceforge.plantuml.version.Version {
- {static} int MAJOR_SEPARATOR
+ {static} int version()
+ {static} int versionPatched()
+ {static} String versionString()
+ {static} String fullDescription()
- {static} String dotted(int)
+ {static} String versionString(int)
+ {static} int beta()
+ {static} String etag()
+ {static} String turningId()
+ {static} long compileTime()
+ {static} String compileTimeString()
+ {static} String getJarPath()
}
class net.sourceforge.plantuml.graphic.RemoveStyle {
- FontStyle style
+ FontConfiguration apply(FontConfiguration)
}
class net.sourceforge.plantuml.graphic.SpecialText {
- TextBlock title
+ boolean isIgnoreForCompressionOn(CompressionMode)
+ void drawWhenCompressed(UGraphic,CompressionMode)
+ TextBlock getTitle()
}
class net.sourceforge.plantuml.logo.LogoToken {
+ {static} int END_OF_INPUT
+ {static} int INVALID_TOKEN
+ {static} int IDENTIFIER
+ {static} int FLOAT
+ {static} int INTEGER
+ {static} int FORWARD
+ {static} int BACK
+ {static} int LEFT
+ {static} int RIGHT
+ {static} int PENUP
+ {static} int PENDOWN
+ {static} int HIDETURTLE
+ {static} int SHOWTURTLE
+ {static} int CLEARSCREEN
+ {static} int REPEAT
+ {static} int TO
+ {static} int SETPC
+ int kind
+ String lexeme
+ float value
+ int intValue
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryDroplist {
- DataSource dataSource
- ISkinSimple spriteContainer
+ Terminated<Element> create()
+ boolean ready()
}
interface net.sourceforge.plantuml.ugraphic.UChange {
}
class net.sourceforge.plantuml.dedication.RBlock {
- byte[] buffer
+ RBlock change(BigInteger,BigInteger)
+ byte[] getData(int)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandModeCompact {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.svek.GeneralImageBuilder {
- DotData dotData
- EntityFactory entityFactory
- UmlSource source
- Pragma pragma
- boolean strictUmlStyle
- Map<String,Double> maxX
- StringBounder stringBounder
- boolean mergeIntricated
- SName styleName
+ {static} IEntityImage createEntityImageBlock(ILeaf,ISkinParam,boolean,PortionShower,Bibliotekon,GraphvizVersion,UmlDiagramType,Collection<Link>)
- {static} IEntityImage createEntityImageBlockInternal(ILeaf,ISkinParam,boolean,PortionShower,Bibliotekon,GraphvizVersion,UmlDiagramType,Collection<Link>)
+ {static} UStroke getForcedStroke(Stereotype,ISkinParam)
+ StyleSignature getDefaultStyleDefinitionArrow(Stereotype)
- boolean isOpalisable(IEntity)
- HColor getBackcolor()
+ IEntityImage buildImage(BaseFile,String[])
- FontConfiguration getFontForLink(Link,ISkinParam)
- boolean isSvekTrace()
- String extractGraphvizVersion(String)
- boolean onlyOneLink(IEntity)
- IEntityImage error(File)
- void printEntities(DotStringFactory,Collection<ILeaf>)
- void printEntity(DotStringFactory,ILeaf)
- IEntityImage printEntityInternal(DotStringFactory,ILeaf)
- double getMaxWidth(DotStringFactory)
- Collection<ILeaf> getUnpackagedEntities()
- void printGroups(DotStringFactory,IGroup)
- void printGroup(DotStringFactory,IGroup)
+ {static} TextBlock stateHeader(IEntity,Style,ISkinParam)
- Style getStyle(FontParam)
- TextBlock getTitleBlock(IGroup)
- TextBlock addLegend(TextBlock,DisplayPositionned)
- TextBlock getStereoBlock(IGroup)
- TextBlock getStereoBlockWithoutLegend(IGroup)
+ String getWarningOrError(int)
}
class net.sourceforge.plantuml.svek.GeneralImageBuilder.EntityImageSimpleEmpty {
- HColor backColor
+ boolean isHidden()
+ HColor getBackcolor()
+ Dimension2D calculateDimension(StringBounder)
+ MinMax getMinMax(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
+ Margins getShield(StringBounder)
+ double getOverscanX(StringBounder)
}
class net.sourceforge.plantuml.salt.element.ListWidth {
- List<Double> allWidth
+ void add(double)
+ ListWidth mergeMax(ListWidth)
- double getWidthSafe(int)
+ double getTotalWidthWithMargin(double)
+ Iterator<Double> iterator()
}
interface net.sourceforge.plantuml.sequencediagram.teoz.Tile {
+ double getPreferredHeight()
+ void callbackY(double)
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
+ double getMiddleX()
+ Event getEvent()
+ double getContactPointRelative()
+ double getZZZ()
+ boolean matchAnchor(String)
}
interface net.sourceforge.plantuml.timingdiagram.graphic.PDrawing {
+ double getFullHeight(StringBounder)
+ void addChange(ChangeState)
+ TextBlock getPart1(double)
+ UDrawable getPart2()
+ void setInitialState(String,Colors)
+ void addConstraint(TimeConstraint)
}
class net.sourceforge.plantuml.webp.SegmentQuant {
- int filterStrength
- int Qindex
- int uvac
- int uvdc
- int y1ac
- int y1dc
- int y2ac
- int y2dc
- int clip(int,int)
+ int getQindex()
+ int getUvac_delta_q()
+ int getUvdc_delta_q()
+ int getY1ac()
+ int getY1dc()
+ int getY2ac_delta_q()
+ int getY2dc()
+ void setFilterStrength(int)
+ void setQindex(int)
+ void setUvac_delta_q(int)
+ void setUvdc_delta_q(int)
+ void setY1ac()
+ void setY1dc(int)
+ void setY2ac_delta_q(int)
+ void setY2dc(int)
+ int getFilterStrength()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown {
- Ftile thenBlock
- Ftile diamond1
- Ftile diamond2
- Ftile optionalStop
- ConditionEndStyle conditionEndStyle
+ Collection<Ftile> getMyChildren()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ {static} Ftile create(Ftile,Ftile,Swimlane,Ftile,Rainbow,ConditionEndStyle,FtileFactory,Ftile,Rainbow)
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
- double getAdditionalWidth(StringBounder)
- double getSouthLabelHeight(StringBounder)
- double getEastLabelWidth(StringBounder)
+ UTranslate getTranslateFor(Ftile,StringBounder)
- UTranslate getTranslateForThen(StringBounder)
- UTranslate getTranslateDiamond1(StringBounder)
- UTranslate getTranslateOptionalStop(StringBounder)
- UTranslate getTranslateDiamond2(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionHorizontal {
- Rainbow color
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionIn {
- Rainbow arrowColor
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionOut {
- Rainbow arrowColor
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
- Point2D getP2hline(StringBounder)
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionElse {
- Rainbow endInlinkColor
# Point2D getP1(StringBounder)
# Point2D getP2(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionElseHline {
- Rainbow endInlinkColor
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionElseNoDiamond {
# Point2D getP2(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionHline {
- Rainbow endInlinkColor
- Point2D getP1(StringBounder)
# Point2D getP2(StringBounder)
# Point2D getP3(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.command.CommandPage {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractEntityDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandSwitch {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.argon2.model.Block {
+ long[] v
+ void fromBytes(byte[])
+ byte[] toBytes()
+ void copyBlock(Block)
+ void xor(Block,Block)
+ void xor(Block,Block,Block)
+ void xorWith(Block)
+ String toString()
~ void clear()
}
class net.sourceforge.plantuml.ugraphic.html5.Html5Drawer {
- int maxX
- int maxY
- String strokeStyle
- String fillStyle
- List<String> data
# void ensureVisible(double,double)
- {static} String format(double)
+ void setStrokeColor(String)
+ void setFillColor(String)
+ String generateHtmlCode()
- void ap(StringBuilder,String)
+ void htmlRectangle(double,double,double,double,double,double)
+ void htmlLine(double,double,double,double,double)
}
class net.sourceforge.plantuml.ugraphic.svg.DriverTextAsPathSvg {
- FontRenderContext fontRenderContext
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverDotPathG2d {
- EnsureVisible visible
+ void draw(UShape,double,double,ColorMapper,UParam,Graphics2D)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityPlus {
- UEllipse circle
- double px
- double py
- {static} double radius
- double angle
- HColor backgroundColor
+ Point2D somePoint()
+ {static} UDrawable create(Point2D,double,HColor)
+ void drawU(UGraphic)
- Point2D getPointOnCircle(double)
- {static} void drawLine(UGraphic,double,double,Point2D,Point2D)
}
class net.sourceforge.plantuml.svek.Margins {
- double x1
- double x2
- double y1
- double y2
+ {static} Margins NONE
+ {static} Margins uniform(double)
+ String toString()
+ boolean isZero()
+ double getX1()
+ double getX2()
+ double getY1()
+ double getY2()
+ double getTotalWidth()
+ double getTotalHeight()
}
class net.sourceforge.plantuml.graphic.USymbolControl {
+ SkinParameter getSkinParameter()
# TextBlock getDrawing(SymbolContext)
}
class net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop {
~ {static} RegexConcat getRegexConcat(UmlDiagramType)
- {static} String optionalKeywords(UmlDiagramType)
- LeafType getType(String)
# CommandExecutionResult executeArg(AbstractClassOrObjectDiagram,LineLocation,RegexResult)
- IEntity getFoo1(AbstractClassOrObjectDiagram,Code,Ident)
- void addLink(AbstractClassOrObjectDiagram,Link,String)
- LinkType getLinkType(RegexResult)
- String getQueue(RegexResult)
}
class net.sourceforge.plantuml.ugraphic.eps.DriverTextEps {
- StringBounder stringBounder
- ClipContainer clipContainer
- FontRenderContext fontRenderContext
- EpsStrategy strategy
+ void draw(UShape,double,double,ColorMapper,UParam,EpsGraphics)
- Shape getOutline(TextLayout)
- void drawAsText(UText,double,double,UParam,EpsGraphics,ColorMapper)
~ {static} void drawPathIterator(EpsGraphics,double,double,Shape)
- {static} void drawSingle(EpsGraphics,double,double,PathIterator)
- {static} List<Integer> analyze(Shape)
- {static} List<Integer> getClosings(PathIterator)
- {static} MinMax getMinMax(double,double,PathIterator)
}
class net.sourceforge.plantuml.tim.EaterIf {
- boolean booleanValue
+ void analyze(TContext,TMemory)
+ boolean isTrue()
}
class net.sourceforge.plantuml.ugraphic.visio.VisioGraphics {
- List<VisioShape> shapes
- MinMaxDouble limits
+ void createVsd(OutputStream)
- void out(OutputStream,String)
- double toInches(double)
- void ensureVisible(double,double)
+ void rectangle(double,double,double,double)
+ void text(String,double,double,String,int,double,double,Map<String,String>)
+ void line(double,double,double,double)
- void line(Point2D,Point2D)
+ void upath(double,double,UPath)
+ void polygon(UPolygon)
}
class net.sourceforge.plantuml.svek.image.EntityImageCircleEnd {
- {static} int SIZE
- ColorParam param
+ StyleSignature getDefaultStyleDefinitionCircle()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.sequencediagram.command.CommandReferenceOverSeveral {
- {static} RegexConcat getConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.command.CommandScaleMaxHeight {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractPSystem,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.sudoku.ISudoku {
~ int getGiven(int,int)
~ long getRatting()
~ long getSeed()
}
class net.sourceforge.plantuml.style.CommandStyleImport {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.CenteredText {
- TextBlock text
- double totalWidth
+ TextBlock getText()
+ double getTotalWidth()
}
class net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants {
- PlayingSpace playingSpace
- Dimension2D cacheDimension
- double ymin
- double ymax
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ Real getMinX(StringBounder)
+ int getNbPages()
+ void setIndex(int)
- List<Double> yNewPages()
- void drawNewPages(UGraphic)
}
class net.sourceforge.plantuml.ant.CheckZipTask {
- String zipfile
- List<FileSet> filesets
- List<FileList> filelists
- List<String> entries
+ void addFileset(FileSet)
+ void addFilelist(FileList)
+ void execute()
- void manageFileList(FileList)
- boolean isPresentInFile(String)
- void loadZipFile(SFile)
- void myLog(String)
+ void setZipfile(String)
}
class net.sourceforge.plantuml.nwdiag.CommandEndSomething {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(NwDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandChangeStateByPlayerCode {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.code.deflate.ByteHistory {
- byte[] data
- int index
+ void append(int)
+ void copy(int,int,OutputStreamProtected)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionEnd {
- LinkRendering inlinkRendering
+ Ftile createFtile(FtileFactory)
+ void add(Instruction)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ boolean containsBreak()
}
class net.sourceforge.plantuml.creole.SheetBlock1 {
- Sheet sheet
- List<Stripe> stripes
- Map<Stripe,Double> heights
- Map<Stripe,Double> widths
- Map<Atom,Position> positions
- MinMax minMax
- LineBreakStrategy maxWidth
- double padding
+ List<Atom> splitInTwo(StringBounder,double)
+ String toString()
+ HorizontalAlignment getCellAlignment()
- void initMap(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
+ void drawU(UGraphic)
+ double getStartingAltitude(StringBounder)
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
class net.sourceforge.plantuml.dedication.QBlocks {
- List<QBlock> all
+ {static} QBlocks readFrom(InputStream,int)
+ QBlocks change(BigInteger,BigInteger)
+ void writeTo(OutputStream,int)
}
class net.sourceforge.plantuml.tim.stdlib.Strlen {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.help.CommandHelpTheme {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(Help,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.stats.StatsUtilsIncrement {
- {static} Preferences prefs
- {static} ConcurrentMap<String,ParsedGenerated> byTypeEver
- {static} ConcurrentMap<String,ParsedGenerated> byTypeCurrent
- {static} FormatCounter formatCounterCurrent
- {static} FormatCounter formatCounterEver
- {static} Lock lockXml
- {static} Lock lockHtml
+ {static} void onceMoreParse(long,Class<? extends Diagram>)
+ {static} void onceMoreGenerate(long,Class<? extends Diagram>,FileFormat)
- {static} ParsedGenerated getByTypeCurrent(Class<? extends Diagram>)
- {static} ParsedGenerated getByTypeEver(Class<? extends Diagram>)
- {static} String name(Class<? extends Diagram>)
- {static} void realTimeExport()
}
class net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace {
- double startingY
- Real min
- Real max
- boolean isShowFootbox
- List<Tile> tiles
- LivingSpaces livingSpaces
- List<LinkAnchor> linkAnchors
- ISkinParam skinParam
+ void drawBackground(UGraphic)
+ void drawForeground(UGraphic)
- double drawUInternal(UGraphic,boolean)
- CommonTile getFromAnchor(List<CommonTile>,String)
+ double getPreferredHeight(StringBounder)
+ void addConstraints()
+ Real getMinX(StringBounder)
+ Real getMaxX(StringBounder)
+ boolean isShowFootbox()
+ LivingSpaces getLivingSpaces()
+ double getBorder1()
+ double getBorder2()
+ List<Double> yNewPages()
+ int getNbPages()
}
class net.sourceforge.plantuml.code.CompressionNone {
+ byte[] compress(byte[])
+ ByteArray decompress(byte[])
}
class net.sourceforge.plantuml.project.lang.ComplementOpen {
+ IRegex toRegex(String)
+ Failable<Object> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.oregon.OregonBasicGame {
- Screen screen
- SmartKeyboard skb
- Random rnd
- int ks
- int kh
- int kp
- int kb
- int km
- int kq
- double ma
- String[] da
- int[] ep
- int e
- int a
- double b
- double f
- double c
- double r
- double t
- int dr
- double m
- {static} int NB_WORDS
+ Screen getScreen()
- void print(String)
- void printb(String)
- void print()
+ void run(Keyboard)
- double rnd()
- void init()
- void events1800(int)
- void execEvent(int,int)
- void madeIt3190(int)
- boolean riders1390(int)
- void riderShoot(int)
- void montains2640(int)
- void southPass2750(int)
- void blizzard2840(int)
- void dealWithIllness2880(int)
- void eating1310(int)
- void needDoctorBadly3010(int)
- void outOfMedicalSupplies3020(int)
- void die3000(int)
- void die3030(int)
- void die3060(int)
- void print3110(int)
- void question1000(int)
- void hunt1200(int)
- void stopAtFort1100(int)
- void printInventory3350()
- String whereAreWe()
- void printInitialScenario490()
- void initialPurchasesOfPlayer690()
- void initialShootingRanking920()
- int getTime()
- int shoot3870()
- int protect(int)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandFootbox {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.cucadiagram.UnparsableGraphvizException {
- String graphvizVersion
- String svg
- String diagramSource
+ String getGraphvizVersion()
+ String getDebugData()
}
class net.sourceforge.plantuml.graphic.TextBlockEmpty {
- double width
- double height
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.oregon.PSystemOregonFactory {
+ PSystemOregon initDiagram(UmlSource,String)
+ PSystemOregon executeLine(UmlSource,PSystemOregon,String)
}
class net.sourceforge.plantuml.ugraphic.color.HColorAutomatic {
- HColor colorForLight
- HColor colorForDark
- HColor colorForTransparent
- ThemeStyle themeStyle
+ HColor getAppropriateColor(HColor)
}
class net.sourceforge.plantuml.asciiart.ComponentTextActiveLine {
- FileFormat fileFormat
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.webp.SubBlock {
+ {static} int UV
+ {static} int Y
+ {static} int Y_AFTER_Y2
+ {static} int Y2
- SubBlock above
- int[][] dest
- int[][] diff
- boolean hasNoZeroToken
- SubBlock left
- MacroBlock macroBlock
- int mode
- PLANE plane
- int[][] predict
- int[] tokens
+ {static} int planeToType(PLANE,Boolean)
- int DCTextra(BoolDecoder,int[])
+ void decodeSubBlock(BoolDecoder,int[][][][],int,int,boolean)
- int decodeToken(BoolDecoder,int)
+ void dequantSubBlock(VP8Frame,Integer)
+ void drawDebug()
+ void drawDebugH()
+ void drawDebugV()
+ SubBlock getAbove()
+ String getDebugString()
+ int[][] getDest()
+ int[][] getDiff()
+ SubBlock getLeft()
+ MacroBlock getMacroBlock()
+ int[][] getMacroBlockPredict(int)
+ int getMode()
+ PLANE getPlane()
+ int[][] getPredict()
+ int[][] getPredict(int,boolean)
~ int[] getTokens()
+ boolean hasNoZeroToken()
+ boolean isDest()
+ void predict(VP8Frame)
+ void reconstruct()
+ void setDest(int[][])
+ void setDiff(int[][])
+ void setMode(int)
+ void setPixel(int,int,int)
+ void setPredict(int[][])
+ String toString()
}
class net.sourceforge.plantuml.ugraphic.svg.DriverPolygonSvg {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
class net.sourceforge.plantuml.zopfli.Katajainen {
~ {static} void lengthLimitedCodeLengths(Cookie,int[],int,int[])
- {static} void boundaryPm(Cookie,Node[],Node[],Node[],int,int,boolean)
- {static} void sort(Node[],Node[],int,int)
}
class net.sourceforge.plantuml.activitydiagram.command.CommandElse {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineComposition {
- PiecewiseAffineComposition first
- PiecewiseAffineComposition second
+ double transform(double)
}
class net.sourceforge.plantuml.zopfli.Util {
~ {static} int[] LENGTH_SYMBOL
~ {static} int[] LENGTH_EXTRA_BITS
~ {static} int[] LENGTH_EXTRA_BITS_VALUE
~ {static} int[] ORDER
~ {static} int[] CACHED_DIST_SYMBOL
~ {static} int[] CACHED_DIST_EXTRA_BITS
- {static} int[] cacheDistSymbol()
- {static} int distSymbol(int)
- {static} int[] precacheDistExtraBits()
- {static} int distExtraBits(int)
~ {static} int distExtraBitsValue(int)
}
interface net.sourceforge.plantuml.command.Command {
~ CommandExecutionResult execute(D,BlocLines)
~ CommandControl isValid(BlocLines)
~ String[] getDescription()
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryCheckboxOff {
- DataSource dataSource
- ISkinSimple spriteContainer
+ Terminated<Element> create()
- List<String> extracted(String)
+ boolean ready()
}
class net.sourceforge.plantuml.api.NumberAnalyzedDated {
- AtomicLong created
- AtomicLong modified
- String comment
+ void reset()
- void resetCreatedModifiedComment()
+ void addValue(long)
+ void add(NumberAnalyzed)
# String getSavedSupplementatyData()
+ {static} NumberAnalyzedDated load(String,Preferences)
+ long getCreationTime()
+ long getModificationTime()
+ String getComment()
+ void setComment(String)
}
class net.sourceforge.plantuml.brotli.Transform {
~ {static} int NUM_TRANSFORMS
- {static} int[] TRANSFORMS
- {static} byte[] PREFIX_SUFFIX
- {static} int[] PREFIX_SUFFIX_HEADS
- {static} String PREFIX_SUFFIX_SRC
- {static} String TRANSFORMS_SRC
- {static} void unpackTransforms(byte[],int[],int[],String,String)
~ {static} int transformDictionaryWord(byte[],int,ByteBuffer,int,int,int)
}
class net.sourceforge.plantuml.ugraphic.UText {
- String text
- FontConfiguration font
- int orientation
+ String toString()
+ UText withOrientation(int)
+ String getText()
+ FontConfiguration getFontConfiguration()
+ double getDescent(StringBounder)
+ int getOrientation()
}
class net.sourceforge.plantuml.gitlog.SmetanaForGit {
- UGraphic ug
- ISkinParam skinParam
- int num
- ST_Agraph_s g
- StringBounder stringBounder
- Map<GNode,ST_Agnode_s> nodes
- List<ST_Agedge_s> edges
- Mirror yMirror
- Style getStyle()
+ void drawMe(Collection<GNode>)
- Dimension2D getSize(ST_Agnode_s)
- UTranslate getPosition(ST_Agnode_s)
- void initGraph(Collection<GNode>)
- ST_Agedge_s createEdge(GNode,GNode)
- ST_Agnode_s createNode(Dimension2D)
}
class net.sourceforge.plantuml.ugraphic.visio.DriverRectangleVdx {
+ void draw(UShape,double,double,ColorMapper,UParam,VisioGraphics)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityHalfArrow {
- ULine line
- ULine otherLine
- Point2D contact
+ Point2D somePoint()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.ugraphic.tikz.UGraphicTikz {
- StringBounder stringBounder
- TikzFontDistortion tikzFontDistortion
# AbstractCommonUGraphic copyUGraphic()
- void register()
+ StringBounder getStringBounder()
+ void startUrl(Url)
+ void closeUrl()
+ void writeImageTOBEMOVED(OutputStream,String,int)
+ void createTikz(OutputStream)
+ boolean matchesProperty(String)
}
class net.sourceforge.plantuml.posimo.Frame {
- List<? extends CharSequence> name
- ISkinParam skinParam
- Rose rose
+ Style[] getUsedStyles()
+ StyleSignature getDefaultStyleDefinition()
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ Dimension2D getTextDim(StringBounder)
- TextBlock createTextBloc()
+ Dimension2D getPreferredDimension(StringBounder)
}
class net.sourceforge.plantuml.json.JsonArray {
- List<JsonValue> values
+ {static} JsonArray readFrom(Reader)
+ {static} JsonArray readFrom(String)
+ {static} JsonArray unmodifiableArray(JsonArray)
+ JsonArray add(int)
+ JsonArray add(long)
+ JsonArray add(float)
+ JsonArray add(double)
+ JsonArray add(boolean)
+ JsonArray add(String)
+ JsonArray add(JsonValue)
+ JsonArray set(int,int)
+ JsonArray set(int,long)
+ JsonArray set(int,float)
+ JsonArray set(int,double)
+ JsonArray set(int,boolean)
+ JsonArray set(int,String)
+ JsonArray set(int,JsonValue)
+ JsonArray remove(int)
+ int size()
+ boolean isEmpty()
+ JsonValue get(int)
+ List<JsonValue> values()
+ Iterator<JsonValue> iterator()
~ void write(JsonWriter)
+ boolean isArray()
+ JsonArray asArray()
+ int hashCode()
+ boolean equals(Object)
}
class net.sourceforge.plantuml.board.BArray {
- Map<String,BNode> data
- int maxX
- int maxY
+ void put(BNode)
+ BNode getCell(int,int)
- String getKey(int,int)
+ Iterator<BNode> iterator()
+ int getMaxX()
+ int getMaxY()
}
class net.sourceforge.plantuml.graphic.USymbolRectangle {
- SkinParameter skinParameter
+ SkinParameter getSkinParameter()
- void drawRect(UGraphic,double,double,boolean,double,double)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.command.CommandAssumeTransparent {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.sequencediagram.DottedNumber {
- List<Integer> nums
- List<String> separators
+ {static} DottedNumber create(String)
- {static} boolean isDigit(char)
+ String toString()
+ void incrementMinor(int)
+ void incrementIntermediate()
+ void incrementIntermediate(int)
+ String format(DecimalFormat)
}
class net.sourceforge.plantuml.gitlog.GNodeBuilder {
- List<GNode> all
- void merge()
+ Collection<GNode> getAllNodes()
}
class net.sourceforge.plantuml.graphic.USymbolStorage {
+ SkinParameter getSkinParameter()
- void drawStorage(UGraphic,double,double,boolean)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.Url {
- String url
- String tooltip
- String label
- boolean member
- BasicEnsureVisible visible
+ {static} Comparator<Url> SURFACE_COMPARATOR
+ {static} boolean isLatex(String)
+ boolean isLatex()
+ String getUrl()
+ String getTooltip()
+ String getLabel()
+ String toString()
+ String getCoords(double)
+ void setMember(boolean)
+ boolean isMember()
+ void ensureVisible(double,double)
+ boolean hasData()
}
class net.sourceforge.plantuml.skin.CircleInterface {
- float thickness
- double headDiam
- HColor backgroundColor
- HColor foregroundColor
+ void drawU(UGraphic)
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
}
class net.sourceforge.plantuml.real.RealMiddle2 {
- RealMoveable p1
- RealMoveable p2
~ double getCurrentValueInternal()
+ Real addAtLeast(double)
+ void ensureBiggerThan(Real)
~ void move(double)
}
class net.sourceforge.plantuml.ugraphic.hand.UGraphicHandwritten {
- Random rnd
+ void draw(UShape)
- void drawHand(UPath)
- void drawHand(DotPath)
- void drawHand(UPolygon)
- void drawHand(URectangle)
- void drawHand(ULine)
- void drawHand(UEllipse)
+ UGraphic apply(UChange)
}
class net.sourceforge.plantuml.api.NiceNumber {
+ {static} int getNicer(int)
+ {static} String format(long)
}
class net.sourceforge.plantuml.error.PSystemErrorUtils {
+ {static} PSystemError buildV2(UmlSource,ErrorUml,List<String>,List<StringLocated>)
+ {static} PSystemError merge(Collection<PSystemError>)
- {static} PSystemErrorV2 mergeV2(List<PSystemErrorV2>)
+ {static} boolean isDiagramError(Class<? extends Diagram>)
}
class net.sourceforge.plantuml.svek.SvekResult {
- Rose rose
- DotData dotData
- DotStringFactory dotStringFactory
- MinMax minMax
+ void drawU(UGraphic)
- ColorParam getArrowColorParam()
- StyleSignature getDefaultStyleDefinition(Stereotype)
+ HColor getBackcolor()
+ Dimension2D calculateDimension(StringBounder)
+ ShapeType getShapeType()
+ Margins getShield(StringBounder)
+ boolean isHidden()
+ double getOverscanX(StringBounder)
}
class net.sourceforge.plantuml.graphic.ExposantChange {
- FontPosition fontPosition
+ FontConfiguration apply(FontConfiguration)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityCrowfoot {
- Point2D contact
- double angle
- Side side
+ Point2D somePoint()
+ void drawU(UGraphic)
- {static} void drawLine(UGraphic,double,double,Point2D,Point2D)
}
class net.sourceforge.plantuml.sprite.StdlibDiagramFactory {
# List<Command> createCommands()
+ StdlibDiagram createEmptyDiagram(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.Run {
- {static} Cypher cypher
- {static} String commandLine
- {static} String httpProtocol
- {static} String httpsProtocol
+ {static} void main(String[])
+ {static} String getCommandLine()
- {static} void saveCommandLine(String[])
+ {static} void forceOpenJdkResourceLoad()
+ {static} boolean isOpenJdkRunning()
- {static} void encodeSprite(List<String>)
- {static} String getSpriteName(String)
- {static} String getSpriteNameInternal(String)
- {static} void goFtp(Option)
- {static} void goPicoweb(Option)
+ {static} void printFonts()
- {static} void managePipe(Option,ErrorStatus)
- {static} void manageAllFiles(Option,ErrorStatus)
- {static} void processArgs(Option,ErrorStatus)
- {static} void multithread(Option,ErrorStatus)
- {static} void foundNbFiles(int)
- {static} void incDone(boolean)
- {static} void incTotal(int)
- {static} void manageFileInternal(File,Option,ErrorStatus)
- {static} void extractPreproc(Option,ISourceFileReader)
- {static} void hasErrors(File,List<GeneratedImage>,ErrorStatus,Stdrpt)
}
class net.sourceforge.plantuml.asciiart.TextStringBounder {
# Dimension2D calculateDimensionInternal(UFont,String)
}
class net.sourceforge.plantuml.help.CommandHelpSkinparam {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(Help,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.code.deflate.ByteBitInputStream {
- InputStream input
- int currentByte
- int numBitsRemaining
+ int getBitPosition()
+ int readByte()
+ int read()
+ int readNoEof()
+ void close()
}
class net.sourceforge.plantuml.StdrptV1 {
+ void printInfo(PrintStream,Diagram)
+ void errorLine(int,File)
- void out(PrintStream,PSystemError)
- boolean empty(PSystemError)
+ void finalMessage(ErrorStatus)
}
class net.sourceforge.plantuml.ugraphic.PlacementStrategyY1Y2Center {
+ Map<TextBlock,Point2D> getPositions(double,double)
}
class net.sourceforge.plantuml.argon2.Argon2Factory {
+ {static} Argon2 create()
}
class net.sourceforge.plantuml.svek.image.EntityImageStateEmptyDescription {
- {static} int MIN_WIDTH
- {static} int MIN_HEIGHT
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
}
interface net.sourceforge.plantuml.mindmap.Finger {
+ double getPhalanxThickness(StringBounder)
+ double getNailThickness(StringBounder)
+ double getFullThickness(StringBounder)
+ double getPhalanxElongation(StringBounder)
+ double getNailElongation(StringBounder)
+ double getFullElongation(StringBounder)
+ void doNotDrawFirstPhalanx()
}
class net.sourceforge.plantuml.json.Json {
+ {static} JsonValue NULL
+ {static} JsonValue TRUE
+ {static} JsonValue FALSE
+ {static} JsonValue value(int)
+ {static} JsonValue value(long)
+ {static} JsonValue value(float)
+ {static} JsonValue value(double)
+ {static} JsonValue value(String)
+ {static} JsonValue value(boolean)
+ {static} JsonArray array()
+ {static} JsonArray array(int)
+ {static} JsonArray array(long)
+ {static} JsonArray array(float)
+ {static} JsonArray array(double)
+ {static} JsonArray array(boolean)
+ {static} JsonArray array(String)
+ {static} JsonObject object()
+ {static} JsonValue parse(String)
+ {static} JsonValue parse(Reader)
- {static} String cutOffPointZero(String)
}
class net.sourceforge.plantuml.json.Json.DefaultHandler {
# JsonValue value
+ JsonArray startArray()
+ JsonObject startObject()
+ void endNull()
+ void endBoolean(boolean)
+ void endString(String)
+ void endNumber(String)
+ void endArray(JsonArray)
+ void endObject(JsonObject)
+ void endArrayValue(JsonArray)
+ void endObjectValue(JsonObject,String)
~ JsonValue getValue()
}
class net.sourceforge.plantuml.svek.GraphvizCrash {
- TextBlock text1
- BufferedImage flashCode
- String text
- boolean graphviz244onWindows
+ {static} List<String> anErrorHasOccured(Throwable,String)
- {static} int lines(String)
+ {static} void checkOldVersionWarning(List<String>)
+ {static} void pleaseGoTo(List<String>)
+ {static} void youShouldSendThisDiagram(List<String>)
+ {static} void thisMayBeCaused(List<String>)
- List<String> init(Throwable)
- List<String> getText2()
- List<String> getText3()
+ {static} void addDecodeHint(List<String>)
+ {static} void addProperties(List<String>)
+ boolean isHidden()
+ HColor getBackcolor()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- TextBlock getMain()
+ ShapeType getShapeType()
+ Margins getShield(StringBounder)
+ double getOverscanX(StringBounder)
}
class net.sourceforge.plantuml.eps.PostScriptCommandQuadTo {
- double x1
- double y1
- double x2
- double y2
+ String toPostString()
}
class net.sourceforge.plantuml.mda.MDADiagramImpl {
- Collection<MDAPackage> packages
+ {static} MDADiagram create(String)
+ Collection<MDAPackage> getPackages()
}
class net.sourceforge.plantuml.ugraphic.comp.CompressionTransform {
- List<Slot> all
+ double transform(double)
- double getCompressDelta(double)
}
class net.sourceforge.plantuml.tim.TFunctionImpl {
- TFunctionSignature signature
- List<TFunctionArgument> args
- List<StringLocated> body
- boolean unquoted
- TFunctionType functionType
- String legacyDefinition
- boolean containsReturn
+ boolean canCover(int,Set<String>)
- TMemory getNewMemory(TMemory,List<TValue>,Map<String,TValue>)
+ String toString()
+ void addBody(StringLocated)
+ void executeProcedure(TContext,TMemory,LineLocation,String)
+ void executeProcedureInternal(TContext,TMemory,List<TValue>,Map<String,TValue>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
- TValue executeReturnLegacyDefine(LineLocation,TContext,TMemory,List<TValue>)
+ TFunctionType getFunctionType()
+ TFunctionSignature getSignature()
+ void setLegacyDefinition(String)
+ boolean isUnquoted()
+ boolean hasBody()
+ void finalizeEnddefinelong()
+ boolean doesContainReturn()
}
class net.sourceforge.plantuml.svek.ShapePseudoImpl {
- String uid
- double width
- double height
+ String getUid()
+ void appendShape(StringBuilder,StringBounder)
+ double getMaxWidthFromLabelForEntryExit(StringBounder)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseParticipant {
- HColor back
- HColor foregroundColor
- double deltaShadow
- double roundCorner
- double diagonalCorner
- UStroke stroke
- double minWidth
- boolean collections
- double padding
# void drawInternalU(UGraphic,Area)
- double getDeltaCollection()
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
# double getPureTextWidth(StringBounder)
- double suppWidth(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandCase {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandAutoactivate {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.openiconic.PSystemListOpenIconic {
# UDrawable getRootDrawable(FileFormatOption)
- InputStream getRessourceAllTxt()
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.NewpagedDiagram {
- List<Diagram> diagrams
+ String toString()
+ Diagram getLastDiagram()
+ CommandExecutionResult executeCommand(Command,BlocLines)
- int size()
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
+ int getNbImages()
+ DiagramDescription getDescription()
+ String getWarningOrError()
+ void makeDiagramReady()
+ String checkFinalError()
+ List<Diagram> getDiagrams()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityDoubleLine {
- Point2D contact
- double angle
- double lineHeight
+ Point2D somePoint()
+ void drawU(UGraphic)
- {static} void drawLine(UGraphic,double,double,Point2D,Point2D)
}
class net.sourceforge.plantuml.project.draw.TaskDrawDiamond {
~ StyleSignature getStyleSignature()
+ double getHeightMax(StringBounder)
# double getShapeHeight(StringBounder)
+ void drawTitle(UGraphic,LabelStrategy,double,double)
# TextBlock getTitle()
+ void drawU(UGraphic)
- UGraphic applyColors(UGraphic)
- void drawShape(UGraphic)
+ FingerPrint getFingerPrintNote(StringBounder)
+ FingerPrint getFingerPrint(StringBounder)
- UShape getDiamond(StringBounder)
+ double getX1(TaskAttribute)
+ double getX2(TaskAttribute)
}
class net.sourceforge.plantuml.text.RichText {
+ {static} boolean isRich(String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal {
- double xSeparation
- List<Ftile> tiles
- Ftile tile2
- List<Ftile> diamonds
- List<Ftile> couples
- Rainbow arrowColor
- {static} List<Ftile> alignDiamonds(List<Ftile>,StringBounder)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
~ {static} Ftile create(Swimlane,HColor,HColor,Rainbow,FtileFactory,ConditionStyle,List<Branch>,Branch,FontConfiguration,LinkRendering,LinkRendering,FontConfiguration)
- {static} double getYdiamontOutToLeft(FtileGeometry,StringBounder)
+ Collection<Ftile> getMyChildren()
+ UTranslate getTranslateFor(Ftile,StringBounder)
- UTranslate getTranslate2(StringBounder)
- UTranslate getTranslateDiamond1(Ftile,StringBounder)
- UTranslate getTranslate1(Ftile,StringBounder)
- UTranslate getTranslateCouple1(Ftile,StringBounder)
+ void drawU(UGraphic)
- FtileGeometry calculateDimensionInternal(StringBounder)
- double getDiamondsHeight(StringBounder)
# FtileGeometry calculateDimensionFtile(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionHorizontal {
- Rainbow color
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionIn {
- Rainbow arrowColor
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionLastElseIn {
- Rainbow arrowColor
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionLastElseOut {
- Rainbow arrowColor
- TextBlock out2
- int nbOut
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionVerticalIn {
- Rainbow color
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionVerticalOut {
- Rainbow color
- TextBlock out2
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionHline {
- Rainbow arrowColor
+ void drawU(UGraphic)
- Double getLeftOut(StringBounder)
- double[] getMinmax(StringBounder,double,List<Ftile>,Swimlane,List<Swimlane>)
- double[] getMinmaxSimple(StringBounder,double,List<Ftile>)
- int getFirstSwimlane(StringBounder,List<Ftile>,List<Swimlane>)
- int getLastSwimlane(StringBounder,List<Ftile>,List<Swimlane>)
- boolean atLeastOne(StringBounder,Swimlane,List<Ftile>)
- boolean ftileDoesOutcomeInThatSwimlane(Ftile,Swimlane)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseReference {
- int cornersize
- TextBlock textHeader
- double heightFooter
- double xMargin
- HorizontalAlignment position
- SymbolContext symbolContextHeader
- SymbolContext symbolContextBody
# void drawInternalU(UGraphic,Area)
- double getHeaderHeight(StringBounder)
- double getHeaderWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.command.CommandMultilinesLegend {
- {static} IRegex getRegexConcat()
+ String getPatternEnd()
# CommandExecutionResult executeNow(TitledDiagram,BlocLines)
}
class net.sourceforge.plantuml.FileImageData {
+ {static} int ERROR
+ {static} int CRASH
- SFile file
- ImageData imageData
+ SFile getFile()
+ ImageData getImageData()
+ int getStatus()
}
interface net.sourceforge.plantuml.oregon.Keyboard {
~ String input()
~ boolean hasMore()
}
class net.sourceforge.plantuml.project.command.NaturalCommand {
- Sentence sentence
# CommandExecutionResult executeArg(GanttDiagram,LineLocation,RegexResult)
+ {static} NaturalCommand create(Sentence)
}
class net.sourceforge.plantuml.sequencediagram.teoz.TeozLayer {
- PngTitler titler
- Dimension2D dimension
- FontParam param
+ Dimension2D calculateDimension(StringBounder)
+ FontParam getParam()
+ void drawU(UGraphic)
}
interface net.sourceforge.plantuml.svek.TextBlockBackcolored {
~ HColor getBackcolor()
}
class net.sourceforge.plantuml.AParentFolderRegular {
- SFile dir
+ String toString()
+ AFile getAFile(String)
}
class net.sourceforge.plantuml.anim.AnimationScript {
+ String eval(String)
}
class net.sourceforge.plantuml.graphic.TextBlockBordered {
- double cornersize
- HColor backgroundColor
- HColor borderColor
- double top
- double right
- double bottom
- double left
- UStroke stroke
- boolean withShadow
- TextBlock textBlock
- double getTextHeight(StringBounder)
- double getPureTextWidth(StringBounder)
- double getTextWidth(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
- UGraphic applyStroke(UGraphic)
- boolean noBorder()
+ void drawU(UGraphic)
- Shadowable getPolygonNormal(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit {
- double width
- double first
- double last
- double height
- HColor colorBar
- Swimlane swimlane
+ Collection<Ftile> getMyChildren()
+ void setGeom(double,double,double)
# FtileGeometry calculateDimensionFtile(StringBounder)
+ void drawU(UGraphic)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.Worm {
- List<Point2D.Double> points
- boolean ignoreForCompression
+ boolean isPureHorizontal()
+ Worm cloneEmpty()
+ void setIgnoreForCompression()
+ void drawInternalOneColor(UPolygon,UGraphic,HtmlColorAndStyle,double,Direction,UPolygon)
- void drawLine(UGraphic,Line2D,Direction)
- void drawLine(UGraphic,double,double,double,double,Direction)
+ Worm move(double,double)
+ Worm moveFirstPoint(UTranslate)
+ Worm moveLastPoint(UTranslate)
+ String toString()
+ void addPoint(double,double)
+ void addPoint(Point2D)
+ Worm translate(UTranslate)
~ SnakeDirection getDirection()
~ String getDirectionsCode()
- List<Direction> getPatternAt(int)
- boolean isForwardAndBackwardAt(int)
- Direction getDirectionAtPoint(int)
+ Iterator<Point2D.Double> iterator()
+ boolean doesHorizontalCross(MinMax)
+ int size()
+ Point2D.Double get(int)
+ void addAll(Worm)
+ void remove(int)
+ void add(int,Point2D.Double)
- Point2D getFirst()
+ Point2D getLast()
+ Worm merge(Worm,MergeStrategy)
- void mergeMe(MergeStrategy)
- boolean removeNullVector()
- boolean removeRedondantDirection()
- boolean removePattern1()
- boolean removePattern7()
- boolean removePattern2()
- boolean removePattern3()
- boolean removePattern4()
- boolean removePattern5()
- boolean removePattern6()
- boolean removePattern8()
}
interface net.sourceforge.plantuml.graphic.UDrawable {
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.project.draw.TimeHeaderMonthly {
+ double getTimeHeaderHeight()
+ double getTimeFooterHeight()
+ void drawTimeHeader(UGraphic,double)
+ void drawTimeFooter(UGraphic)
- void drawYears(UGraphic)
- void drawMonths(UGraphic)
- void printYear(UGraphic,MonthYear,double,double)
- void printMonth(UGraphic,MonthYear,double,double)
- void drawVbar(UGraphic,double,double,double)
- void printLeft(UGraphic,TextBlock,double)
+ double getFullHeaderHeight()
}
class net.sourceforge.plantuml.sequencediagram.graphic.Constraint {
- Pushable p1
- Pushable p2
- double value
+ Pushable getParticipant1()
+ Pushable getParticipant2()
+ double getValue()
+ void ensureValue(double)
+ void push(double)
+ String toString()
}
interface net.sourceforge.plantuml.cucadiagram.EntityGender {
+ boolean contains(IEntity)
}
class net.sourceforge.plantuml.creole.atom.AtomWithMargin {
- double marginY1
- double marginY2
- Atom atom
+ List<Atom> splitInTwo(StringBounder,double)
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
}
interface net.sourceforge.plantuml.ugraphic.UShape {
}
class net.sourceforge.plantuml.eggs.PSystemAppleTwoFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.SplitParam {
- HColor borderColor
- HColor externalColor
- int externalMargin
+ boolean isSet()
+ int getExternalMargin()
+ Color getBorderColor()
+ Color getExternalColor()
}
interface net.sourceforge.plantuml.code.Transcoder {
+ String encode(String)
+ String decode(String)
}
class net.sourceforge.plantuml.graphic.SingleLine {
- List<TextBlock> blocs
- HorizontalAlignment horizontalAlignment
+ {static} SingleLine withSomeHtmlTag(String,FontConfiguration,HorizontalAlignment,SpriteContainer)
+ {static} SingleLine rawText(String,FontConfiguration)
+ Dimension2D calculateDimension(StringBounder)
- double maxDeltaY(UGraphic)
+ void drawU(UGraphic)
+ HorizontalAlignment getHorizontalAlignment()
}
abstract class net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract {
# HorizontalAlignment align
# FontConfiguration titleConfig
# TextBlock area
+ {static} boolean isBlockSeparator(CharSequence)
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
# TextBlock getTitle(String,ISkinSimple)
# {abstract}TextBlock getArea(StringBounder)
# {abstract}double getMarginX()
# TextBlock decorate(StringBounder,TextBlock,char,TextBlock)
}
class net.sourceforge.plantuml.AnimatedGifEncoder {
# int width
# int height
# Color transparent
# int transIndex
# int repeat
# int delay
# boolean started
# OutputStream out
# BufferedImage image
# byte[] pixels
# byte[] indexedPixels
# int colorDepth
# byte[] colorTab
# boolean[] usedEntry
# int palSize
# int dispose
# boolean closeStream
# boolean firstFrame
# boolean sizeSet
# int sample
+ void setDelay(int)
+ void setDispose(int)
+ void setRepeat(int)
+ void setTransparent(Color)
+ boolean addFrame(BufferedImage)
+ boolean finish()
+ void setFrameRate(float)
+ void setQuality(int)
+ void setSize(int,int)
+ boolean start(OutputStream)
# void analyzePixels()
# int findClosest(Color)
# void getImagePixels()
# void writeGraphicCtrlExt()
# void writeImageDesc()
# void writeLSD()
# void writeNetscapeExt()
# void writePalette()
# void writePixels()
# void writeShort(int)
# void writeString(String)
}
class net.sourceforge.plantuml.NeuQuant {
# {static} int netsize
# {static} int prime1
# {static} int prime2
# {static} int prime3
# {static} int prime4
# {static} int minpicturebytes
# {static} int maxnetpos
# {static} int netbiasshift
# {static} int ncycles
# {static} int intbiasshift
# {static} int intbias
# {static} int gammashift
# {static} int gamma
# {static} int betashift
# {static} int beta
# {static} int betagamma
# {static} int initrad
# {static} int radiusbiasshift
# {static} int radiusbias
# {static} int initradius
# {static} int radiusdec
# {static} int alphabiasshift
# {static} int initalpha
# int alphadec
# {static} int radbiasshift
# {static} int radbias
# {static} int alpharadbshift
# {static} int alpharadbias
# byte[] thepicture
# int lengthcount
# int samplefac
# int[][] network
# int[] netindex
# int[] bias
# int[] freq
# int[] radpower
+ byte[] colorMap()
+ void inxbuild()
+ void learn()
+ int map(int,int,int)
+ byte[] process()
+ void unbiasnet()
# void alterneigh(int,int,int,int,int)
# void altersingle(int,int,int,int,int)
# int contest(int,int,int)
}
class net.sourceforge.plantuml.LZWEncoder {
- {static} int EOF
- int imgW
- byte[] pixAry
- int initCodeSize
- int remaining
- int curPixel
~ {static} int BITS
~ {static} int HSIZE
~ int n_bits
~ int maxbits
~ int maxcode
~ int maxmaxcode
~ int[] htab
~ int[] codetab
~ int hsize
~ int free_ent
~ boolean clear_flg
~ int g_init_bits
~ int ClearCode
~ int EOFCode
~ int cur_accum
~ int cur_bits
~ int[] masks
~ int a_count
~ byte[] accum
~ void char_out(byte,OutputStream)
~ void cl_block(OutputStream)
~ void cl_hash(int)
~ void compress(int,OutputStream)
~ void encode(OutputStream)
~ void flush_char(OutputStream)
~ int MAXCODE(int)
- int nextPixel()
~ void output(int,OutputStream)
}
class net.sourceforge.plantuml.argon2.model.Position {
+ int pass
+ int lane
+ int slice
+ int index
}
class net.sourceforge.plantuml.ugraphic.ShadowManager {
- int c1
- int c2
+ double[] getShadowDeltaPoints(double,double,double[])
+ Color getColor(double,double)
}
abstract class net.sourceforge.plantuml.sequencediagram.AbstractEvent {
+ boolean isParallel()
+ Url getUrl()
+ boolean hasUrl()
}
class net.sourceforge.plantuml.graphic.GraphicStrings {
- double margin
- HColor background
- {static} HColor hyperlinkColor
- {static} boolean useUnderlineForHyperlink
- List<String> strings
- BufferedImage image
- double imagePadding
- GraphicPosition position
- FontConfiguration fontConfiguration
- CreoleMode mode
+ {static} IEntityImage createForError(List<String>,boolean)
- {static} HColor getForeColor(boolean)
- {static} HColor getBackColor(boolean)
+ {static} TextBlockBackcolored createGreenOnBlackMonospaced(List<String>)
+ {static} TextBlockBackcolored createBlackOnWhite(List<String>)
+ {static} TextBlockBackcolored createBlackOnWhiteMonospaced(List<String>)
+ {static} TextBlockBackcolored createBlackOnWhite(List<String>,BufferedImage,GraphicPosition)
+ {static} FontConfiguration sansSerif12(HColor)
+ {static} FontConfiguration sansSerif14(HColor)
- {static} FontConfiguration monospaced14(HColor)
- TextBlock getTextBlock()
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
- Dimension2D calculateDimensionInternal(StringBounder)
+ ShapeType getShapeType()
+ HColor getBackcolor()
+ Margins getShield(StringBounder)
+ boolean isHidden()
+ double getOverscanX(StringBounder)
}
class net.sourceforge.plantuml.salt.element.TopFirst {
+ int compare(Cell,Cell)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionSimple {
- boolean killed
- Display label
- Colors colors
- LinkRendering inlinkRendering
- BoxStyle style
- Url url
- Stereotype stereotype
+ boolean containsBreak()
+ Ftile createFtile(FtileFactory)
+ void add(Instruction)
+ boolean kill()
+ LinkRendering getInLinkRendering()
}
class net.sourceforge.plantuml.golem.Square {
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseArrow {
- HorizontalAlignment messagePosition
- boolean niceArrow
- boolean belowForResponse
+ {static} double spaceCrossX
+ {static} double diamCircle
+ {static} double thinCircle
+ void drawInternalU(UGraphic,Area)
+ double getPosArrow(StringBounder)
- boolean isBelowForResponse()
- void drawDressing1(UGraphic,double,ArrowDressing,ArrowDecoration)
- void drawDressing2(UGraphic,double,ArrowDressing,ArrowDecoration)
- UPolygon getPolygonNormal(ArrowPart,double)
- UPolygon getPolygonReverse(ArrowPart)
+ Point2D getStartPoint(StringBounder,Dimension2D)
+ Point2D getEndPoint(StringBounder,Dimension2D)
+ double getYPoint(StringBounder)
- ArrowDirection getDirection2()
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.project.lang.SentenceHappensDate {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.ugraphic.UImageSvg {
- String svg
- double scale
+ String getMD5Hex()
+ String getSvg(boolean)
- String extractBackground(String)
- String extractSvgStyle()
+ int getData(String)
+ int getHeight()
+ int getWidth()
+ double getScale()
}
interface net.sourceforge.plantuml.ugraphic.UGraphic2 {
+ void writeImageTOBEMOVED(OutputStream,String,int)
}
class net.sourceforge.plantuml.asciiart.ComponentTextLine {
- {static} int MAGIC_NUMBER
- char using
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.command.regex.MatcherIterator {
- int cpt
- Matcher2 matcher
+ boolean hasNext()
+ String next()
+ void remove()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandIfLegacy1 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.tim.iterator.CodePosition {
}
class net.sourceforge.plantuml.asciiart.ComponentTextDivider {
- ComponentType type
- Display stringsToDisplay
- FileFormat fileFormat
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.ZadBuilder {
- StringBounder stringBounder
- UTranslate translate
- Context context
+ UGraphic apply(UChange)
+ StringBounder getStringBounder()
+ UParam getParam()
+ void draw(UShape)
- void drawRectangle(URectangle)
+ ColorMapper getColorMapper()
+ void flushUg()
+ boolean matchesProperty(String)
+ double dpiFactor()
+ Zad getZad()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.ZadBuilder.Context {
- Zad zad
}
class net.sourceforge.plantuml.code.TranscoderUtil {
+ {static} Transcoder getDefaultTranscoder()
+ {static} Transcoder getDefaultTranscoderProtected()
+ {static} Transcoder getDefaultTranscoderProtectedPure()
}
class net.sourceforge.plantuml.ugraphic.color.HUSLColorConverter {
- {static} double[][] m
- {static} double[][] minv
- {static} double refY
- {static} double refU
- {static} double refV
- {static} double kappa
- {static} double epsilon
- {static} List<double[]> getBounds(double)
- {static} double intersectLineLine(double[],double[])
- {static} double distanceFromPole(double[])
- {static} Length lengthOfRayUntilIntersect(double,double[])
- {static} double maxSafeChromaForL(double)
- {static} double maxChromaForLH(double,double)
- {static} double dotProduct(double[],double[])
- {static} double round(double,int)
- {static} double fromLinear(double)
- {static} double toLinear(double)
- {static} int[] rgbPrepare(double[])
+ {static} double[] xyzToRgb(double[])
+ {static} double[] rgbToXyz(double[])
- {static} double yToL(double)
- {static} double lToY(double)
+ {static} double[] xyzToLuv(double[])
+ {static} double[] luvToXyz(double[])
+ {static} double[] luvToLch(double[])
+ {static} double[] lchToLuv(double[])
+ {static} double[] hsluvToLch(double[])
+ {static} double[] lchToHsluv(double[])
+ {static} double[] hpluvToLch(double[])
+ {static} double[] lchToHpluv(double[])
+ {static} String rgbToHex(double[])
+ {static} double[] hexToRgb(String)
+ {static} double[] lchToRgb(double[])
+ {static} double[] rgbToLch(double[])
+ {static} double[] hsluvToRgb(double[])
+ {static} double[] rgbToHsluv(double[])
+ {static} double[] hpluvToRgb(double[])
+ {static} double[] rgbToHpluv(double[])
+ {static} String hsluvToHex(double[])
+ {static} String hpluvToHex(double[])
+ {static} double[] hexToHsluv(String)
+ {static} double[] hexToHpluv(String)
}
class net.sourceforge.plantuml.ugraphic.color.HUSLColorConverter.Length {
~ boolean greaterEqualZero
~ double length
}
class net.sourceforge.plantuml.graphic.USymbolStack {
+ SkinParameter getSkinParameter()
- void drawQueue(UGraphic,double,double,boolean,double)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.code.CompressionBrotli {
+ byte[] compress(byte[])
+ ByteArray decompress(byte[])
}
class net.sourceforge.plantuml.graphic.TextBlockRecentred {
- TextBlock textBlock
+ void drawU(UGraphic)
+ MinMax getMinMax(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
+ HColor getBackcolor()
}
class net.sourceforge.plantuml.graphic.TextBlockArrow {
- double size
- Direction arrow
- HColor color
+ void drawU(UGraphic)
- UPolygon getTriangle(int)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile {
- {static} int EXTERNAL_MARGINX1
- {static} int EXTERNAL_MARGINX2
- {static} int MARGINX
- {static} int MARGINY_MAGIC
- List<Tile> tiles
- Real min
- Real max
- GroupingStart start
- Rose skin
- ISkinParam skinParam
- Display display
- double bodyHeight
+ Event getEvent()
+ double getContactPointRelative()
- Component getComponent(StringBounder)
- Dimension2D getPreferredDimensionIfEmpty(StringBounder)
+ void drawU(UGraphic)
- double getTotalHeight(StringBounder)
- void drawAllElses(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
+ {static} double fillPositionelTiles(StringBounder,double,List<Tile>,List<CommonTile>,List<CommonTile>)
- double getHeaderHeight(StringBounder)
- {static} List<Tile> mergeParallel(StringBounder,List<Tile>)
- {static} List<Tile> removeEmptyCloseToParallel(List<Tile>)
- {static} void removeHeadEmpty(List<Tile>)
+ {static} boolean isParallel(Tile)
~ void addYNewPages(Collection<Double>)
}
class net.sourceforge.plantuml.svek.image.EntityImageActivity {
- double shadowing
+ {static} int CORNER
- TextBlock desc
- {static} int MARGIN
- Url url
- Bibliotekon bibliotekon
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- UGraphic drawOctagon(UGraphic)
- UGraphic drawNormal(UGraphic)
+ StyleSignature getDefaultStyleDefinition()
- UGraphic applyColors(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.svek.image.EntityImageArcCircle {
- TextBlock name
- TextBlock stereo
+ Dimension2D calculateDimension(StringBounder)
- Dimension2D getStereoDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.sequencediagram.graphic.Stairs {
- List<Double> ys
- List<Integer> values
- Map<Double,Integer> cache
+ String toString()
+ void addStep(double,int)
+ int getMaxValue()
+ List<Double> getYs()
- double getLastY()
+ int getValue(double)
- int getValueSlow(double)
+ int getLastValue()
}
class net.sourceforge.plantuml.graphic.AddStyle {
- FontStyle style
- HColor extendedColor
+ FontConfiguration apply(FontConfiguration)
}
class net.sourceforge.plantuml.argon2.exception.Argon2Exception {
}
class net.sourceforge.plantuml.braille.DriverNoneBraille {
+ void draw(UShape,double,double,ColorMapper,UParam,BrailleGrid)
}
class net.sourceforge.plantuml.project.timescale.TimeScaleWink {
- double scale
+ double getStartingPosition(Day)
+ double getEndingPosition(Day)
+ double getWidth(Day)
+ boolean isBreaking(Day)
}
class net.sourceforge.plantuml.asciiart.ComponentTextParticipant {
- ComponentType type
- Display stringsToDisplay
- FileFormat fileFormat
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.WormTexted {
- Worm worm
- TextBlock textBlock
+ Iterator<Point2D.Double> iterator()
+ void addPoint(double,double)
+ void drawInternalOneColor(UPolygon,UGraphic,HtmlColorAndStyle,double,Direction,UPolygon)
+ Worm getWorm()
+ Point2D get(int)
+ int size()
+ WormTexted merge(WormTexted,MergeStrategy)
+ void addAll(WormTexted)
+ void setLabel(TextBlock)
+ boolean isEmptyText(StringBounder)
- Point2D getTextBlockPosition(StringBounder)
+ double getMaxX(StringBounder)
~ void drawInternalLabel(UGraphic)
+ void copyLabels(WormTexted)
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryButton {
- DataSource dataSource
- ISkinSimple spriteContainer
+ Terminated<Element> create()
+ boolean ready()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorAssembly {
- Rose rose
+ Ftile assembly(Ftile,Ftile)
}
class net.sourceforge.plantuml.svek.FrontierCalculator {
- {static} double DELTA
- ClusterPosition core
- ClusterPosition initial
+ ClusterPosition getSuggestedPosition()
+ void ensureMinWidth(double)
}
class net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt {
- UmlCharArea charArea
# AbstractCommonUGraphic copyUGraphic()
+ StringBounder getStringBounder()
+ void draw(UShape)
+ UmlCharArea getCharArea()
- int getDy()
- int getDx()
+ Dimension2D getDimension()
+ void writeImageTOBEMOVED(OutputStream,String,int)
}
class net.sourceforge.plantuml.project.lang.SubjectDaysAsDates {
+ IRegex toRegex()
- IRegex regexTo()
- IRegex regexAnd()
- IRegex regexThen()
+ Failable<DaysAsDates> getMe(GanttDiagram,RegexResult)
- Day getDate(RegexResult,String)
+ Collection<? extends SentenceSimple> getSentences()
}
class net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.Close {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.Open {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.InColor {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.Named {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.elk.proxy.graph.ElkNode {
+ ElkNode getParent()
+ double getX()
+ double getY()
+ Collection<ElkLabel> getLabels()
+ double getWidth()
+ double getHeight()
+ void setDimensions(double,double)
}
abstract class net.sourceforge.plantuml.ugraphic.UGraphicNo {
+ void startUrl(Url)
+ void startGroup(UGroupType,String)
+ void closeUrl()
+ void closeGroup()
+ HColor getDefaultBackground()
}
class net.sourceforge.plantuml.command.CommandExecutionResult {
- String error
- AbstractPSystem newDiagram
- List<String> debugLines
- int score
+ CommandExecutionResult withDiagram(AbstractPSystem)
+ String toString()
+ {static} CommandExecutionResult newDiagram(AbstractPSystem)
+ {static} CommandExecutionResult ok()
+ {static} CommandExecutionResult badColor()
+ {static} CommandExecutionResult error(String)
+ {static} CommandExecutionResult error(String,Throwable)
+ {static} List<String> getStackTrace(Throwable)
+ boolean isOk()
+ String getError()
+ int getScore()
+ AbstractPSystem getNewDiagram()
+ List<String> getDebugLines()
}
interface net.sourceforge.plantuml.style.AutomaticCounter {
+ int getNextInt()
}
class net.sourceforge.plantuml.elk.proxy.core.options.CoreOptions {
+ {static} Object DIRECTION
+ {static} Object EDGE_LABELS_INLINE
+ {static} Object NODE_SIZE_CONSTRAINTS
+ {static} Object HIERARCHY_HANDLING
+ {static} Object EDGE_LABELS_PLACEMENT
+ {static} Object EDGE_TYPE
+ {static} Object NODE_LABELS_PLACEMENT
+ {static} Object NODE_SIZE_OPTIONS
+ {static} Object PADDING
}
class net.sourceforge.plantuml.zopfli.BlockSplitter {
~ {static} int split(Cookie,byte[],int,int)
~ {static} int splitLz(Cookie,char[],char[],int)
- {static} int findMinimum(Cookie,char[],char[],int,int)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandRobustConcise {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.bpm.BpmEventGoto {
- String id
+ String getId()
}
class net.sourceforge.plantuml.graphic.TextBlockArrow2 {
- double size
- GuideLine angle
- HColor color
+ void drawU(UGraphic)
- Point2D getPoint(double,double)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.preproc.Defines {
- Map<String,String> environment
- Map<String,Define> values
- Map<String,Collection<Define>> magic
- {static} String DATE
- {static} Pattern datePattern
+ String toString()
+ {static} Defines createEmpty()
+ void copyTo(TMemory)
+ void overrideFilename(String)
+ void importFrom(Defines)
+ Defines cloneMe()
+ {static} Defines createWithFileName(SFile)
+ {static} Defines createWithFileName(java.io.File)
+ {static} Defines createWithMap(Map<String,String>)
+ String getEnvironmentValue(String)
- {static} String nameNoExtension(String)
+ void define(String,List<String>,boolean,AParentFolder)
+ boolean isDefine(String)
+ boolean isTrue(String)
+ void undefine(String)
+ List<String> applyDefines(String)
- String method1(String)
- Map<String,Collection<Define>> getAll()
- String method2(String)
- Set<String> words(String)
- String manageEnvironment(String)
- String manageDate(String)
}
class net.sourceforge.plantuml.mindmap.FingerImpl {
- Display label
- HColor backColor
- String stereotype
- ISkinParam skinParam
- StyleBuilder styleBuilder
- IdeaShape shape
- Direction direction
- int level
- boolean drawPhalanx
- double marginLeft
- double marginRight
- double marginTop
- double marginBottom
- List<FingerImpl> nail
- Tetris tetris
- StyleSignature getDefaultStyleDefinitionNode()
+ StyleSignature getDefaultStyleDefinitionArrow()
+ {static} FingerImpl build(Idea,ISkinParam,Direction)
+ void addInNail(FingerImpl)
+ void drawU(UGraphic)
- HColor getLinkColor()
- UStroke getUStroke()
- void drawLine(UGraphic,Point2D,Point2D)
- Tetris tetris(StringBounder)
- SymetricalTee asSymetricalTee(StringBounder)
- double getX1()
- double getX2()
+ double getX12()
+ double getPhalanxThickness(StringBounder)
+ double getPhalanxElongation(StringBounder)
- TextBlock getPhalanx()
+ double getNailThickness(StringBounder)
+ double getNailElongation(StringBounder)
+ double getFullThickness(StringBounder)
+ double getFullElongation(StringBounder)
+ void doNotDrawFirstPhalanx()
}
class net.sourceforge.plantuml.cucadiagram.dot.DotData {
- List<Link> links
- Collection<ILeaf> leafs
- UmlDiagramType umlDiagramType
- ISkinParam skinParam
- GroupHierarchy groupHierarchy
- IGroup topParent
- PortionShower portionShower
- boolean isHideEmptyDescriptionForState
- DotMode dotMode
- String namespaceSeparator
- Pragma pragma
- ColorMapper colorMapper
- EntityFactory entityFactory
+ EntityFactory getEntityFactory()
+ UmlDiagramType getUmlDiagramType()
+ ISkinParam getSkinParam()
+ GroupHierarchy getGroupHierarchy()
+ List<Link> getLinks()
+ Collection<ILeaf> getLeafs()
+ IGroup getTopParent()
+ boolean isEmpty(IGroup)
+ boolean showPortion(EntityPortion,IEntity)
+ ColorMapper getColorMapper()
+ IGroup getRootGroup()
+ boolean isDegeneratedWithFewEntities(int)
+ boolean isHideEmptyDescriptionForState()
+ DotMode getDotMode()
+ String getNamespaceSeparator()
+ Pragma getPragma()
+ void removeIrrelevantSametail()
- List<Link> getLinksOfThisLeaf(ILeaf)
- ILeaf getLeaf(String)
}
class net.sourceforge.plantuml.cucadiagram.BodyEnhanced1 {
- Display rawBody2
- FontParam fontParam
- ISkinParam skinParam
- boolean lineFirst
- List<Url> urls
- Stereotype stereotype
- ILeaf entity
- boolean inEllipse
- Style style
# double getMarginX()
- {static} boolean isTreeOrTable(String)
# TextBlock getArea(StringBounder)
- {static} List<CharSequence> buildTreeOrTable(String,ListIterator<CharSequence>)
- {static} String purge(String,String)
+ Ports getPorts(StringBounder)
+ List<Url> getUrls()
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
}
class net.sourceforge.plantuml.ugraphic.color.HColorGradient {
- HColor color1
- HColor color2
- char policy
+ HColor getColor1()
+ HColor getColor2()
+ Color getColor(ColorMapper,double)
+ char getPolicy()
}
class net.sourceforge.plantuml.graphic.TextBlockSimple {
- List<Line> lines
- Display texts
- FontConfiguration fontConfiguration
- HorizontalAlignment horizontalAlignment
- SpriteContainer spriteContainer
- double maxMessageSize
- List<Line> getLines(StringBounder)
- void addInLines(StringBounder,String)
- void addSingleLineNoSpace(String)
- void addSingleLine(String)
- double getTextWidth(StringBounder,String)
+ Dimension2D calculateDimension(StringBounder)
# Dimension2D getTextDimension(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.command.CommandLegend {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.cucadiagram.PortionShower {
~ boolean showPortion(EntityPortion,IEntity)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandHSpace {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.Branch {
- InstructionList list
- Display labelTest
- LinkRendering labelPositive
- LinkRendering inlinkRendering
- LinkRendering inlabel
- LinkRendering special
- HColor color
- Ftile ftile
+ StyleSignature getDefaultStyleDefinitionArrow()
+ StyleSignature getDefaultStyleDefinitionDiamond()
+ boolean containsBreak()
+ Collection<WeldingPoint> getWeldingPoints()
+ void add(Instruction)
+ boolean kill()
+ boolean addNote(Display,NotePosition,NoteType,Colors,Swimlane)
+ void setInlinkRendering(LinkRendering)
+ void updateFtile(FtileFactory)
+ Collection<? extends Swimlane> getSwimlanes()
+ Display getLabelPositive()
+ Display getLabelTest()
+ Rainbow getOut()
+ Rainbow getInColor(Rainbow)
+ Display getInlabel()
+ Rainbow getInRainbow(Rainbow)
+ Rainbow getLabelPositiveRainbow(Rainbow)
+ Ftile getFtile()
+ ISkinParam skinParam()
+ HColor getColor()
+ boolean isEmpty()
+ Instruction getLast()
+ boolean isOnlySingleStopOrSpot()
+ void setSpecial(LinkRendering)
+ LinkRendering getSpecial()
}
class net.sourceforge.plantuml.command.note.CommandFactoryNoteOnLink {
- IRegex getRegexConcatSingleLine()
- IRegex getRegexConcatMultiLine()
- {static} ColorParser color()
+ Command<CucaDiagram> createMultiLine(boolean)
+ Command<CucaDiagram> createSingleLine()
- CommandExecutionResult executeInternal(CucaDiagram,BlocLines,RegexResult)
}
class net.sourceforge.plantuml.eggs.PSystemColorsFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.classdiagram.command.CommandLinkClass {
- {static} String SINGLE
- {static} String SINGLE_GUILLEMENT
- {static} String SINGLE2
- {static} String COUPLE
- {static} RegexConcat getRegexConcat(UmlDiagramType)
- {static} ColorParser color()
- {static} String getClassIdentifier()
+ {static} String getSeparator()
# CommandExecutionResult executeArg(AbstractClassOrObjectDiagram,LineLocation,RegexResult)
- IEntity getFoo1(AbstractClassOrObjectDiagram,Code,Ident,Ident)
- boolean isGroupButNotTheCurrentGroup(AbstractClassOrObjectDiagram,Code,Ident)
- Ident removeMemberPartIdentSpecial(AbstractClassOrObjectDiagram,Ident)
- Ident removeMemberPartIdent(AbstractClassOrObjectDiagram,Ident)
- Code removeMemberPartLegacy1972(AbstractClassOrObjectDiagram,Ident)
- void addLink(AbstractClassOrObjectDiagram,Link,String)
- CommandExecutionResult executePackageLink(AbstractClassOrObjectDiagram,RegexResult)
- CommandExecutionResult executeArgSpecial1(AbstractClassOrObjectDiagram,RegexResult)
- CommandExecutionResult executeArgSpecial1972Ident1(AbstractClassOrObjectDiagram,RegexResult)
- CommandExecutionResult executeArgSpecial1972Ident2(AbstractClassOrObjectDiagram,RegexResult)
- CommandExecutionResult executeArgSpecial1972Ident3(AbstractClassOrObjectDiagram,RegexResult)
- CommandExecutionResult executeArgSpecial3(AbstractClassOrObjectDiagram,RegexResult)
- CommandExecutionResult executeArgSpecial2(AbstractClassOrObjectDiagram,RegexResult)
- LinkDecor getDecors1(String)
- LinkDecor getDecors2(String)
- LinkType getLinkType(RegexResult)
- int getQueueLength(RegexResult)
- Direction getDirection(RegexResult)
- String getArrowHead1(RegexResult)
- String getArrowHead2(RegexResult)
- String getArrowHead(RegexResult,String)
- String getFullArrow(RegexResult)
+ {static} String notNull(String)
}
class net.sourceforge.plantuml.svek.EntityDomain {
- double margin
- double radius
- double suppY
- SymbolContext symbolContext
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.color.ColorMapperLightnessInverse {
+ Color toColor(HColor)
}
class net.sourceforge.plantuml.CounterOutputStream {
- int length
- OutputStream os
+ void write(int)
+ void write(byte[])
+ void write(byte[],int,int)
+ int getLength()
+ void flush()
+ void close()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandArrow3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.activitydiagram3.ftile.Connection {
+ Ftile getFtile1()
+ Ftile getFtile2()
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl {
- List<StringLocated> list
- int current
- int countJump
+ StringLocated peek()
+ void next()
+ CodePosition getCodePosition()
+ void jumpToCodePosition(CodePosition)
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl.Position {
~ int pos
}
class net.sourceforge.plantuml.timingdiagram.ChangeState {
- TimeTick when
- String[] states
- String comment
- Colors colors
+ int compareTo(ChangeState)
+ TimeTick getWhen()
+ String[] getStates()
+ String getState()
+ String getComment()
+ HColor getBackColor()
- HColor getLineColor()
+ SymbolContext getContext()
+ boolean isBlank()
+ boolean isCompletelyHidden()
+ boolean isFlat()
}
class net.sourceforge.plantuml.eggs.PSystemPathFactory {
- {static} Pattern2 p
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.flowdiagram.CommandLink {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(FlowDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.svg.DriverLineSvg {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
class net.sourceforge.plantuml.project.lang.SubjectDayAsDate {
+ Failable<Day> getMe(GanttDiagram,RegexResult)
+ Collection<? extends SentenceSimple> getSentences()
+ IRegex toRegex()
}
class net.sourceforge.plantuml.project.lang.SubjectDayAsDate.Close {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectDayAsDate.Open {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectDayAsDate.InColor {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.SkinParamForecolored {
- HColor forecolor
+ HColor getHtmlColor(ColorParam,Stereotype,boolean)
}
class net.sourceforge.plantuml.StdrptNull {
+ void printInfo(PrintStream,Diagram)
+ void finalMessage(ErrorStatus)
+ void errorLine(int,File)
}
class net.sourceforge.plantuml.argon2.Util {
+ {static} String bytesToHexString(byte[])
+ {static} byte[] hexStringToByteArray(String)
+ {static} long littleEndianBytesToLong(byte[])
+ {static} byte[] intToLittleEndianBytes(int)
+ {static} byte[] longToLittleEndianBytes(long)
+ {static} long intToLong(int)
}
class net.sourceforge.plantuml.dedication.Dedications {
- {static} List<Dedication> all
- {static} DedicationCrypted secret(int,String,BigInteger)
- {static} byte[] load(String)
+ {static} BufferedImage get(String)
}
class net.sourceforge.plantuml.svek.GroupPngMakerState {
- CucaDiagram diagram
- IGroup group
- StringBounder stringBounder
- Rose rose
- List<Link> getPureInnerLinks()
+ IEntityImage getImage()
- IEntityImage buildImageForConcurrentState(DotData)
- boolean containsOnlyConcurrentStates(DotData)
- HColor getColor(ColorParam,Stereotype)
}
class net.sourceforge.plantuml.svek.GroupPngMakerState.InnerGroupHierarchy {
+ Set<SuperGroup> getAllSuperGroups()
+ IGroup getRootGroup()
+ SuperGroup getRootSuperGroup()
+ Collection<IGroup> getChildrenGroups(IGroup)
+ boolean isEmpty(IGroup)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBox {
- double padding1
- double padding2
- double paddingTop
- double paddingBottom
- TextBlock tb
- double roundCorner
- double shadowing
- HorizontalAlignment horizontalAlignment
- double minimumWidth
- LinkRendering inRendering
- Swimlane swimlane
- BoxStyle boxStyle
- HColor borderColor
- HColor backColor
- Style style
- String print
+ {static} StyleSignature getDefaultStyleDefinitionActivity()
+ {static} StyleSignature getDefaultStyleDefinitionArrow()
+ LinkRendering getInLinkRendering()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ {static} FtileBox create(ISkinParam,Display,Swimlane,BoxStyle,Stereotype)
+ {static} FtileBox createWbs(StyleBuilder,ISkinParam,Display,StyleSignature)
+ {static} FtileBox createWbs(Style,ISkinParam,Display)
+ {static} FtileBox createMindMap(StyleBuilder,ISkinParam,Display,StyleSignature)
+ String toString()
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
+ Collection<Ftile> getMyChildren()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBox.MyStencil {
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
interface net.sourceforge.plantuml.tim.expression.TokenIterator {
+ Token nextToken()
+ Token peekToken()
+ boolean hasMoreTokens()
}
class net.sourceforge.plantuml.cucadiagram.BodierLikeClassOrObject {
- List<CharSequence> rawBody
- Set<VisibilityModifier> hides
- LeafType type
- List<Member> methodsToDisplay
- List<Member> fieldsToDisplay
- ILeaf leaf
+ void muteClassToObject()
+ void setLeaf(ILeaf)
+ void addFieldOrMethod(String)
- boolean isBodyEnhanced()
- boolean isMethod(CharSequence)
+ Display getMethodsToDisplay()
- boolean isMethod(int,List<CharSequence>)
+ Display getFieldsToDisplay()
- void removeFinalEmptyMembers(List<Member>)
+ boolean hasUrl()
- List<CharSequence> rawBodyWithoutHidden()
+ TextBlock getBody(FontParam,ISkinParam,boolean,boolean,Stereotype,Style)
+ List<CharSequence> getRawBody()
}
abstract class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate {
- Ftile ftile
+ String toString()
+ LinkRendering getOutLinkRendering()
+ LinkRendering getInLinkRendering()
+ void drawU(UGraphic)
+ FtileGeometry calculateDimension(StringBounder)
+ Collection<Connection> getInnerConnections()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ ISkinParam skinParam()
+ UStroke getThickness()
# Ftile getFtileDelegated()
+ List<WeldingPoint> getWeldingPoints()
+ UTranslate getTranslateFor(Ftile,StringBounder)
+ Collection<Ftile> getMyChildren()
+ HorizontalAlignment arrowHorizontalAlignment()
}
class net.sourceforge.plantuml.activitydiagram3.InstructionWhile {
- InstructionList repeatList
- Instruction parent
- LinkRendering nextLinkRenderer
- HColor color
- boolean killed
- Display test
- Display yes
- boolean testCalled
- LinkRendering outColor
- Swimlane swimlane
- ISkinParam skinParam
- Instruction specialOut
- BoxStyle boxStyle
- Swimlane swimlaneOut
- Display backward
- LinkRendering incoming1
- LinkRendering incoming2
- boolean backwardCalled
+ void overwriteYes(Display)
+ void add(Instruction)
+ Ftile createFtile(FtileFactory)
+ Instruction getParent()
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ void outDisplay(Display)
+ void outColor(Rainbow)
+ boolean addNote(Display,NotePosition,NoteType,Colors,Swimlane)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Instruction getLast()
+ void setSpecial(Instruction)
+ boolean containsBreak()
+ void setBackward(Display,Swimlane,BoxStyle,LinkRendering,LinkRendering)
+ void incoming(LinkRendering)
}
abstract class net.sourceforge.plantuml.json.WriterConfig {
+ {static} WriterConfig MINIMAL
+ {static} WriterConfig PRETTY_PRINT
~ {abstract}JsonWriter createWriter(Writer)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandKill3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.salt.element.ElementLine {
- char separator
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
- {static} void drawLine(UGraphic,double,double,double,char)
}
class net.sourceforge.plantuml.style.NoStyleAvailableException {
}
class net.sourceforge.plantuml.math.AsciiMath {
- {static} String ASCIIMATH_PARSER_JS_LOCATION
- {static} String JAVASCRIPT_CODE
- LatexBuilder builder
- String tex
- String patchColor(String)
+ Dimension2D getDimension()
+ UImageSvg getSvg(double,Color,Color)
+ MutableImage getImage(Color,Color)
+ String getSource()
}
class net.sourceforge.plantuml.cucadiagram.dot.GraphvizWindowsOld {
- {static} File specificDotExe
# File specificDotExe()
+ boolean graphviz244onWindows()
- File specificDotExeSlow()
- {static} File searchInDir(File)
~ {static} File higherVersion(List<File>)
# String getExeName()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.LaneDivider {
- ISkinParam skinParam
- double x1
- double x2
- double height
- Style style
+ StyleSignature getDefaultStyleDefinition()
- Style getStyle()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ double getWidth()
+ double getX1()
+ double getX2()
}
interface net.sourceforge.plantuml.style.Styleable {
+ StyleSignature getDefaultStyleDefinition()
}
class net.sourceforge.plantuml.help.CommandHelpFont {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(Help,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.bpm.BpmEventAdd {
- BpmElement element
+ BpmElement getElement()
}
class net.sourceforge.plantuml.bpm.CommandMerge {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(BpmDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.tim.stdlib.Dirpath {
- String value
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.graphic.TextBlockGeneric {
- TextBlock textBlock
- HColor background
- HColor border
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseNote {
- double paddingX
- double paddingY
- SymbolContext symbolContext
- double roundCorner
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
+ double getPaddingX()
+ double getPaddingY()
# void drawInternalU(UGraphic,Area)
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
class net.sourceforge.plantuml.ugraphic.svg.DriverImageSvgSvg {
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorCreateParallel {
+ Ftile createParallel(List<Ftile>,ForkStyle,String,Swimlane,Swimlane)
}
class net.sourceforge.plantuml.preproc2.ReadFilterAnd {
- Collection<ReadFilter> all
+ void add(ReadFilter)
+ ReadLine applyFilter(ReadLine)
}
class net.sourceforge.plantuml.project.lang.SubjectTask {
+ Failable<Task> getMe(GanttDiagram,RegexResult)
+ Collection<? extends SentenceSimple> getSentences()
+ IRegex toRegex()
}
class net.sourceforge.plantuml.bpm.CommandEndBranch {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(BpmDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.command.note.CommandFactoryTipOnEntity {
- IRegex partialPattern
- String key
- RegexConcat getRegexConcatMultiLine(IRegex,boolean)
+ Command<AbstractEntityDiagram> createSingleLine()
+ Command<AbstractEntityDiagram> createMultiLine(boolean)
- CommandExecutionResult executeInternal(RegexResult,AbstractEntityDiagram,Url,BlocLines)
}
class net.sourceforge.plantuml.tim.VariableManager {
- TMemory memory
- TContext context
- LineLocation location
+ int replaceVariables(String,int,StringBuilder)
- int replaceJson(JsonValue,String,int,StringBuilder)
+ String getVarnameAt(String,int)
+ {static} boolean justAfterBackslashN(String,int)
}
class net.sourceforge.plantuml.ugraphic.html5.DriverNopHtml5 {
+ void draw(UShape,double,double,ColorMapper,UParam,Html5Drawer)
}
class net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramArea {
- double sequenceWidth
- double sequenceHeight
- double headerWidth
- double headerHeight
- double headerMargin
- double titleWidth
- double titleHeight
- double captionWidth
- double captionHeight
- double footerWidth
- double footerHeight
- double footerMargin
- double legendWidth
- double legendHeight
- boolean isLegendTop
- HorizontalAlignment legendHorizontalAlignment
+ void setLegend(Dimension2D,boolean,HorizontalAlignment)
+ double getLegendWidth()
+ boolean hasLegend()
+ double getLegendX()
+ void setTitleArea(double,double)
- void setCaptionArea(double,double)
+ void setCaptionArea(Dimension2D)
+ void setHeaderArea(double,double,double)
+ void setFooterArea(double,double,double)
+ double getWidth()
+ double getHeight()
+ double getFooterY()
+ double getCaptionY()
+ double getLegendY()
+ double getTitleX()
+ double getTitleY()
+ double getHeaderHeightMargin()
+ double getCaptionX()
+ double getSequenceAreaX()
+ double getSequenceAreaY()
+ double getHeaderY()
+ double getFooterX(HorizontalAlignment)
+ double getHeaderX(HorizontalAlignment)
+ void initFooter(PngTitler,StringBounder)
+ void initHeader(PngTitler,StringBounder)
}
class net.sourceforge.plantuml.yaml.SimpleYamlParser {
- JsonValue result
- List<Integer> pendingIndents
+ JsonValue parse(List<String>)
- String[] nameAndValue(String)
- void parseSingleLine(String)
- String listedValue(String)
- JsonArray getForceArray(int)
- void strictMuteToArray(int)
- boolean isListStrict(String)
- int getLastIndent()
- JsonValue getWorking(int)
- {static} JsonValue search(JsonValue,int)
- int getIndent(String)
}
class net.sourceforge.plantuml.ScaleMaxHeight {
- double maxHeight
+ double getScaleInternal(double,double)
}
class net.sourceforge.plantuml.ugraphic.visio.VisioText {
- int id
- String text
- int fontSize
- double x
- double y
- double width
- double height
- double coefFont
+ {static} VisioText createInches(int,String,int,double,double,double,double)
- {static} double toInches(double)
+ void print(OutputStream)
+ VisioShape yReverse(double)
- void out(OutputStream,String)
}
class net.sourceforge.plantuml.posimo.PositionableImpl {
- Point2D pos
- Dimension2D dim
+ Point2D getPosition()
+ Dimension2D getSize()
+ void moveSvek(double,double)
}
class net.sourceforge.plantuml.style.ClockwiseTopRightBottomLeft {
- double top
- double right
- double bottom
- double left
+ {static} ClockwiseTopRightBottomLeft same(double)
+ {static} ClockwiseTopRightBottomLeft none()
+ {static} ClockwiseTopRightBottomLeft read(String)
+ {static} ClockwiseTopRightBottomLeft margin1margin2(double,double)
+ {static} ClockwiseTopRightBottomLeft topRightBottomLeft(double,double,double,double)
+ String toString()
+ double getTop()
+ double getRight()
+ double getBottom()
+ double getLeft()
+ {static} ClockwiseTopRightBottomLeft marginForDocument(StyleBuilder)
}
class net.sourceforge.plantuml.logo.TurtleGraphicsPane {
- double width
- double height
- double x
- double y
- double turtleDirection
- boolean penIsDown
- boolean showTurtle
- HColor penColor
- List<Rectangle2D.Double> lines
- List<HColor> colors
- String message
+ void clearScreen()
- double dtor(double)
- void drawTurtle(UGraphic)
+ void showTurtle()
+ void hideTurtle()
+ void setPenColor(HColor)
~ void addLine(double,double,double,double)
+ void forward(double)
+ void back(double)
+ void left(double)
+ void right(double)
+ void penUp()
+ void penDown()
+ void paint(UGraphic)
+ void message(String)
}
class net.sourceforge.plantuml.compositediagram.CompositeDiagram {
+ IEntity getOrCreateLeaf(Ident,Code,LeafType,USymbol)
}
class net.sourceforge.plantuml.graphic.HtmlCommandFactory {
~ {static} Pattern2 addStyle
~ {static} Pattern2 removeStyle
- Pattern2 htmlTag
~ HtmlCommand getHtmlCommand(ThemeStyle,String)
}
class net.sourceforge.plantuml.eggs.PSystemRIP {
- {static} byte[] imm
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.sequencediagram.graphic.Step1Message {
- MessageArrow messageArrow
~ Frontier prepareMessage(ConstraintSet,InGroupablesStack)
- boolean isSelfMessage()
- ParticipantBox getParticipantBox1()
- ParticipantBox getParticipantBox2()
- LivingParticipantBox getLivingParticipantBox1()
- LivingParticipantBox getLivingParticipantBox2()
- LivingParticipantBox getLivingParticipantBox(NotePosition)
- Arrow createArrow()
- MessageSelfArrow createMessageSelfArrow()
- double getHalfLifeWidth()
- Arrow createArrowCreate()
- ArrowConfiguration getSelfArrowType(Message)
- ArrowConfiguration getArrowType(Message,double,double)
}
class net.sourceforge.plantuml.salt.element.ElementButton {
- double stroke
- double marginX
- double marginY
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
}
class net.sourceforge.plantuml.ugraphic.UScale {
- double scale
+ String toString()
+ double getScale()
}
class net.sourceforge.plantuml.ugraphic.color.NoSuchColorRuntimeException {
}
class net.sourceforge.plantuml.sequencediagram.command.CommandExoArrowRight {
~ {static} IRegex getRegexConcat()
~ MessageExoType getMessageExoType(RegexResult)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryHalfArrow {
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.real.RealLine {
- List<PositiveForce> forces
- double min
- double max
- Set<AbstractReal> all
- {static} int CPT
~ void register(double)
~ void register2(AbstractReal)
+ double getAbsoluteMin()
+ double getAbsoluteMax()
+ void addForce(PositiveForce)
+ void compile()
- void printCounter(Map<PositiveForce,Integer>)
- {static} void incCounter(Map<PositiveForce,Integer>,PositiveForce)
~ Real asMaxAbsolute()
~ Real asMinAbsolute()
}
class net.sourceforge.plantuml.real.RealLine.MaxAbsolute {
+ double getCurrentValue()
}
class net.sourceforge.plantuml.real.RealLine.MinAbsolute {
+ double getCurrentValue()
}
abstract class net.sourceforge.plantuml.real.RealLine.AbstractAbsolute {
+ void printCreationStackTrace()
+ String getName()
+ Real addFixed(double)
+ Real addAtLeast(double)
+ void ensureBiggerThan(Real)
+ Real getMaxAbsolute()
+ Real getMinAbsolute()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileBreak {
+ Collection<Ftile> getMyChildren()
+ String toString()
# FtileGeometry calculateDimensionFtile(StringBounder)
+ List<WeldingPoint> getWeldingPoints()
}
abstract class net.sourceforge.plantuml.posimo.RacorderAbstract {
+ DotPath getRacordOut(Rectangle2D,Line2D)
- {static} Line2D symetric(Line2D)
}
class net.sourceforge.plantuml.creole.command.CommandCreoleUrl {
- {static} Pattern2 pattern
- ISkinSimple skinParam
+ {static} Command create(ISkinSimple)
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.oregon.MagicTable {
- Oc[] number
- {static} ArrayList<int[]> neighbours
+ {static} int[] getNeighbours(int)
+ {static} int[] getNeighboursSlow(int)
+ List<Integer> getAllFree()
+ List<Integer> getAllUsed()
+ boolean isUsuable(int)
+ void burnNumber(int)
+ int getRandomFree(Random)
+ {static} int size(Random,MagicTable)
+ {static} void main(String[])
+ {static} void main2(String[])
}
class net.sourceforge.plantuml.activitydiagram3.InstructionSpot {
- boolean killed
- LinkRendering inlinkRendering
- String spot
- HColor color
+ boolean containsBreak()
+ Ftile createFtile(FtileFactory)
+ void add(Instruction)
+ boolean kill()
+ LinkRendering getInLinkRendering()
}
class net.sourceforge.plantuml.project.core3.HistogramSimple {
- Map<Long,Long> events
+ long getNext(long)
+ long getPrevious(long)
+ void put(long,long)
+ String toString()
+ long getValueAt(long)
}
class net.sourceforge.plantuml.webp.VP8Frame {
- {static} int BLOCK_TYPES
- {static} int COEF_BANDS
- {static} int MAX_ENTROPY_TOKENS
- {static} int MAX_MODE_LF_DELTAS
- {static} int MAX_REF_LF_DELTAS
- {static} int PREV_COEF_CONTEXTS
- ArrayList<IIOReadProgressListener> _listeners
- int bufferCount
- int buffersToCreate
- int[][][][] coefProbs
- boolean debug
- int filterLevel
- int filterType
- ImageInputStream frame
- int frameType
- int height
- int macroBlockCols
- int macroBlockNoCoeffSkip
- int macroBlockRows
- MacroBlock[][] macroBlocks
- int macroBlockSegementAbsoluteDelta
- int[] macroBlockSegmentTreeProbs
- int[] modeLoopFilterDeltas
- int modeRefLoopFilterDeltaEnabled
- int modeRefLoopFilterDeltaUpdate
- int multiTokenPartition
- long offset
- int[] refLoopFilterDeltas
- int refreshEntropyProbs
- int refreshLastFrame
- int segmentationIsEnabled
- SegmentQuants segmentQuants
- int sharpnessLevel
- int simpleFilter
- BoolDecoder tokenBoolDecoder
- Vector<BoolDecoder> tokenBoolDecoders
- int updateMacroBlockSegmentationMap
- int updateMacroBlockSegmentatonData
- int width
+ void addIIOReadProgressListener(IIOReadProgressListener)
- void createMacroBlocks()
+ boolean decodeFrame(boolean)
- void decodeMacroBlockRow(int)
+ void fireLFProgressUpdate(float)
- void fireProgressUpdate(int)
+ void fireRGBProgressUpdate(float)
+ SubBlock getAboveRightSubBlock(SubBlock,SubBlock.PLANE)
+ SubBlock getAboveSubBlock(SubBlock,SubBlock.PLANE)
- boolean getBit(int,int)
- int getBitAsInt(int,int)
+ BufferedImage getBufferedImage()
+ int[][][][] getCoefProbs()
+ BufferedImage getDebugImageDiff()
+ BufferedImage getDebugImagePredict()
+ BufferedImage getDebugImageUBuffer()
+ BufferedImage getDebugImageUDiffBuffer()
+ BufferedImage getDebugImageUPredBuffer()
+ BufferedImage getDebugImageVBuffer()
+ BufferedImage getDebugImageVDiffBuffer()
+ BufferedImage getDebugImageVPredBuffer()
+ BufferedImage getDebugImageYBuffer()
+ BufferedImage getDebugImageYDiffBuffer()
+ BufferedImage getDebugImageYPredBuffer()
+ int getFilterLevel()
+ int getFilterType()
+ int getFrameType()
+ int getHeight()
+ SubBlock getLeftSubBlock(SubBlock,SubBlock.PLANE)
+ MacroBlock getMacroBlock(int,int)
+ int getMacroBlockCols()
+ String getMacroBlockDebugString(int,int,int,int)
+ int getMacroBlockRows()
+ int getQIndex()
+ SegmentQuants getSegmentQuants()
+ int getSharpnessLevel()
+ BoolDecoder getTokenBoolDecoder()
+ int[][] getUBuffer()
+ int[][] getVBuffer()
+ int getWidth()
+ int[][] getYBuffer()
+ void loopFilter()
- void readModes(BoolDecoder)
- int readPartitionSize(long)
- int readSubBlockMode(BoolDecoder,int,int)
- int readUvMode(BoolDecoder)
- int readYMode(BoolDecoder)
+ void removeIIOReadProgressListener(IIOReadProgressListener)
+ void setBuffersToCreate(int)
- void setupTokenDecoder(BoolDecoder,int,long)
+ void useBufferedImage(BufferedImage)
+ void setFrame(ImageInputStream)
}
class net.sourceforge.plantuml.code.ArobaseStringCompressor {
- {static} Pattern2 p
+ String compress(String)
- void append(StringBuilder,StringLocated)
- String compressOld(String)
+ String decompress(String)
- String clean(String)
- String clean1(String)
}
class net.sourceforge.plantuml.DirWatcher {
- File dir
- Option option
- String pattern
- Map<File,FileWatcher> modifieds
+ List<GeneratedImage> buildCreatedFiles()
+ File getErrorFile()
- boolean fileToProcess(String)
+ File getDir()
}
interface net.sourceforge.plantuml.creole.Stencil {
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
class net.sourceforge.plantuml.sequencediagram.MessageExo {
- MessageExoType type
- Participant participant
- boolean shortArrow
+ boolean isShortArrow()
# NotePosition overideNotePosition(NotePosition)
+ Participant getParticipant1()
+ Participant getParticipant2()
+ Participant getParticipant()
+ MessageExoType getType()
+ boolean dealWith(Participant)
+ boolean compatibleForCreate(Participant)
+ boolean isSelfMessage()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityStateLine1 {
- UPolygon polygon
- Point2D dest
- double radius
- double angle
+ Point2D somePoint()
+ void drawU(UGraphic)
- Point2D getPointOnCircle(double,double,double)
- {static} void drawLine(UGraphic,Point2D,Point2D)
}
class net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramTxtMaker {
- SequenceDiagram diagram
- DrawableSet drawableSet
- Dimension2D fullDimension
- StringBounder dummyStringBounder
- UGraphicTxt ug
- FileFormat fileFormat
- TextSkin skin
+ ImageData createOne(OutputStream,int,boolean)
+ int getNbPages()
}
class net.sourceforge.plantuml.tim.ExecutionContextIf {
- boolean isTrue
- boolean hasBeenBurn
+ {static} ExecutionContextIf fromValue(boolean)
+ boolean conditionIsOkHere()
+ void enteringElseIf()
+ void nowInElse()
+ void nowInSomeElseIf()
+ boolean hasBeenBurn()
+ void setHasBeenBurn(boolean)
}
class net.sourceforge.plantuml.graphic.UGraphicInterceptorUDrawable {
+ void draw(UShape)
+ UGraphic apply(UChange)
}
class net.sourceforge.plantuml.sequencediagram.teoz.DividerTile {
- Rose skin
- ISkinParam skinParam
- Divider divider
- Real origin
- TileArguments tileArguments
+ Event getEvent()
- Component getComponent(StringBounder)
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.cucadiagram.BodierSimple {
- List<CharSequence> rawBody
- ILeaf leaf
+ void muteClassToObject()
+ void setLeaf(ILeaf)
+ void addFieldOrMethod(String)
+ Display getMethodsToDisplay()
+ Display getFieldsToDisplay()
+ boolean hasUrl()
+ List<CharSequence> getRawBody()
+ TextBlock getBody(FontParam,ISkinParam,boolean,boolean,Stereotype,Style)
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile {
- TContext context
- TMemory memory
- List<StringLocated> logs
+ StringLocated peek()
- void executeWhile(TMemory,StringLocated)
}
class net.sourceforge.plantuml.cucadiagram.EntityGenderUtils {
+ {static} EntityGender byEntityType(LeafType)
+ {static} EntityGender byEntityAlone(IEntity)
+ {static} EntityGender byStereotype(String)
+ {static} EntityGender byPackage(IGroup)
+ {static} EntityGender and(EntityGender,EntityGender)
+ {static} EntityGender all()
+ {static} EntityGender emptyMethods()
+ {static} EntityGender emptyFields()
}
class net.sourceforge.plantuml.style.ValueImpl {
- String value
- int priority
+ String toString()
+ String asString()
+ HColor asColor(ThemeStyle,HColorSet)
+ boolean asBoolean()
+ int asInt()
+ double asDouble()
+ int asFontStyle()
+ HorizontalAlignment asHorizontalAlignment()
+ int getPriority()
}
class net.sourceforge.plantuml.creole.command.CommandCreoleQrcode {
- {static} Pattern2 pattern
+ {static} Command create()
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandLink3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.eggs.GraphicsPath {
- String path
- ColorMapper colorMapper
+ ImageData writeImage(OutputStream)
- BufferedImage createImage()
}
class net.sourceforge.plantuml.posimo.Block {
- int uid
- double width
- double height
- double x
- double y
- Cluster parent
+ String toString()
+ String toStringPosition()
+ int getUid()
+ Cluster getParent()
+ Point2D getPosition()
+ Dimension2D getSize()
+ void setCenterX(double)
+ void setCenterY(double)
+ void setX(double)
+ void setY(double)
+ void moveSvek(double,double)
}
interface net.sourceforge.plantuml.SvgCharSizeHack {
+ {static} SvgCharSizeHack NO_HACK
+ String transformStringForSizeHack(String)
}
class net.sourceforge.plantuml.classdiagram.command.GenericRegexProducer {
+ {static} String PATTERN
- {static} String part1
- {static} String part2
~ {static} String getGenericRegex(int)
}
class net.sourceforge.plantuml.tim.stdlib.Lighten {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.sequencediagram.Participant {
- String code
- Display display
- ParticipantType type
- int initialLife
- Stereotype stereotype
- boolean stereotypePositionTop
- Set<EntityPortion> hiddenPortions
- int order
- StyleBuilder styleBuilder
- SymbolContext liveBackcolors
- Colors colors
- Url url
+ StyleSignature getDefaultStyleDefinition()
+ Style[] getUsedStyles()
+ String getCode()
+ String toString()
+ Display getDisplay(boolean)
+ ParticipantType getType()
+ void setStereotype(Stereotype,boolean)
+ int getInitialLife()
+ void incInitialLife(SymbolContext)
+ SymbolContext getLiveSpecificBackColors()
+ Colors getColors(ISkinParam)
+ void setSpecificColorTOBEREMOVED(ColorType,HColor)
+ void setColors(Colors)
+ Url getUrl()
+ void setUrl(Url)
+ Stereotype getStereotype()
+ ColorParam getBackgroundColorParam()
+ SkinParamBackcolored getSkinParamBackcolored(ISkinParam)
+ int getOrder()
- ColorParam getColorParam()
}
class net.sourceforge.plantuml.project.lang.ComplementDate {
+ IRegex toRegex(String)
- IRegex toRegexA(String)
- IRegex toRegexB(String)
- IRegex toRegexC(String)
- IRegex toRegexD(String)
+ Failable<Day> getMe(GanttDiagram,RegexResult,String)
- Day resultD(GanttDiagram,RegexResult,String)
- Day resultA(RegexResult,String)
- Day resultB(RegexResult,String)
- Day resultC(RegexResult,String)
}
class net.sourceforge.plantuml.wire.WCursor {
- UTranslate position
+ Point2D getPosition()
+ void move(double,double)
}
class net.sourceforge.plantuml.eggs.PSystemEggFactory {
- {static} List<byte[]> all
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryExtendsLike {
- HColor backgroundColor
- boolean definedBy
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondInside2 {
- HColor backColor
- HColor borderColor
- Swimlane swimlane
- TextBlock label
- TextBlock west
- TextBlock east
- TextBlock north
- TextBlock south
- double shadowing
+ FtileDiamondInside2 withNorth(TextBlock)
+ FtileDiamondInside2 withWest(TextBlock)
+ FtileDiamondInside2 withEast(TextBlock)
+ FtileDiamondInside2 withSouth(TextBlock)
+ StyleSignature getDefaultStyleDefinition()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ void drawU(UGraphic)
- FtileGeometry calculateDimensionAlone(StringBounder)
# FtileGeometry calculateDimensionFtile(StringBounder)
}
class net.sourceforge.plantuml.code.deflate.Decompressor {
- BitInputStream input
- OutputStreamProtected output
- ByteHistory dictionary
- {static} CanonicalCode FIXED_LITERAL_LENGTH_CODE
- {static} CanonicalCode FIXED_DISTANCE_CODE
+ {static} byte[] decompress(BitInputStream)
+ {static} void decompress(BitInputStream,OutputStreamProtected)
- CanonicalCode[] decodeHuffmanCodes()
- void decompressUncompressedBlock()
- void decompressHuffmanBlock(CanonicalCode,CanonicalCode)
- int decodeRunLength(int)
- int decodeDistance(int)
- int readInt(int)
}
interface net.sourceforge.plantuml.svek.GuideLine {
+ Direction getArrowDirection()
+ double getArrowDirection2()
}
class net.sourceforge.plantuml.project.lang.SubjectResource {
+ Failable<Resource> getMe(GanttDiagram,RegexResult)
+ Collection<? extends SentenceSimple> getSentences()
+ IRegex toRegex()
}
class net.sourceforge.plantuml.project.lang.SubjectResource.IsOffDate {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectResource.IsOffDates {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectResource.IsOffDayOfWeek {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectResource.IsOnDate {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectResource.IsOnDates {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
abstract class net.sourceforge.plantuml.creole.command.CommandCreoleCache {
- {static} Map<String,Pattern2> cache
# Pattern2 mypattern
}
class net.sourceforge.plantuml.tim.TMemoryGlobal {
- Map<String,TValue> globalVariables
- TrieImpl variables
+ TValue getVariable(String)
+ void dumpDebug(String)
~ void dumpMemoryInternal()
+ void putVariable(String,TValue,TVariableScope)
+ void removeVariable(String)
+ boolean isEmpty()
+ Set<String> variablesNames()
+ Trie variablesNames3()
+ TMemory forkFromGlobal(Map<String,TValue>)
}
class net.sourceforge.plantuml.board.CommandBoardPlus {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(BoardDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileEmpty {
- double width
- double height
- Swimlane swimlaneIn
- Swimlane swimlaneOut
+ Collection<Ftile> getMyChildren()
+ String toString()
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
# FtileGeometry calculateDimensionEmpty()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Set<Swimlane> getSwimlanes()
}
class net.sourceforge.plantuml.ugraphic.FontChecker {
- UFont font
- {static} Set<String> SQUARE
+ boolean isCharOk(char)
- {static} String getType(int,double,double,double,double)
+ String getCharDesc(char)
+ String getCharDescVerbose(char)
- void appendValue(StringBuilder,double[])
+ void printChar(PrintWriter,char)
- String getSvgImage(char)
+ BufferedImage getBufferedImage(char)
+ {static} void main(String[])
}
class net.sourceforge.plantuml.flowdiagram.CommandLineSimple {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(FlowDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.braille.DriverCenteredCharacterBraille {
+ void draw(UShape,double,double,ColorMapper,UParam,BrailleGrid)
}
class net.sourceforge.plantuml.real.RealDelta {
- Real delegated
- double diff
~ double getCurrentValueInternal()
+ Real addAtLeast(double)
+ void ensureBiggerThan(Real)
~ void move(double)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandReturn {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityNotNavigable {
- UPath path
- Point2D contact
+ Point2D somePoint()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.tim.stdlib.Substr {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandAtTime {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.FileWatcher {
- Map<File,Long> modified2
+ String toString()
+ boolean hasChanged()
}
class net.sourceforge.plantuml.braille.Coords {
- int x
- int y
+ boolean equals(Object)
+ int hashCode()
+ String toString()
+ int getX()
+ int getY()
}
class net.sourceforge.plantuml.timingdiagram.graphic.TimeArrow {
- Point2D start
- Point2D end
- Display label
- ISkinSimple spriteContainer
- WithLinkType type
+ {static} TimeArrow create(IntricatedPoint,IntricatedPoint,Display,ISkinSimple,WithLinkType)
- double getAngle()
- {static} TimeArrow shorter(TimeArrow,TimeArrow)
- {static} TimeArrow shorter(TimeArrow,TimeArrow,TimeArrow,TimeArrow)
- double len()
+ TimeArrow translate(UTranslate)
+ {static} Point2D onCircle(Point2D,double)
- FontConfiguration getFontConfiguration()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.sequencediagram.SequenceDiagramFactory {
+ SequenceDiagram createEmptyDiagram(UmlSource,ISkinSimple)
# List<Command> createCommands()
}
class net.sourceforge.plantuml.png.PngIO {
- {static} String copyleft
+ {static} void write(RenderedImage,SFile,int)
+ {static} void write(RenderedImage,OutputStream,int)
+ {static} void write(RenderedImage,SFile,String,int)
+ {static} void write(RenderedImage,OutputStream,String,int)
+ {static} void write(RenderedImage,OutputStream,String,int,String)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityArrowAndCircle {
- UPolygon polygon
- Point2D contact
- Point2D dest
- double radius
- HColor backgroundColor
+ Point2D somePoint()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.salt.element.Skeleton2 {
- List<Entry> entries
- {static} double sizeX
+ void add(int,double)
+ void draw(UGraphic)
- Entry getMotherOrSister(int)
- {static} double getXStartForLevel(int)
+ double getXEndForLevel(int)
}
class net.sourceforge.plantuml.salt.element.Skeleton2.Entry {
- int level
- double ypos
~ void drawHline(UGraphic)
+ void drawVline(UGraphic,double)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseDelayLine {
- HColor color
# void drawInternalU(UGraphic,Area)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.dedication.DedicationCrypted {
- String argon2
- BigInteger pq
- byte[] crypted
- int tinyHash
- String solution
- long next
+ BufferedImage getImage(TinyHashableString)
}
interface net.sourceforge.plantuml.activitydiagram3.ftile.WeldingPoint {
}
abstract class net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract {
- StringBounder stringBounder
- DrawableSet drawingSet
- AbstractMessage message
- Frontier freeY2
- ArrowConfiguration config
- List<Component> notes
- ParticipantRange range
# ParticipantRange getParticipantRange()
~ {abstract}Frontier prepareMessage(ConstraintSet,InGroupablesStack)
# ArrowConfiguration getConfig()
# void setConfig(ArrowConfiguration)
# List<Component> getNotes()
# void addNote(Component)
# StringBounder getStringBounder()
# AbstractMessage getMessage()
# DrawableSet getDrawingSet()
# Frontier getFreeY()
# void incFreeY(double)
# NoteBox createNoteBox(StringBounder,Arrow,Component,Note)
}
class net.sourceforge.plantuml.gitlog.GitDiagram {
- Collection<GNode> gnodes
+ DiagramDescription getDescription()
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
- void drawInternal(UGraphic)
- TextBlockBackcolored getTextBlock()
}
class net.sourceforge.plantuml.skin.Padder {
- double margin
- double padding
- HColor backgroundColor
- HColor borderColor
- double roundCorner
+ {static} Padder NONE
+ String toString()
+ Padder withMargin(double)
+ Padder withPadding(double)
+ Padder withBackgroundColor(HColor)
+ Padder withBorderColor(HColor)
+ Padder withRoundCorner(double)
+ double getMargin()
+ double getPadding()
+ HColor getBackgroundColor()
+ HColor getBorderColor()
+ TextBlock apply(TextBlock)
}
class net.sourceforge.plantuml.ugraphic.hand.UEllipseHand {
- Shadowable poly
- Random rnd
- double randomMe()
- Point2D getPoint(double,double,double)
+ Shadowable getHanddrawn()
}
abstract class net.sourceforge.plantuml.salt.element.AbstractElement {
# ThemeStyle getThemeStyle()
}
class net.sourceforge.plantuml.zopfli.Buffer {
~ byte[] data
~ int size
- int bp
+ byte[] getData()
+ byte[] getResult()
+ int getSize()
~ void append(byte)
~ void addBits(int,int)
~ void addHuffmanBits(int,int)
}
class net.sourceforge.plantuml.wire.WBlock {
- {static} int STARTING_Y
- String name
- double forcedWidth
- double forcedHeight
- HColor color
- List<WBlock> children
- UTranslate position
- WBlock parent
- UTranslate cursor
- WBlock addedToCursor
- UTranslate futureOutHorizontal
- UTranslate futureOutVertical
- List<WPrint> prints
+ UTranslate getAbsolutePosition(String,String)
- double parseWidth(String)
- double parseHeight(String)
+ String toString()
- WBlock getChildByName(String)
+ WBlock getBlock(String)
- String getName()
+ CommandExecutionResult newColumn(int)
+ CommandExecutionResult wgoto(int,double,double)
+ CommandExecutionResult wmove(int,double,double)
+ CommandExecutionResult print(StringBounder,ISkinParam,int,String)
+ CommandExecutionResult addBlock(int,String,double,double,HColor)
- UTranslate getNextPosition()
- WBlock getLastChild()
+ void drawMe(UGraphic)
- void drawBox(UGraphic)
- Dimension2D getMaxDimension()
- Dimension2D getNaturalDimension()
+ UTranslate getNextOutHorizontal(String,String,WLinkType)
+ UTranslate getNextOutVertical(String,String,WLinkType)
}
class net.sourceforge.plantuml.svek.image.EntityImageState {
- TextBlock fields
- {static} int MIN_WIDTH
- {static} int MIN_HEIGHT
- boolean withSymbol
- {static} double smallRadius
- {static} double smallLine
- {static} double smallMarginX
- {static} double smallMarginY
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ {static} void drawSymbol(UGraphic,double,double)
}
class net.sourceforge.plantuml.ugraphic.hand.UDotPathHand {
- UPath path
+ UPath getHanddrawn()
}
interface net.sourceforge.plantuml.bpm.GridCleaner {
+ boolean clean(Grid)
}
class net.sourceforge.plantuml.acearth.PSystemXearthFactory {
- Map<String,String> config
- List<Marker> markers
- int width
- int height
+ PSystemXearth initDiagram(UmlSource,String)
- void extractDimension(String)
+ PSystemXearth executeLine(UmlSource,PSystemXearth,String)
}
interface net.sourceforge.plantuml.preproc.ReadLine {
+ StringLocated readLine()
}
class net.sourceforge.plantuml.creole.legacy.StripeSimple {
- Atom header
- List<Atom> atoms
- List<Command> commands
- HorizontalAlignment align
- FontConfiguration fontConfiguration
- StripeStyle style
- ISkinSimple skinParam
+ {static} boolean TSPAN
+ void setCellAlignment(HorizontalAlignment)
+ HorizontalAlignment getCellAlignment()
+ String toString()
+ Atom getLHeader()
+ List<Atom> getAtoms()
+ FontConfiguration getActualFontConfiguration()
+ void setActualFontConfiguration(FontConfiguration)
+ void analyzeAndAdd(String)
- {static} FontConfiguration fontConfigurationForHeading(FontConfiguration,int)
+ void addImage(String,double)
+ void addQrcode(String,double)
+ void addSpace(int)
+ void addUrl(Url)
+ void addSprite(String,double,HColor)
+ void addOpenIcon(String,double,HColor)
+ void addMath(ScientificEquationSafe)
- void modifyStripe(String)
- void addPending(StringBuilder)
- Command searchCommand(String)
}
interface net.sourceforge.plantuml.activitydiagram3.ftile.Ftile {
+ UStroke getThickness()
+ ISkinParam skinParam()
+ LinkRendering getInLinkRendering()
+ LinkRendering getOutLinkRendering()
+ FtileGeometry calculateDimension(StringBounder)
+ UTranslate getTranslateFor(Ftile,StringBounder)
+ Collection<Ftile> getMyChildren()
+ Collection<Connection> getInnerConnections()
+ List<WeldingPoint> getWeldingPoints()
+ HorizontalAlignment arrowHorizontalAlignment()
}
abstract class net.sourceforge.plantuml.command.PSystemSingleLineFactory {
# {abstract}AbstractPSystem executeLine(UmlSource,String)
+ Diagram createSystem(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.posimo.DotPath {
- List<CubicCurve2D.Double> beziers
- String comment
- String codeLine
+ DotPath addCurve(Point2D,Point2D,Point2D,Point2D)
+ DotPath addCurve(Point2D,Point2D,Point2D)
- Point2D mirror(Point2D,Point2D)
+ {static} boolean isPathConsistent(String)
+ Point2D getStartPoint()
+ Set<Point2D> sample()
- {static} void sample(CubicCurve2D,Set<Point2D>)
+ PointAndAngle getMiddle()
- double getCost(Point2D)
+ void forceStartPoint(double,double)
+ Point2D getEndPoint()
+ void forceEndPoint(double,double)
+ void moveEndPoint(double,double)
+ MinFinder getMinFinder()
+ MinMax getMinMax()
+ double getMinDist(Point2D)
+ Line2D getEndTangeante()
+ double getEndAngle()
+ double getStartAngle()
+ Line2D getStartTangeante()
+ DotPath addBefore(CubicCurve2D.Double)
- DotPath addBefore(DotPath)
+ DotPath addAfter(CubicCurve2D.Double)
+ DotPath addAfter(DotPath)
+ Map<Point2D,Double> somePoints()
- PointDirected getIntersection(ClusterPosition)
+ void draw(Graphics2D,double,double)
+ void manageEnsureVisible(double,double,EnsureVisible)
+ void drawOk(EpsGraphics,double,double)
+ void draw(EpsGraphics,double,double)
+ UPath toUPath()
- Point2D getFrontierIntersection(Shape,Rectangle2D)
- void cutAllCubic(List<CubicCurve2D.Double>)
- {static} boolean contains(Point2D.Double,Rectangle2D)
- {static} boolean contains(CubicCurve2D.Double,Rectangle2D)
- DotPath manageRect(Rectangle2D,Rectangle2D)
- Point2D getFrontierIntersection(Positionable)
+ void draw(BasicCharArea,double,double)
~ {static} String toString(CubicCurve2D.Double)
+ String toString()
+ {static} CubicCurve2D.Double reverse(CubicCurve2D)
+ DotPath reverse()
+ void moveSvek(double,double)
+ List<CubicCurve2D.Double> getBeziers()
+ DotPath simulateCompound(Cluster,Cluster)
- double length(CubicCurve2D)
+ boolean isLine()
+ void setCommentAndCodeLine(String,String)
}
class net.sourceforge.plantuml.posimo.DotPath.TriPoints {
- double x1
- double y1
- double x2
- double y2
- double x
- double y
}
abstract class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractParallelFtilesBuilder {
# double barHeight
- Rose rose
- ISkinParam skinParam
- StringBounder stringBounder
# List<Ftile> list99
+ StyleSignature getDefaultStyleDefinition()
+ StyleSignature getDefaultStyleDefinitionArrow()
# List<Ftile> getFoo2(List<Ftile>)
- Ftile computeNewFtile(Ftile,double)
# double computeMaxHeight(List<Ftile>)
+ Ftile build(Ftile)
# {abstract}Ftile doStep1(Ftile)
# {abstract}Ftile doStep2(Ftile,Ftile)
# StringBounder getStringBounder()
# Rose getRose()
# ISkinParam skinParam()
# TextBlock getTextBlock(Display)
# TextBlock getTextBlock(LinkRendering)
# double getHeightOfMiddle(Ftile)
# Swimlane swimlaneOutForStep2()
}
class net.sourceforge.plantuml.tim.EaterInclude {
- String location
- PreprocessorIncludeStrategy strategy
+ void analyze(TContext,TMemory)
+ String getLocation()
+ PreprocessorIncludeStrategy getPreprocessorIncludeStrategy()
}
class net.sourceforge.plantuml.ugraphic.svg.DriverPixelSvg {
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
class net.sourceforge.plantuml.eps.PostScriptCommandMoveTo {
- double x
- double y
+ String toPostString()
}
class net.sourceforge.plantuml.sequencediagram.graphic.InGroupablesStack {
- List<InGroupableList> inGroupableStack
+ void addList(InGroupableList)
+ void pop()
+ void addElement(InGroupable)
+ InGroupableList getTopGroupingStructure()
}
class net.sourceforge.plantuml.sequencediagram.teoz.Step {
- double value
- boolean destroy
- int indent
- SymbolContext color
+ double getValue()
+ boolean isDestroy()
+ int getIndent()
+ SymbolContext getColors()
}
class net.sourceforge.plantuml.bpm.CleanerMoveBlock {
+ boolean clean(Grid)
- void tryGrid(Grid,Line)
- void tryBridge(Line,Col,Col)
}
class net.sourceforge.plantuml.swing.AboutWindow {
- JComponent getNorthLabel()
- JComponent getSouthLabel()
- JComponent getInfoVersion()
- JComponent getInfoAuthors()
- List<String> skip(List<String>)
- JComponent getJComponent(List<String>)
+ {static} void main(String[])
}
class net.sourceforge.plantuml.salt.element.ElementImage {
- List<String> img
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
}
class net.sourceforge.plantuml.jsondiagram.Mirror {
- double max
+ double inv(double)
+ Point2D invAndXYSwitch(Point2D)
+ Point2D invGit(Point2D)
}
class net.sourceforge.plantuml.swing.ScrollablePicture {
- int maxUnitIncrement
- boolean missingPicture
+ void mouseMoved(MouseEvent)
+ void mouseDragged(MouseEvent)
+ Dimension getPreferredSize()
+ Dimension getPreferredScrollableViewportSize()
+ int getScrollableUnitIncrement(Rectangle,int,int)
+ int getScrollableBlockIncrement(Rectangle,int,int)
+ boolean getScrollableTracksViewportWidth()
+ boolean getScrollableTracksViewportHeight()
+ void setMaxUnitIncrement(int)
}
class net.sourceforge.plantuml.tim.EaterIncludesub {
- String location
+ void analyze(TContext,TMemory)
+ String getLocation()
}
class net.sourceforge.plantuml.creole.command.CommandCreoleSvgAttributeChange {
+ {static} String fontPattern
- {static} Pattern2 pattern
- {static} Pattern2 patternEol
- Pattern2 mypattern
+ {static} Command create()
+ {static} Command createEol()
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.descdiagram.CommandCreateDomain {
+ {static} String DISPLAY_WITH_GENERIC
+ {static} String CODE
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(DescriptionDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionList {
- List<Instruction> all
- Swimlane defaultSwimlane
- LinkRendering outlinkRendering
+ boolean containsBreak()
+ boolean isEmpty()
+ boolean isOnlySingleStopOrSpot()
+ void add(Instruction)
+ Ftile createFtile(FtileFactory)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ Instruction getLast()
+ boolean addNote(Display,NotePosition,NoteType,Colors,Swimlane)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ {static} Set<Swimlane> getSwimlanes2(List<? extends Instruction>)
+ void setOutRendering(LinkRendering)
}
class net.sourceforge.plantuml.nwdiag.CommandLink {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(NwDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.timingdiagram.TimingRuler {
- SortedSet<TimeTick> times
- ISkinParam skinParam
- long tickIntervalInPixels
- long tickUnitary
- TimingFormat format
- long highestCommonFactorInternal
~ {static} UGraphic applyForVLines(UGraphic)
+ void ensureNotEmpty()
+ void scaleInPixels(long,long)
- long tickUnitary()
- long highestCommonFactor()
- Set<Long> getAbsolutesTicks()
- int getNbTick()
+ double getWidth()
+ double getPosInPixel(TimeTick)
- double getPosInPixelInternal(double)
- long tickToTime(int)
+ void addTime(TimeTick)
- FontConfiguration getFontConfiguration()
- TextBlock getTimeTextBlock(long)
+ void drawTimeAxis(UGraphic)
- BigDecimal getFirstPositiveOrZeroValue()
- Collection<Long> roundValues()
+ void drawVlines(UGraphic,double)
+ double getHeight(StringBounder)
- TimeTick getMax()
- TimeTick getMin()
- {static} long computeHighestCommonFactor(long,long)
}
interface net.sourceforge.plantuml.creole.atom.Atom {
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
+ List<Atom> splitInTwo(StringBounder,double)
}
class net.sourceforge.plantuml.tim.TFunctionArgument {
- String name
- TValue def
+ String getName()
+ String toString()
+ TValue getOptionalDefaultValue()
}
class net.sourceforge.plantuml.ugraphic.UGraphicFilter {
- Collection<Class<? extends UShape>> toprint
+ UGraphic apply(UChange)
+ void draw(UShape)
}
class net.sourceforge.plantuml.oregon.KeyboardList {
- Iterator<String> data
+ String input()
+ boolean hasMore()
}
class net.sourceforge.plantuml.cucadiagram.LinkStyle {
- Type type
- Double thickness
+ String toString()
+ boolean isNormal()
+ boolean isInvisible()
+ {static} LinkStyle NORMAL()
+ {static} LinkStyle INVISIBLE()
+ {static} LinkStyle BOLD()
+ {static} LinkStyle DOTTED()
+ {static} LinkStyle DASHED()
+ LinkStyle goThickness(double)
+ UStroke getStroke3()
+ boolean isDashed()
+ UStroke muteStroke(UStroke)
- double nonZeroThickness()
+ {static} LinkStyle fromString1(String)
+ {static} LinkStyle fromString2(String)
+ boolean isThicknessOverrided()
}
class net.sourceforge.plantuml.cucadiagram.BodyFactory {
+ {static} boolean BODY3
+ {static} Bodier createLeaf(LeafType,Set<VisibilityModifier>)
+ {static} Bodier createGroup(Set<VisibilityModifier>)
+ {static} TextBlock create1(HorizontalAlignment,List<CharSequence>,FontParam,ISkinParam,Stereotype,ILeaf,Style)
+ {static} TextBlock create2(HorizontalAlignment,Display,FontParam,ISkinParam,Stereotype,ILeaf,Style)
+ {static} TextBlock create3(Display,FontParam,ISkinSimple,HorizontalAlignment,FontConfiguration,LineBreakStrategy)
}
interface net.sourceforge.plantuml.sequencediagram.InGroupable {
+ double getMinX(StringBounder)
+ double getMaxX(StringBounder)
+ String toString(StringBounder)
}
class net.sourceforge.plantuml.project.lang.ComplementSeveralDays {
+ IRegex toRegex(String)
+ Failable<Load> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.posimo.BezierUtils {
+ {static} double getEndingAngle(CubicCurve2D.Double)
+ {static} double getStartingAngle(CubicCurve2D.Double)
~ {static} double getAngle(Point2D,Point2D)
~ {static} boolean isCutting(CubicCurve2D.Double,Shape)
~ {static} void shorten(CubicCurve2D.Double,Shape)
- {static} void subdivide(CubicCurve2D,CubicCurve2D,CubicCurve2D,double)
~ {static} double dist(CubicCurve2D.Double)
~ {static} double dist(Line2D.Double)
+ {static} Point2D middle(Line2D.Double)
+ {static} Point2D middle(Point2D,Point2D)
+ {static} Point2D intersect(Line2D.Double,Shape)
+ {static} Rectangle2D toRectangle(Positionable)
+ {static} boolean intersect(Positionable,Positionable)
+ {static} Point2D.Double getCenter(Positionable)
}
class net.sourceforge.plantuml.version.PSystemVersionFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityTriangle {
- UPolygon polygon
- boolean fill
- HColor backgroundColor
- Point2D contact
+ Point2D somePoint()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersionFinder {
- File dotExe
+ {static} GraphvizVersion DEFAULT
+ GraphvizVersion getVersion()
+ String dotVersion()
- String[] getCommandLine()
}
interface net.sourceforge.plantuml.project.solver.Solver {
+ Value getData(TaskAttribute)
+ void setData(TaskAttribute,Value)
}
class net.sourceforge.plantuml.creole.rosetta.CreoleParser2 {
- FontConfiguration fontConfiguration
- ISkinSimple skinParam
- HorizontalAlignment horizontalAlignment
- CreoleMode creoleMode
- FontConfiguration stereotype
+ Sheet createSheet(Display)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityCircleConnect {
- double px
- double py
- Point2D dest
- double radius
- double radius2
- double ortho
- HColor backgroundColor
+ Point2D somePoint()
+ void drawU(UGraphic)
}
interface net.sourceforge.plantuml.oregon.BasicGame {
~ void run(Keyboard)
~ Screen getScreen()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandEndPartition3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
abstract class net.sourceforge.plantuml.command.regex.RegexComposed {
# {static} AtomicInteger nbCreateMatches
- List<IRegex> partials
- AtomicReference<Pattern2> fullCached
# List<IRegex> partials()
# {abstract}String getFullSlow()
- Pattern2 getPattern2()
# boolean isCompiled()
+ Map<String,RegexPartialMatch> createPartialMatch(Iterator<String>)
+ int count()
# int getStartCount()
+ RegexResult matcher(String)
+ boolean match(StringLocated)
+ String getPattern()
# List<IRegex> getPartials()
}
class net.sourceforge.plantuml.timingdiagram.TimingDiagramFactory {
+ TimingDiagram createEmptyDiagram(UmlSource,ISkinSimple)
# List<Command> createCommands()
}
abstract class net.sourceforge.plantuml.ugraphic.AbstractUGraphic {
- O graphic
- Map<Class<? extends UShape>,UDriver<O>> drivers
# O getGraphicObject()
# boolean manageHiddenAutomatically()
# void registerDriver(Class<? extends UShape>,UDriver<O>)
+ void draw(UShape)
# void drawComment(UComment)
# void beforeDraw()
# void afterDraw()
}
class net.sourceforge.plantuml.salt.element.ElementTextField {
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
}
class net.sourceforge.plantuml.ugraphic.ULayoutGroup {
- PlacementStrategy placementStrategy
+ void drawU(UGraphic,double,double)
+ void add(TextBlock)
+ Rectangle2D getInnerPosition(String,double,double,StringBounder)
- Rectangle2D tryOne(Set<Entry<TextBlock,Point2D>>,String,StringBounder,InnerStrategy)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.Swimlanes {
- ISkinParam skinParam
- Pragma pragma
- List<Swimlane> swimlanesRaw
- List<Swimlane> swimlanesSpecial
- List<LaneDivider> dividers
- Swimlane currentSwimlane
- Instruction root
- Instruction currentInstruction
- LinkRendering nextLinkRenderer
- Style style
- MinMax cachedMinMax
- List<Swimlane> swimlanes()
- List<Swimlane> swimlanesSpecial()
+ StyleSignature getDefaultStyleDefinition()
# Style getStyle()
- FtileFactory getFtileFactory(StringBounder)
+ void swimlane(String,HColor,Display)
- Swimlane getOrCreate(String)
+ void computeSize(StringBounder)
+ void drawU(UGraphic)
- TextBlock getTitle(Swimlane)
- LineBreakStrategy getWrap()
- UTranslate getTitleHeightTranslate(StringBounder)
- double getTitlesHeight(StringBounder)
- void drawWhenSwimlanes(UGraphic,TextBlock)
- void drawTitlesBackground(UGraphic)
- void drawTitles(UGraphic)
- void computeDrawingWidths(UGraphic,TextBlock)
- void computeSizeInternal(UGraphic,TextBlock)
+ double getHalfMissingSpace(StringBounder,int,double)
- double getWidthWithoutTitle(Swimlane)
+ Dimension2D calculateDimension(StringBounder)
+ Instruction getCurrent()
+ void setCurrent(Instruction)
+ LinkRendering nextLinkRenderer()
+ void setNextLinkRenderer(LinkRendering)
+ Swimlane getCurrentSwimlane()
+ MinMax getMinMax(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.Swimlanes.Cross {
+ void draw(UShape)
+ UGraphic apply(UChange)
}
class net.sourceforge.plantuml.tim.stdlib.Newline {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.tim.EaterDeclareReturnFunction {
- TFunctionImpl function
- LineLocation location
- boolean finalFlag
+ void analyze(TContext,TMemory)
- boolean peekUnquoted()
- boolean peekFinal()
+ TFunctionImpl getFunction()
+ boolean getFinalFlag()
}
class net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface {
- {static} int SIZE
- TextBlock desc
- Url url
- double angle
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
+ void addImpact(double)
}
class net.sourceforge.plantuml.preproc.Stdlib {
- {static} Map<String,Stdlib> all
- {static} String SEPARATOR
- {static} Pattern sizePattern
- Map<String,SoftReference<String>> cache
- String name
- Map<String,String> info
+ {static} InputStream getResourceAsStream(String)
+ {static} Stdlib retrieve(String)
- String loadRessource(String)
- void skipSprite(int,int,InputStream)
- String readSprite(int,int,InputStream)
- String toHexString(int)
- boolean isSpriteLine(String)
- void fillMap(String)
- {static} DataInputStream getDataStream(String)
- DataInputStream getDataStream()
- InputStream getSpriteStream()
- {static} InputStream getInternalInputStream(String,String)
+ {static} void extractStdLib()
- {static} Collection<String> getAll()
- void extractMeFull()
+ List<String> extractAllSprites()
+ {static} void addInfoVersion(List<String>,boolean)
- String getVersion()
- String getSource()
+ {static} void printStdLib()
}
abstract class net.sourceforge.plantuml.cucadiagram.CucaDiagram {
- {static} boolean G1972
- String namespaceSeparator
- boolean namespaceSeparatorHasBeenSet
- int horizontalPages
- int verticalPages
- List<HideOrShow2> hides2
- List<HideOrShow2> removed
# EntityFactory entityFactory
- IGroup currentGroup
- List<Ident> stacks2
- List<IGroup> stacks
- boolean visibilityModifierPresent
- String warningOrError
- List<HideOrShow> hideOrShows
- Set<VisibilityModifier> hides
- ILeaf lastEntity
+ boolean V1972()
+ boolean mergeIntricated()
+ Set<SuperGroup> getAllSuperGroups()
+ {abstract}IEntity getOrCreateLeaf(Ident,Code,LeafType,USymbol)
+ Ident cleanIdent(Ident)
- Ident getLastID()
+ void setNamespaceSeparator(String)
+ String getNamespaceSeparator()
+ boolean hasUrl()
+ void setLastEntity(ILeaf)
# ILeaf getOrCreateLeafDefault(Ident,Code,LeafType,USymbol)
+ ILeaf createLeaf(Ident,Code,Display,LeafType,USymbol)
# ILeaf createLeafInternal(Ident,Code,Display,LeafType,USymbol)
+ Ident buildLeafIdent(String)
+ Ident buildLeafIdentSpecial(String)
- Ident buildLeafIdentSpecialUnused(String)
+ Ident buildFullyQualified(String)
+ Code buildCode(String)
+ boolean leafExist(Code)
+ boolean leafExistSmart(Ident)
+ boolean leafExistStrict(Ident)
+ Collection<IGroup> getChildrenGroups(IGroup)
- Collection<IGroup> getChildrenGroupsIdent1972(IGroup)
+ void gotoGroup(Ident,Code,Display,GroupType,IGroup,NamespaceStrategy)
# String getNamespace1972(Code,String)
- void gotoGroupInternalWithNamespace(Ident,Code,Display,Code,GroupType,IGroup)
+ void endGroup()
- void gotoGroupInternal(Ident,Code,Display,Code,GroupType,IGroup)
- void gotoGroupInternal1972(Ident,Code,Display,Code,GroupType,IGroup)
# void gotoGroupExternal(Ident,Code,Display,Code,GroupType,IGroup)
+ void gotoThisGroup(IGroup)
# Code getFullyQualifiedCode1972(Code)
+ IGroup getCurrentGroup()
+ IGroup getGroup(Code)
+ IGroup getGroupStrict(Ident)
+ IGroup getGroupVerySmart(Ident)
+ boolean isGroup(Code)
+ boolean isGroupStrict(Ident)
+ boolean isGroupVerySmart(Ident)
+ Collection<IGroup> getGroups(boolean)
+ IGroup getRootGroup()
+ SuperGroup getRootSuperGroup()
+ Collection<ILeaf> getLeafsvalues()
+ int getLeafssize()
+ ILeaf getLeaf(Code)
+ ILeaf getLeafStrict(Ident)
+ ILeaf getLeafSmart(Ident)
+ ILeaf getLeafVerySmart(Ident)
+ void addLink(Link)
# void removeLink(Link)
+ List<Link> getLinks()
+ int getHorizontalPages()
+ void setHorizontalPages(int)
+ int getVerticalPages()
+ void setVerticalPages(int)
+ int getNbImages()
# {abstract}List<String> getDotStrings()
+ String[] getDotStringSkek()
- void createFilesXmi(OutputStream,FileFormat)
- void createFilesScxml(OutputStream)
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
+ String getWarningOrError()
- void createFilesTxt(OutputStream,int,FileFormat)
+ boolean isAutarkic(IGroup)
- {static} boolean isNumber(String)
+ void resetPragmaLabel()
+ String getLabeldistance()
+ String getLabelangle()
+ boolean isEmpty(IGroup)
+ boolean isVisibilityModifierPresent()
+ void setVisibilityModifierPresent(boolean)
+ boolean showPortion(EntityPortion,IEntity)
+ void hideOrShow(EntityGender,EntityPortion,boolean)
+ void hideOrShow(Set<VisibilityModifier>,boolean)
+ void hideOrShow2(String,boolean)
+ void removeOrRestore(String,boolean)
+ Set<VisibilityModifier> getHides()
+ ColorMapper getColorMapper()
+ boolean isStandalone(IEntity)
+ Link getLastLink()
+ List<Link> getTwoLastLinks()
+ ILeaf getLastEntity()
+ EntityFactory getEntityFactory()
+ void applySingleStrategy()
+ boolean isHideEmptyDescriptionForState()
# void incRawLayout()
+ CommandExecutionResult constraintOnLinks(Link,Link,Display)
+ ClockwiseTopRightBottomLeft getDefaultMargins()
}
class net.sourceforge.plantuml.cucadiagram.CucaDiagram.HideOrShow {
- EntityGender gender
- EntityPortion portion
- boolean show
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandWhile3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.svg.DriverCenteredCharacterSvg {
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
interface net.sourceforge.plantuml.cucadiagram.Code {
+ String getName()
+ Code eventuallyRemoveStartingAndEndingDoubleQuote(String)
}
class net.sourceforge.plantuml.project.core3.TaskLoadImpl {
- long start
- long end
- Histogram load
+ long getStart()
+ void setStart(long)
+ long getEnd()
+ void setEnd(long)
+ Histogram getLoad()
}
class net.sourceforge.plantuml.sequencediagram.puma.FixedLink {
- SegmentPosition segmentPosition1
- SegmentPosition segmentPosition2
+ boolean pushIfNeed()
}
class net.sourceforge.plantuml.svek.ColorSequence {
- AtomicInteger cpt
+ int getValue()
}
class net.sourceforge.plantuml.activitydiagram3.MonoSwimable {
- Swimlane swimlane
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
}
class net.sourceforge.plantuml.command.CommandMinwidth {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(UmlDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.svek.SvekNode {
- ShapeType type
- double width
- double height
- String uid
- int color
- double minX
- double minY
- Margins shield
- EntityPosition entityPosition
- IEntityImage image
- Cluster cluster
- boolean top
- ILeaf leaf
- IGroup group
- Shadowable polygon
+ EntityPosition getEntityPosition()
+ Cluster getCluster()
+ void setCluster(Cluster)
+ String toString()
+ ShapeType getType()
+ double getWidth()
+ double getHeight()
+ void appendShape(StringBuilder,StringBounder)
- void appendHtml(StringBuilder)
- void appendLabelHtml(StringBuilder)
- void appendLabelHtmlSpecialForLink(StringBuilder,StringBounder)
- void appendTr(StringBuilder,String,double)
- void appendTd(StringBuilder,double,double)
- void appendTd(StringBuilder)
- void appendShapeInternal(StringBuilder)
+ String getUid()
+ double getMinX()
+ double getMinY()
+ IEntityImage getImage()
+ boolean isTop()
+ Point2D getPosition()
+ Dimension2D getSize()
+ ClusterPosition getClusterPosition()
+ boolean isShielded()
+ void moveSvek(double,double)
+ double getMaxWidthFromLabelForEntryExit(StringBounder)
+ boolean isHidden()
+ void setPolygon(double,double,List<Point2D.Double>)
+ Shadowable getPolygon()
+ Point2D getPoint2D(double,double)
+ Point2D projection(Point2D,StringBounder)
+ double getOverscanX(StringBounder)
+ void addImpact(double)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandLabel {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.sequencediagram.LifeEvent {
- Participant p
- LifeEventType type
- SymbolContext backcolor
- AbstractMessage message
+ String toString()
+ Participant getParticipant()
+ LifeEventType getType()
+ SymbolContext getSpecificColors()
+ boolean dealWith(Participant)
+ boolean isActivate()
+ boolean isDeactivateOrDestroy()
+ boolean isDeactivate()
+ boolean isDestroy(Participant)
+ void setMessage(AbstractMessage)
+ AbstractMessage getMessage()
}
class net.sourceforge.plantuml.version.PSystemKeycheck {
- String key
- String sig
# UDrawable getRootDrawable(FileFormatOption)
+ DiagramDescription getDescription()
- void drawInternal(UGraphic)
- ArrayList<String> header()
- void drawFlash(UGraphic,LicenseInfo)
}
class net.sourceforge.plantuml.classdiagram.RowLayout {
- List<TextBlock> all
+ void addLeaf(TextBlock)
+ double getHeight(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.dedication.RBlocks {
- List<RBlock> all
+ String toString()
+ {static} RBlocks readFrom(byte[],int)
+ RBlocks change(BigInteger,BigInteger)
+ void writeTo(Path,int)
+ byte[] toByteArray(int)
+ void writeTo(OutputStream,int)
}
class net.sourceforge.plantuml.graphic.USymbolCollections {
- SkinParameter skinParameter
+ SkinParameter getSkinParameter()
- void drawCollections(UGraphic,double,double,boolean,double)
- Margin getMargin()
- double getDeltaCollection()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.project.command.CommandPage {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(GanttDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.command.CommandAffineTransform {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(UmlDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.ugraphic.UShapeIgnorableForCompression {
+ boolean isIgnoreForCompressionOn(CompressionMode)
+ void drawWhenCompressed(UGraphic,CompressionMode)
}
class net.sourceforge.plantuml.sprite.SpriteMonochrome {
- int width
- int height
- int grayLevel
- int[][] grey
+ boolean isSameKind(SpriteMonochrome)
+ boolean isSame(SpriteMonochrome)
+ SpriteMonochrome xor(SpriteMonochrome)
+ SpriteMonochrome xSymetric()
+ SpriteMonochrome ySymetric()
+ void setGrey(int,int,int)
+ int getGrey(int,int)
+ int getHeight()
+ int getWidth()
+ UImage toUImage(ColorMapper,HColor,HColor)
- UImage special(ColorMapper,HColorGradient,HColor)
+ TextBlock asTextBlock(HColor,double)
+ void exportSprite1(OutputStream)
}
class net.sourceforge.plantuml.svek.image.ConnectedCircle {
- double radius
- List<Double> angles
- List<Point2D> points
+ void drawU(UGraphic)
+ void addSecondaryConnection(Point2D)
}
class net.sourceforge.plantuml.code.CompressionZlib {
- {static} boolean USE_ZOPFLI
- {static} int COMPRESSION_LEVEL
+ byte[] compress(byte[])
+ ByteArray decompress(byte[])
- byte[] copyArray(byte[],int)
}
class net.sourceforge.plantuml.svek.InnerActivity {
- IEntityImage im
- HColor borderColor
- double shadowing
- HColor backColor
+ {static} double THICKNESS_BORDER
+ void drawU(UGraphic)
+ HColor getBackcolor()
+ Dimension2D calculateDimension(StringBounder)
+ ShapeType getShapeType()
+ Margins getShield(StringBounder)
+ boolean isHidden()
+ double getOverscanX(StringBounder)
}
class net.sourceforge.plantuml.api.NumberAnalyzed {
- {static} int SLIDING_WINDOW
- long nb
- long sum
- long min
- long max
- long sumOfSquare
- long sliddingSum
- String name
- Lock saveLock
+ void reset()
+ void save(Preferences)
- String getSavedString()
# String getSavedSupplementatyData()
# String longToString(long)
+ {static} NumberAnalyzed load(String,Preferences)
+ String toString()
+ INumberAnalyzed getCopyImmutable()
+ void addValue(long)
+ void add(NumberAnalyzed)
+ long getNb()
+ long getSum()
+ long getMin()
+ long getMax()
+ long getMean()
+ long getSliddingMean()
+ long getStandardDeviation()
+ String getName()
}
abstract class net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction {
+ TFunctionType getFunctionType()
+ void executeProcedure(TContext,TMemory,LineLocation,String)
+ void executeProcedureInternal(TContext,TMemory,List<TValue>,Map<String,TValue>)
+ boolean isUnquoted()
}
class net.sourceforge.plantuml.tim.EaterLegacyDefineLong {
- TFunctionImpl function
+ void analyze(TContext,TMemory)
+ TFunctionImpl getFunction()
}
class net.sourceforge.plantuml.activitydiagram.command.CommandLinkActivity {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram,LineLocation,RegexResult)
~ {static} IEntity getEntity(ActivityDiagram,RegexResult,boolean)
- {static} LeafType getTypeIfExistingSmart(ActivityDiagram,Ident)
- {static} LeafType getTypeIfExisting(ActivityDiagram,Code)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandAutoNewpage {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText {
+ void drawText(String,FontConfiguration,double,double)
- String getPSName(FontConfiguration)
- String getTextAsEps(String)
}
class net.sourceforge.plantuml.style.ValueColor {
- HColor color
- int priority
+ HColor asColor(ThemeStyle,HColorSet)
+ int getPriority()
}
class net.sourceforge.plantuml.ugraphic.UCenteredCharacter {
- char c
- UFont font
+ char getChar()
+ UFont getFont()
}
class net.sourceforge.plantuml.bpm.CleanerEmptyLine {
+ boolean clean(Grid)
}
class net.sourceforge.plantuml.graphic.USymbolComponent2 {
+ SkinParameter getSkinParameter()
- void drawComponent2(UGraphic,double,double,boolean,double)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
abstract class net.sourceforge.plantuml.project.draw.AbstractTaskDraw {
# CenterBorderColor colors
# int completion
# Url url
# Display note
# TimeScale timeScale
- double y
# String prettyDisplay
# Day start
- StyleBuilder styleBuilder
- HColorSet colorSet
- Task task
- ToTaskDraw toTaskDraw
+ String toString()
+ void setColorsAndCompletion(CenterBorderColor,int,Url,Display)
~ {abstract}StyleSignature getStyleSignature()
# HColor getLineColor()
# HColor getBackgroundColor()
# FontConfiguration getFontConfiguration()
# Style getStyle()
+ double getTitleWidth(StringBounder)
# {abstract}TextBlock getTitle()
# {abstract}double getShapeHeight(StringBounder)
+ double getFullHeightTask(StringBounder)
+ TaskDraw getTrueRow()
+ double getY(StringBounder)
+ void pushMe(double)
+ Task getTask()
+ double getY(StringBounder,Direction)
# StyleBuilder getStyleBuilder()
# HColorSet getColorSet()
}
class net.sourceforge.plantuml.sequencediagram.HSpace {
- int pixel
+ int getPixel()
+ boolean dealWith(Participant)
}
class net.sourceforge.plantuml.sdot.CucaDiagramFileMakerSmetana {
- CucaDiagram diagram
- StringBounder stringBounder
- Map<ILeaf,ST_Agnode_s> nodes
- Map<Link,ST_Agedge_s> edges
- Map<IGroup,ST_Agraph_s> clusters
- DotStringFactory dotStringFactory
- {static} Lock lock
+ void drawGroup(UGraphic,YMirror,IGroup,ST_Agraph_s)
- void printAllSubgroups(IGroup)
- void printSingleGroup(IGroup)
- Style getStyle(FontParam)
- void printEntities(Collection<ILeaf>)
- void exportEntities(ST_Agraph_s,Collection<ILeaf>)
- void exportEntity(ST_Agraph_s,ILeaf)
- void printEntity(ILeaf)
- TextBlock getTitleBlock(IGroup)
- TextBlock getStereoBlock(IGroup)
- Collection<ILeaf> getUnpackagedEntities()
- void printCluster(ST_Agraph_s,Cluster)
+ ImageData createFile(OutputStream,List<String>,FileFormatOption)
- ImageData createFileLocked(OutputStream,List<String>,FileFormatOption)
- void exportGroups(ST_Agraph_s,IGroup)
- void exportGroup(ST_Agraph_s,IGroup)
- TextBlock getLabel(Link)
- TextBlock getQualifier(Link,int)
- ST_Agnode_s getAgnodeFromLeaf(IEntity)
- ST_Agedge_s createEdge(ST_Agraph_s,Link)
- {static} List<String> getFailureText3(Throwable)
- void printEntityNew(ILeaf)
- Bibliotekon getBibliotekon()
- IEntityImage printEntityInternal(ILeaf)
}
class net.sourceforge.plantuml.sdot.CucaDiagramFileMakerSmetana.Drawing {
- YMirror ymirror
- MinMax minMax
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
- Point2D getCorner(ST_Agnode_s)
+ HColor getBackcolor()
}
class net.sourceforge.plantuml.openiconic.data.DummyIcon {
}
class net.sourceforge.plantuml.creole.command.CommandCreoleMath {
- {static} Pattern2 pattern
+ {static} Command create()
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.real.RealMax {
- List<Real> all
- Throwable creationPoint
~ {static} RealLine line(Collection<Real>)
+ String getName()
~ double getCurrentValueInternal()
+ Real addFixed(double)
+ Real addAtLeast(double)
+ void ensureBiggerThan(Real)
+ void printCreationStackTrace()
}
class net.sourceforge.plantuml.code.deflate.OutputStreamProtected {
+ {static} int MAX_OUTPUT_SIZE
- ByteArrayOutputStream baos
- int counter
+ void close()
+ byte[] toByteArray()
+ void write(int)
}
class net.sourceforge.plantuml.command.CommandAffineTransformMultiline {
+ String getPatternEnd()
+ CommandExecutionResult execute(TitledDiagram,BlocLines)
}
class net.sourceforge.plantuml.openiconic.PSystemListOpenIconicFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.sequencediagram.graphic.Segment {
- double pos1
- double pos2
+ boolean equals(Object)
+ int hashCode()
+ boolean contains(double)
+ boolean contains(Segment)
+ String toString()
+ double getLength()
+ double getPos1()
+ double getPos2()
+ Segment merge(Segment)
+ Collection<Segment> cutSegmentIfNeed(Collection<Segment>)
}
class net.sourceforge.plantuml.sequencediagram.graphic.Segment.SortPos1 {
+ int compare(Segment,Segment)
}
class net.sourceforge.plantuml.mindmap.CommandMindMapRoot {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(MindMapDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.USegment {
- double[] coord
- USegmentType pathType
+ String toString()
+ double[] getCoord()
+ USegmentType getSegmentType()
+ USegment translate(double,double)
+ USegment rotate(double)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandHideTimeAxis {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandSplit3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.Removeable {
+ boolean isRemoved()
}
class net.sourceforge.plantuml.oregon.Screen {
- List<String> lines
+ void clear()
+ void print(String)
+ void print()
+ List<String> getLines()
+ String getLastLine()
}
class net.sourceforge.plantuml.svek.extremity.MiddleFactoryCircle {
- HColor backColor
+ UDrawable createUDrawable(double)
}
class net.sourceforge.plantuml.bpm.ChainImpl {
- List<O> positive
- List<O> negative
- int currentVersion
+ boolean remove(O)
+ ChainImpl<O> cloneMe()
+ int compare(O,O)
+ List<O> toList()
- int updateStructuralVersion()
+ boolean contains(O)
+ Navigator<O> navigator(O)
- O getInternal(int)
- void setInternal(int,O)
- void insertInternal(int,O)
- void ensure(int)
- void ensureInternal(int,List<O>)
}
class net.sourceforge.plantuml.bpm.ChainImpl.InternalNavigator {
- int position
- int version
- void checkConsistency()
+ O next()
+ O previous()
+ O get()
+ void set(O)
+ void insertBefore(O)
+ void insertAfter(O)
}
class net.sourceforge.plantuml.mindmap.SymetricalTee {
- double thickness1
- double elongation1
- double thickness2
- double elongation2
+ String toString()
+ double getThickness1()
+ double getElongation1()
+ double getThickness2()
+ double getElongation2()
+ double getFullElongation()
+ double getFullThickness()
}
interface net.sourceforge.plantuml.sequencediagram.graphic.FileMaker {
~ ImageData createOne(OutputStream,int,boolean)
+ int getNbPages()
}
interface net.sourceforge.plantuml.graphic.HtmlCommand {
}
class net.sourceforge.plantuml.ugraphic.UFont {
- Font font
- String family
- {static} Set<String> names
+ String toStringDebug()
- {static} Font buildFont(String,int,int)
- {static} boolean doesFamilyExists(String)
+ {static} UFont serif(int)
+ {static} UFont sansSerif(int)
+ {static} UFont courier(int)
+ {static} UFont byDefault(int)
+ UFont goTikz(int)
+ {static} UFont monospaced(int)
+ Font getUnderlayingFont()
+ UFont scaled(double)
+ UFont withSize(float)
+ UFont withStyle(int)
+ UFont bold()
+ UFont italic()
+ int getStyle()
+ int getSize()
+ double getSize2D()
+ boolean isBold()
+ boolean isItalic()
+ String getFamily(UFontContext)
+ String toString()
+ int hashCode()
+ boolean equals(Object)
}
class net.sourceforge.plantuml.svek.image.ContainingEllipse {
- SmallestEnclosingCircle sec
- YTransformer ytransformer
- double deltaShadow
+ String toString()
+ void append(Point2D)
+ void append(double,double)
+ double getWidth()
+ double getHeight()
+ Point2D getCenter()
+ UEllipse asUEllipse()
+ void setDeltaShadow(double)
}
class net.sourceforge.plantuml.svek.DecorateEntityImage {
- TextBlock original
- HorizontalAlignment horizontal1
- TextBlock text1
- HorizontalAlignment horizontal2
- TextBlock text2
- double deltaX
- double deltaY
+ {static} TextBlock addTop(TextBlock,TextBlock,HorizontalAlignment)
+ {static} TextBlock addBottom(TextBlock,TextBlock,HorizontalAlignment)
+ {static} TextBlock add(TextBlock,TextBlock,HorizontalAlignment,VerticalAlignment)
+ {static} TextBlock addTopAndBottom(TextBlock,TextBlock,HorizontalAlignment,TextBlock,HorizontalAlignment)
+ void drawU(UGraphic)
- Dimension2D getTextDim(TextBlock,StringBounder)
- double getTextX(Dimension2D,Dimension2D,HorizontalAlignment)
+ HColor getBackcolor()
+ Dimension2D calculateDimension(StringBounder)
+ MinMax getMinMax(StringBounder)
+ double getDeltaX()
+ double getDeltaY()
}
class net.sourceforge.plantuml.tim.EaterIfndef {
- String varname
+ void analyze(TContext,TMemory)
+ boolean isTrue(TContext,TMemory)
}
class net.sourceforge.plantuml.asciiart.ComponentTextDelay {
- Display stringsToDisplay
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical {
- double ySeparation
- double marginy1
- List<Ftile> tiles
- Ftile tile2
- List<Ftile> diamonds
- Ftile lastDiamond
- Rainbow arrowColor
+ Collection<Ftile> getMyChildren()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
~ {static} Ftile create(Swimlane,HColor,HColor,Rainbow,FtileFactory,ConditionStyle,List<Branch>,Branch,FontConfiguration,LinkRendering,LinkRendering)
+ UTranslate getTranslateFor(Ftile,StringBounder)
- UTranslate getTranslateDiamond(Ftile,StringBounder)
- UTranslate getTranslateLastDiamond(StringBounder)
- UTranslate getTranslate1(Ftile,StringBounder)
- double getTranslateDy(int,StringBounder)
- UTranslate getTranslate2(StringBounder)
+ void drawU(UGraphic)
- FtileGeometry calculateDimensionInternal(StringBounder)
- double allDiamondsWidth(StringBounder)
# FtileGeometry calculateDimensionFtile(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionIn {
- Rainbow arrowColor
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionVerticalIn {
- Rainbow color
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionVertical {
- Rainbow color
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionLastElse {
- Rainbow arrowColor
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionLastElseOut {
- Rainbow arrowColor
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionThenOut {
- Rainbow arrowColor
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionThenOutConnect {
- Rainbow arrowColor
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.cucadiagram.dot.DebugTrace {
- {static} SFile out
- {static} PrintWriter pw
- {static} PrintWriter getPrintWriter()
+ {static} void DEBUG(String)
+ {static} void DEBUG(String,Throwable)
}
class net.sourceforge.plantuml.graphic.USymbolQueue {
- double dx
+ SkinParameter getSkinParameter()
- void drawQueue(UGraphic,double,double,boolean)
- UPath getClosingPath(double,double)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.graphic.USymbolQueue.MyUGraphicQueue {
- double x1
- double x2
- double fullHeight
# AbstractUGraphicHorizontalLine copy(UGraphic)
# void drawHline(UGraphic,UHorizontalLine,UTranslate)
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
interface net.sourceforge.plantuml.ugraphic.UGraphic {
+ StringBounder getStringBounder()
+ UParam getParam()
+ void draw(UShape)
+ UGraphic apply(UChange)
+ ColorMapper getColorMapper()
+ void startUrl(Url)
+ void closeUrl()
+ void startGroup(UGroupType,String)
+ void closeGroup()
+ void flushUg()
+ boolean matchesProperty(String)
+ HColor getDefaultBackground()
}
class net.sourceforge.plantuml.posimo.LabelImage {
- ISkinParam param
- Rose rose
- TextBlock name
+ Dimension2D getDimension(StringBounder)
+ void drawU(UGraphic,double,double)
}
class net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2 {
- Mode mode
- {static} RegexConcat getRegexConcat(Mode)
# boolean isForbidden(CharSequence)
# CommandExecutionResult executeArg(ClassDiagram,LineLocation,RegexResult)
- char getCharEncoding(String)
}
class net.sourceforge.plantuml.help.HelpFactory {
+ Help createEmptyDiagram(UmlSource,ISkinSimple)
# List<Command> createCommands()
}
class net.sourceforge.plantuml.graphic.USymbolFile {
- HorizontalAlignment stereotypeAlignement
+ SkinParameter getSkinParameter()
- void drawFile(UGraphic,double,double,boolean,double)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.graphic.TileImage {
- BufferedImage image
- int vspace
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.tim.EaterIncludeDef {
- String location
+ void analyze(TContext,TMemory)
+ String getLocation()
}
class net.sourceforge.plantuml.tim.EaterReturn {
- TValue value
+ void analyze(TContext,TMemory)
+ TValue getValue2()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleSpot {
- {static} int SIZE
- Swimlane swimlane
- String spot
- FontConfiguration fc
- HColor backColor
+ Collection<Ftile> getMyChildren()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock {
- double labelMargin
- double width
- double height
- TextBlock label
- HColor colorBar
- Swimlane swimlane
+ void setBlackBlockDimension(double,double)
+ void setLabel(TextBlock)
# FtileGeometry calculateDimensionFtile(StringBounder)
+ void drawU(UGraphic)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Collection<Ftile> getMyChildren()
}
class net.sourceforge.plantuml.sequencediagram.command.CommandAutonumberStop {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.creole.rosetta.ReaderCreole {
# String singleLineFormat(String)
+ List<String> transform(List<String>)
}
class net.sourceforge.plantuml.bpm.GridArray {
- int lines
- int cols
- Placeable[][] data
- ISkinParam skinParam
- double margin
+ String toString()
+ void setData(int,int,Placeable)
+ Placeable getData(int,int)
+ int getRows()
+ int getLines()
- double getHeightOfLine(StringBounder,int)
- double getWidthOfCol(StringBounder,int)
+ void drawU(UGraphic)
- void drawInternalGrid(UGraphic)
- void drawArrow(UGraphic,Point2D,Point2D)
- Point2D getCenterOf(StringBounder,int,int)
- int[] getCoord(Cell)
- void printMe()
}
abstract class net.sourceforge.plantuml.project.draw.TimeHeader {
- TimeScale timeScale
- Style style
- HColorSet colorSet
- ThemeStyle themeStyle
# Day min
# Day max
# double Y_POS_ROW16()
# double Y_POS_ROW28()
# HColor closedBackgroundColor()
# HColor closedFontColor()
+ {abstract}double getTimeHeaderHeight()
+ {abstract}double getTimeFooterHeight()
+ {abstract}void drawTimeHeader(UGraphic,double)
+ {abstract}void drawTimeFooter(UGraphic)
+ {abstract}double getFullHeaderHeight()
# void drawHline(UGraphic,double)
# FontConfiguration getFontConfiguration(int,boolean,HColor)
+ TimeScale getTimeScale()
# TextBlock getTextBlock(String,int,boolean,HColor)
# void printCentered(UGraphic,TextBlock,double,double)
# void printCentered(UGraphic,boolean,double,double,TextBlock)
# void drawRectangle(UGraphic,double,double,double)
}
class net.sourceforge.plantuml.tim.TFunctionSignature {
- String functionName
- int nbArg
- Set<String> namedArguments
+ boolean sameFunctionNameAs(TFunctionSignature)
+ String toString()
+ int hashCode()
+ boolean equals(Object)
+ String getFunctionName()
+ int getNbArg()
+ Set<String> getNamedArguments()
}
interface net.sourceforge.plantuml.api.mda.option2.MDAPackage {
+ String getName()
+ Collection<MDAEntity> getEntities()
}
class net.sourceforge.plantuml.sequencediagram.AutoNumber {
- boolean running
- DottedNumber current
- int increment
- DecimalFormat format
- String last
+ void go(DottedNumber,int,DecimalFormat)
+ void stop()
+ void resume(DecimalFormat)
+ void resume(int,DecimalFormat)
+ void incrementIntermediate()
+ void incrementIntermediate(int)
+ String getNextMessageNumber()
+ String getCurrentMessageNumber(boolean)
}
class net.sourceforge.plantuml.eggs.PSystemAppleTwo {
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.svek.YDelta {
- double delta
- double factor
+ Point2D.Double apply(Point2D)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseActiveLine {
- SymbolContext symbolContext
- boolean closeUp
- boolean closeDown
# void drawInternalU(UGraphic,Area)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.preproc.EvalBoolean {
- String str
- int pos
- char ch
- Truth truth
- void nextChar()
- boolean eat(char)
- boolean parseExpression()
- boolean parseTerm()
- boolean parseFactor()
- boolean isIdentifier()
+ boolean eval()
}
class net.sourceforge.plantuml.project.command.CommandSeparator {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(GanttDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.OptionPrint {
- {static} String hostname
+ {static} void printTestDot()
+ {static} void printHelp()
- {static} void exit(int)
+ {static} void printLicense()
+ {static} void printVersion()
+ {static} Collection<String> interestingProperties()
+ {static} Collection<String> interestingValues()
+ {static} String getHostName()
- {static} String getHostNameSlow()
- {static} String format(long)
+ {static} void printAbout()
+ {static} void printLanguage()
}
class net.sourceforge.plantuml.code.Spiral {
- PairInt current
- PairInt direction
- int step
- int lim
- int len
- int cpt
+ PairInt nextPoint()
- void oneStep()
}
class net.sourceforge.plantuml.skin.ActorHollow {
- double headDiam
- double bodyWidth
- double bodyHeight
- double neckHeight
- double armThickness
- double bodyThickness
- double legThickness
- SymbolContext symbolContext
+ void drawU(UGraphic)
- double thickness()
+ double getPreferredWidth()
+ double getPreferredHeight()
+ Dimension2D calculateDimension(StringBounder)
}
interface net.sourceforge.plantuml.ugraphic.Shadowable {
+ void setDeltaShadow(double)
+ double getDeltaShadow()
}
class net.sourceforge.plantuml.command.CommandFactorySprite {
- IRegex getRegexConcatMultiLine()
- IRegex getRegexConcatSingleLine()
+ Command<WithSprite> createSingleLine()
+ Command<WithSprite> createMultiLine(boolean)
- CommandExecutionResult executeInternal(WithSprite,RegexResult,List<String>)
- String concat(List<String>)
}
interface net.sourceforge.plantuml.api.mda.option2.MDADiagram {
+ Collection<MDAPackage> getPackages()
}
class net.sourceforge.plantuml.project.DaysAsDates {
- Day date1
- Day date2
+ Iterator<Day> iterator()
}
class net.sourceforge.plantuml.project.DaysAsDates.MyIterator {
- Day current
+ boolean hasNext()
+ Day next()
+ void remove()
}
class net.sourceforge.plantuml.cucadiagram.dot.DotMaker2 {
- {static} boolean isJunit
+ {static} void goJunit()
+ {static} boolean isJunit()
}
class net.sourceforge.plantuml.ugraphic.UPixel {
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileWithConnection {
- List<Connection> connections
+ String toString()
+ void drawU(UGraphic)
+ Collection<Connection> getInnerConnections()
}
abstract class net.sourceforge.plantuml.asciiart.AbstractComponentText {
+ Dimension2D getPreferredDimension(StringBounder)
+ Style[] getUsedStyles()
+ StyleSignature getDefaultStyleDefinition()
}
class net.sourceforge.plantuml.png.MetadataTag {
- Object source
- String tag
+ String getData()
- String displayMetadata(Node)
- String displayMetadata(Node,int)
}
abstract class net.sourceforge.plantuml.creole.atom.AbstractAtom {
+ List<Atom> splitInTwo(StringBounder,double)
}
class net.sourceforge.plantuml.tim.EaterDeclareProcedure {
- TFunctionImpl function
- LineLocation location
- boolean finalFlag
+ void analyze(TContext,TMemory)
- boolean peekUnquoted()
- boolean peekFinal()
+ TFunctionImpl getFunction()
+ boolean getFinalFlag()
}
class net.sourceforge.plantuml.code.Upf9Decoder {
~ {static} int decodeChar(InputStream)
+ {static} String decodeString(byte[],int)
}
class net.sourceforge.plantuml.tim.stdlib.Lower {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.golem.MinMaxGolem {
- int minX
- int minY
- int maxX
- int maxY
+ void manage(int,int)
+ void manage(Position)
+ int getMinX()
+ int getMinY()
+ int getWidth()
+ int getHeight()
}
class net.sourceforge.plantuml.sudoku.PSystemSudokuFactory {
- {static} Pattern2 p
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.asciiart.ComponentTextShape {
- ComponentType type
- Display stringsToDisplay
- AsciiShape shape
+ void drawU(UGraphic,Area,Context2D)
- int getHeight()
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.creole.atom.AtomSpace {
- double width
+ {static} Atom create(double)
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.openiconic.PSystemOpenIconic {
- String iconName
- double factor
# UDrawable getRootDrawable(FileFormatOption)
+ DiagramDescription getDescription()
+ ClockwiseTopRightBottomLeft getDefaultMargins()
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseEnglober {
- SymbolContext symbolContext
- double roundCorner
# void drawBackgroundInternalU(UGraphic,Area)
# void drawInternalU(UGraphic,Area)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks {
- Rainbow arrowColor
- double margin
+ double getYdelta1a(StringBounder)
+ Ftile addLinks(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionHorizontalThenVertical {
- Branch branch
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionVerticalThenHorizontal {
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionVerticalTop {
- Branch branch
+ void drawU(UGraphic)
- Point2D getP2(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionVerticalBottom {
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
}
class net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage {
- Component comp
# void drawInternalU(UGraphic,double,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getStartingX(StringBounder)
}
class net.sourceforge.plantuml.posimo.EntityImageNote2 {
- Component comp
+ Dimension2D getDimension(StringBounder)
+ void drawU(UGraphic,double,double,double,double)
}
class net.sourceforge.plantuml.FileFormatOption {
- FileFormat fileFormat
- boolean withMetadata
- boolean useRedForError
- String svgLinkTarget
- String hoverColor
- TikzFontDistortion tikzFontDistortion
- double scale
- String preserveAspectRatio
- String watermark
- boolean debugsvek
+ double getScaleCoef()
+ StringBounder getDefaultStringBounder(SvgCharSizeHack)
+ String getSvgLinkTarget()
+ boolean isWithMetadata()
+ String getPreserveAspectRatio()
+ FileFormatOption withUseRedForError()
+ FileFormatOption withTikzFontDistortion(TikzFontDistortion)
+ FileFormatOption withSvgLinkTarget(String)
+ FileFormatOption withPreserveAspectRatio(String)
+ FileFormatOption withHoverColor(String)
+ FileFormatOption withScale(double)
+ FileFormatOption withWartermark(String)
+ String toString()
+ FileFormat getFileFormat()
+ AffineTransform getAffineTransform()
+ boolean isUseRedForError()
+ void setDebugSvek(boolean)
+ boolean isDebugSvek()
+ String getHoverColor()
+ void hideMetadata()
+ TikzFontDistortion getTikzFontDistortion()
+ String getWatermark()
}
class net.sourceforge.plantuml.creole.rosetta.WriterWiki {
- WikiLanguage syntaxDestination
+ List<String> transform(List<String>)
}
interface net.sourceforge.plantuml.project.core3.TimeLine {
+ {static} Long MAX_TIME
+ long getNext(long)
+ long getPrevious(long)
}
class net.sourceforge.plantuml.code.AsciiEncoderHex {
+ String encode(byte[])
+ byte[] decode(String)
}
class net.sourceforge.plantuml.wire.CommandSpot {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(WireDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.html.LinkHtmlPrinter {
- Link link
- boolean chiral
~ void printLink(PrintWriter)
- String getHtml(String,String)
- String getHtmlChiral(String,String)
~ {static} String htmlLink(IEntity)
~ {static} String urlOf(IEntity)
}
class net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText {
- Component compText
- ParticipantBox p1
- ParticipantBox p2
# void drawInternalU(UGraphic,double,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getStartingX(StringBounder)
+ double getEndingY(StringBounder)
}
interface net.sourceforge.plantuml.LineLocation {
+ int getPosition()
+ String getDescription()
+ LineLocation getParent()
}
class net.sourceforge.plantuml.real.RealImpl {
- double currentValue
~ void move(double)
~ double getCurrentValueInternal()
+ Real addAtLeast(double)
+ void ensureBiggerThan(Real)
+ void compileNow()
}
class net.sourceforge.plantuml.yaml.YamlDiagramFactory {
+ Diagram createSystem(UmlSource,ISkinSimple)
}
interface net.sourceforge.plantuml.project.timescale.TimeScale {
+ double getStartingPosition(Day)
+ double getEndingPosition(Day)
+ double getWidth(Day)
+ boolean isBreaking(Day)
}
class net.sourceforge.plantuml.tim.stdlib.Getenv {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
- String getenv(String)
}
interface net.sourceforge.plantuml.svek.CucaDiagramFileMaker {
+ ImageData createFile(OutputStream,List<String>,FileFormatOption)
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryImage {
- DataSource dataSource
- Dictionary dictionary
+ Terminated<Element> create()
+ boolean ready()
}
interface net.sourceforge.plantuml.style.WithStyle {
+ Style[] getUsedStyles()
}
abstract class net.sourceforge.plantuml.skin.AbstractComponent {
- Style style
+ Style[] getUsedStyles()
+ StyleSignature getDefaultStyleDefinition()
# Style getStyle()
# {abstract}void drawInternalU(UGraphic,Area)
# void drawBackgroundInternalU(UGraphic,Area)
+ void drawU(UGraphic,Area,Context2D)
+ double getPaddingX()
+ double getPaddingY()
+ {abstract}double getPreferredWidth(StringBounder)
+ {abstract}double getPreferredHeight(StringBounder)
+ Dimension2D getPreferredDimension(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.PlacementStrategyY1Y2 {
+ Map<TextBlock,Point2D> getPositions(double,double)
}
class net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder {
- TextBlock textBlock
- CompressionMode mode
- PiecewiseAffineTransform piecewiseAffineTransform
- MinMax cachedMinMax
+ {static} TextBlock build(CompressionMode,TextBlock,PiecewiseAffineTransform)
+ void drawU(UGraphic)
+ MinMax getMinMax(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
+ HColor getBackcolor()
}
class net.sourceforge.plantuml.ugraphic.visio.UGraphicVdx {
- StringBounder stringBounder
+ double dpiFactor()
# AbstractCommonUGraphic copyUGraphic()
- void register()
+ StringBounder getStringBounder()
+ void writeImageTOBEMOVED(OutputStream,String,int)
+ void createVsd(OutputStream)
+ boolean matchesProperty(String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchNude {
# double xSeparation
# List<Ftile> tiles
- Swimlane in
+ Collection<Ftile> getMyChildren()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ UTranslate getTranslateFor(Ftile,StringBounder)
# UTranslate getTranslateNude(Ftile,StringBounder)
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
# FtileGeometry calculateDimensionInternalSlow(StringBounder)
}
class net.sourceforge.plantuml.telnet.AcceptTelnetClient {
- Socket clientSocket
- BufferedReader br
- OutputStream os
+ String runInternal()
+ void run()
}
class net.sourceforge.plantuml.project.ConstantPlan {
- int loadPerInstant
+ {static} LoadPlanable normal()
+ {static} LoadPlanable partial(int)
+ int getLoadAt(Day)
}
class net.sourceforge.plantuml.eps.PostScriptCommandLineTo {
- double x
- double y
+ String toPostString()
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseGroupingElse {
- HColor groupBorder
- HColor backgroundColor
# void drawBackgroundInternalU(UGraphic,Area)
# void drawInternalU(UGraphic,Area)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.jsondiagram.JsonDiagram {
- JsonValue root
- List<String> highlighted
+ DiagramDescription getDescription()
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
- void drawInternal(UGraphic)
- TextBlockBackcolored getTextBlock()
}
class net.sourceforge.plantuml.cucadiagram.Body3 {
- List<CharSequence> rawBody
- FontParam fontParam
- ISkinParam skinParam
- Stereotype stereotype
- Style style
+ void drawU(UGraphic)
- TextBlock getTextBlock()
+ Ports getPorts(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandEndSwitch {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.code.AsciiEncoderFinalZeros {
+ String encode(byte[])
- void append3bytes(StringBuilder,int,int,int)
}
class net.sourceforge.plantuml.logo.PSystemLogoFactory {
+ PSystemLogo initDiagram(UmlSource,String)
+ PSystemLogo executeLine(UmlSource,PSystemLogo,String)
}
interface net.sourceforge.plantuml.cucadiagram.IEntity {
+ Code getCode()
+ String getCodeGetName()
+ Ident getIdent()
+ USymbol getUSymbol()
+ void setUSymbol(USymbol)
+ LeafType getLeafType()
+ Display getDisplay()
+ IGroup getParentContainer()
+ void setDisplay(Display)
+ String getUid()
+ Url getUrl99()
+ Stereotype getStereotype()
+ void setStereotype(Stereotype)
+ Bodier getBodier()
+ void addUrl(Url)
+ boolean isGroup()
+ boolean hasUrl()
+ int getHectorLayer()
+ void setHectorLayer(int)
+ int getRawLayout()
+ void putTip(String,Display)
+ Map<String,Display> getTips()
+ void addStereotag(Stereotag)
+ Set<Stereotag> stereotags()
+ boolean isAloneAndUnlinked()
+ void setThisIsTogether()
+ String getCodeLine()
+ void setCodeLine(LineLocation)
}
class net.sourceforge.plantuml.tim.EaterUndef {
+ void analyze(TContext,TMemory)
}
class net.sourceforge.plantuml.preproc.FileWithSuffix {
- AFile file
- String suffix
- String entry
- String description
+ String toString()
+ Reader getReader(String)
- InputStream getDataFromZip(InputStream,String)
+ boolean fileOk()
~ {static} FileWithSuffix none()
+ int hashCode()
+ boolean equals(Object)
- {static} boolean same(String,String)
+ AParentFolder getParentFile()
+ String getDescription()
+ String getSuffix()
- {static} boolean equals(String,String)
+ {static} Set<File> convert(Set<FileWithSuffix>)
+ {static} String getFileName(File)
}
class net.sourceforge.plantuml.mindmap.SymetricalTeePositioned {
- SymetricalTee tee
- double y
+ String toString()
+ void moveSoThatSegmentA1isOn(double)
+ void moveSoThatSegmentA2isOn(double)
+ void move(double)
+ Line2D getSegmentA1()
+ Line2D getSegmentB1()
+ Line2D getSegmentA2()
+ Line2D getSegmentB2()
+ double getMaxX()
+ double getMaxY()
+ double getMinY()
+ double getY()
+ SymetricalTeePositioned getMax(SymetricalTeePositioned)
}
class net.sourceforge.plantuml.sprite.SpriteUtils {
+ {static} String SPRITE_NAME
+ {static} String encodeColor(BufferedImage,String)
+ {static} String encode(BufferedImage,String,SpriteGrayLevel)
+ {static} String encodeCompressed(BufferedImage,String,SpriteGrayLevel)
}
class net.sourceforge.plantuml.activitydiagram3.WithNote {
- Collection<PositionedNote> notes
+ boolean addNote(Display,NotePosition,NoteType,Colors,Swimlane)
# Ftile eventuallyAddNote(FtileFactory,Ftile,Swimlane)
+ Collection<PositionedNote> getPositionedNotes()
+ boolean hasNotes()
}
class net.sourceforge.plantuml.utils.MathUtils {
+ {static} double max(double,double)
+ {static} double max(double,double,double)
+ {static} double max(double,double,double,double)
+ {static} double max(double,double,double,double,double)
+ {static} double min(double,double)
+ {static} double min(double,double,double)
+ {static} double min(double,double,double,double)
+ {static} double min(double,double,double,double,double)
+ {static} double limitation(double,double,double)
}
class net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile {
- LifeEvent lifeEvent
- TileArguments tileArguments
- LivingSpace livingSpace
- Rose skin
- ISkinParam skinParam
# void callbackY_internal(double)
+ Event getEvent()
+ double getContactPointRelative()
+ void drawU(UGraphic)
+ boolean isDestroyWithoutMessage()
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseGroupingSpace {
- double space
+ Style[] getUsedStyles()
+ StyleSignature getDefaultStyleDefinition()
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
+ void drawU(UGraphic,Area,Context2D)
+ Dimension2D getPreferredDimension(StringBounder)
}
class net.sourceforge.plantuml.oregon.SecureCoder {
- {static} int[] m
- {static} int[] dec
+ int encode(int)
+ int decode(int)
}
interface net.sourceforge.plantuml.cucadiagram.dot.GraphvizVersion {
+ boolean useShield()
+ boolean useProtectionWhenThereALinkFromOrToGroup()
+ boolean useXLabelInsteadOfLabel()
+ boolean isVizjs()
+ boolean ignoreHorizontalLinks()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandArrowLong3 {
+ String getPatternEnd()
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeNow(ActivityDiagram3,BlocLines)
- void removeStarting(List<CS>,String)
- void removeEnding(List<CS>)
}
abstract class net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract {
# ClassDiagram classDiagram
# Document document
# Element ownedElement
# Set<IEntity> done
# String forXMI(String)
# String forXMI(Display)
+ void transformerXml(OutputStream)
# Element createEntityNode(IEntity)
}
class net.sourceforge.plantuml.svg.SvgData {
- String svg
- double startX
- double startY
- double width
- double height
+ {static} SvgData fromGraphViz(String)
- {static} String removeSvgXmlHeader1(String)
+ SvgData mutateFromSvgTitler(String,double,double)
+ String getSvg()
- void init()
- String modifiedSvgXmlHeader()
+ double getWidth()
+ double getHeight()
}
class net.sourceforge.plantuml.command.SkinLoader {
+ {static} Pattern2 p1
- List<String> context
- TitledDiagram diagram
- void push(String)
- void pop()
- String getFullParam()
+ CommandExecutionResult execute(BlocLines,String)
}
interface net.sourceforge.plantuml.project.lang.Sentence {
+ IRegex toRegex()
+ CommandExecutionResult execute(GanttDiagram,RegexResult)
}
class net.sourceforge.plantuml.cucadiagram.dot.GraphvizUtils {
+ {static} String VIZJS
- {static} int DOT_VERSION_LIMIT
- {static} String dotExecutable
- {static} ThreadLocal<Integer> limitSize
- {static} String dotVersion
- {static} boolean isWindows()
+ {static} String getDotExecutableForTest()
+ {static} void setDotExecutable(String)
+ {static} Graphviz createForSystemDot(ISkinParam,String,String)
+ {static} Graphviz create(ISkinParam,String,String)
- {static} boolean useVizJs(ISkinParam)
+ {static} File getDotExe()
+ {static} String getenvGraphvizDot()
+ {static} void removeLocalLimitSize()
+ {static} void setLocalImageLimit(int)
+ {static} int getenvImageLimit()
+ {static} String getenvDefaultConfigFilename()
+ {static} String getenvLogData()
+ {static} String dotVersion()
+ {static} boolean graphviz244onWindows()
+ {static} int retrieveVersion(String)
+ {static} int getDotVersion()
+ {static} int addDotStatus(List<String>,boolean)
~ {static} String getTestCreateSimpleFile()
}
class net.sourceforge.plantuml.sequencediagram.command.CommandIgnoreNewpage {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.xmi.XmiClassDiagramStar {
- void addLink(Link)
- void addExtension(Link,String)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleLine {
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
abstract class net.sourceforge.plantuml.tim.Eater {
- int i
- String s
- LineLocation lineLocation
+ LineLocation getLineLocation()
+ {abstract}void analyze(TContext,TMemory)
+ int getCurrentPosition()
# String eatAllToEnd()
# TValue eatExpression(TContext,TMemory)
# TokenStack eatTokenStack()
# TValue eatExpressionStopAtColon(TContext,TMemory)
# void addIntoTokenStack(TokenStack,boolean)
+ String eatAndGetQuotedString()
# String eatAndGetOptionalQuotedString()
+ String eatAndGetNumber()
+ String eatAndGetSpaces()
# String eatAndGetVarname()
# String eatAndGetFunctionName()
+ void skipSpaces()
# void skipUntilChar(char)
+ char peekChar()
+ boolean matchAffectation()
+ char peekCharN2()
# boolean hasNextChar()
+ char eatOneChar()
# void checkAndEatChar(char)
# boolean safeCheckAndEatChar(char)
# void optionallyEatChar(char)
# void checkAndEatChar(String)
# void addUpToLastLetterOrUnderscoreOrDigit(StringBuilder)
# void addUpTo(char,StringBuilder)
# TFunctionImpl eatDeclareFunction(TContext,TMemory,boolean,LineLocation,boolean,TFunctionType)
# TFunctionImpl eatDeclareReturnFunctionWithOptionalReturn(TContext,TMemory,boolean,LineLocation)
# TFunctionImpl eatDeclareProcedure(TContext,TMemory,boolean,LineLocation)
}
interface net.sourceforge.plantuml.tim.TFunction {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TFunctionType getFunctionType()
+ void executeProcedure(TContext,TMemory,LineLocation,String)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
+ void executeProcedureInternal(TContext,TMemory,List<TValue>,Map<String,TValue>)
+ boolean isUnquoted()
}
class net.sourceforge.plantuml.mindmap.MindMapDiagram {
- Branch left
- Branch right
- Direction defaultDirection
- String first
+ void setDefaultDirection(Direction)
+ DiagramDescription getDescription()
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
- TextBlockBackcolored getTextBlock()
- void drawMe(UGraphic)
- void computeFinger()
+ CommandExecutionResult addIdea(HColor,int,Display,IdeaShape)
+ CommandExecutionResult addIdea(HColor,int,Display,IdeaShape,Direction)
+ CommandExecutionResult addIdea(String,HColor,int,Display,IdeaShape)
- CommandExecutionResult addIdeaInternal(String,HColor,int,Display,IdeaShape,Direction)
+ int getSmartLevel(String)
}
class net.sourceforge.plantuml.mindmap.MindMapDiagram.Branch {
- Idea root
- Idea last
- Finger finger
- void initRoot(StyleBuilder,HColor,Display,IdeaShape,String)
- Idea getParentOfLast(int)
- CommandExecutionResult add(StyleBuilder,HColor,int,Display,IdeaShape,String)
}
interface net.sourceforge.plantuml.WithSprite {
+ void addSprite(String,Sprite)
}
interface net.sourceforge.plantuml.ugraphic.Scalable {
+ UShape getScaled(double)
}
class net.sourceforge.plantuml.graphic.CircledCharacter {
- String c
- UFont font
- HColor innerCircle
- HColor circle
- HColor fontColor
- double radius
+ void drawU(UGraphic)
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.SkinParamForceColor {
- ColorParam colorParam
- HColor color
+ HColor getHtmlColor(ColorParam,Stereotype,boolean)
}
abstract class net.sourceforge.plantuml.cucadiagram.EntityUtils {
+ {static} boolean groupRoot(IGroup)
- {static} boolean isParent(IGroup,IGroup)
+ {static} boolean isPureInnerLink12(IGroup,Link)
+ {static} boolean isPureInnerLink3(IGroup,Link)
}
class net.sourceforge.plantuml.dedication.TinyHashableString {
- String sentence
- int cachedTinyHash
+ String getSentence()
+ int tinyHash()
}
class net.sourceforge.plantuml.brotli.BrotliRuntimeException {
}
class net.sourceforge.plantuml.elk.proxy.core.util.NullElkProgressMonitor {
+ Object obj
}
abstract class net.sourceforge.plantuml.tim.ExecutionContexts {
- Deque<ExecutionContextIf> allIfs
- Deque<ExecutionContextWhile> allWhiles
- Deque<ExecutionContextForeach> allForeachs
+ void addIf(ExecutionContextIf)
+ void addWhile(ExecutionContextWhile)
+ void addForeach(ExecutionContextForeach)
+ ExecutionContextIf peekIf()
+ ExecutionContextWhile peekWhile()
+ ExecutionContextForeach peekForeach()
+ ExecutionContextIf pollIf()
+ ExecutionContextWhile pollWhile()
+ ExecutionContextForeach pollForeach()
+ boolean areAllIfOk(TContext,TMemory)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandClock {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.preproc.UncommentReadLine {
- {static} Pattern2 unpause
- ReadLine raw
- String headerToRemove
- boolean paused
+ StringLocated readLine()
+ void close()
+ void setPaused(boolean)
}
class net.sourceforge.plantuml.tim.EaterForeach {
- String varname
- JsonArray jsonArray
+ void analyze(TContext,TMemory)
+ boolean isSkip()
+ String getVarname()
+ JsonArray getJsonArray()
}
abstract class net.sourceforge.plantuml.command.CommandMultilinesBracket {
- Pattern2 starting
# boolean isCommandForbidden()
+ String[] getDescription()
# void actionIfCommandValid()
# Pattern2 getStartingPattern()
+ CommandControl isValid(BlocLines)
# {abstract}boolean isLineConsistent(String,int)
}
class net.sourceforge.plantuml.mda.MDAEntityImpl {
- ILeaf leaf
+ String getName()
}
class net.sourceforge.plantuml.ugraphic.UPath {
- String comment
- String codeLine
- List<USegment> segments
- MinMax minmax
- boolean isOpenIconic
- boolean ignoreForCompressionOnX
- boolean ignoreForCompressionOnY
+ void add(double[],USegmentType)
+ boolean isEmpty()
- void addInternal(USegment)
+ UPath translate(double,double)
+ UPath rotate(double)
+ void moveTo(Point2D)
+ void lineTo(Point2D)
+ void moveTo(double,double)
+ void lineTo(double,double)
+ void cubicTo(Point2D,Point2D,Point2D)
+ void cubicTo(double,double,double,double,double,double)
+ void quadTo(double,double,double,double)
+ void quadTo(Point2D,Point2D)
+ void arcTo(double,double,double,double,double,double,double)
+ void arcTo(Point2D,double,double,double)
+ void closePath()
+ double getMaxX()
+ double getMaxY()
+ double getMinX()
+ double getMinY()
+ String toString()
+ Iterator<USegment> iterator()
+ boolean isOpenIconic()
+ void setOpenIconic(boolean)
+ String getComment()
+ String getCodeLine()
+ void setIgnoreForCompressionOnX()
+ void setIgnoreForCompressionOnY()
+ void drawWhenCompressed(UGraphic,CompressionMode)
+ boolean isIgnoreForCompressionOn(CompressionMode)
}
class net.sourceforge.plantuml.sequencediagram.teoz.NotesTile {
- LivingSpaces livingSpaces
- Rose skin
- ISkinParam skinParam
- Notes notes
+ Event getEvent()
- Component getComponent(StringBounder,Note)
- ComponentType getNoteComponentType(NoteStyle)
+ void drawU(UGraphic)
- double getUsedWidth(StringBounder,Note)
- Real getXcenter(StringBounder,Note)
- Real getX(StringBounder,Note)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
- Real getX2(StringBounder,Note)
+ Real getMaxX()
}
class net.sourceforge.plantuml.TikzFontDistortion {
- double magnify
- double distortion
+ String toString()
+ {static} TikzFontDistortion fromValue(String)
+ {static} TikzFontDistortion getDefault()
+ double getMagnify()
+ double getDistortion()
}
interface net.sourceforge.plantuml.real.RealOrigin {
+ void compileNow()
}
class net.sourceforge.plantuml.descdiagram.command.CommandArchimate {
- {static} IRegex getRegexConcat()
- {static} ColorParser color()
# CommandExecutionResult executeArg(DescriptionDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.descdiagram.EntityImageMachine {
- TextBlock name
- TextBlock stereo
- Url url
- UStroke getStroke()
- Dimension2D getTitleDimension(StringBounder)
- Dimension2D getNameAndSteretypeDimension(StringBounder)
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.comp.SlotSet {
- List<Slot> all
+ SlotSet filter(double,double)
+ void addAll(SlotSet)
+ void addSlot(double,double)
+ SlotSet smaller(double)
+ String toString()
+ List<Slot> getSlots()
+ Iterator<Slot> iterator()
+ SlotSet reverse()
+ void drawDebugX(UGraphic,double)
}
class net.sourceforge.plantuml.ugraphic.comp.ExpandTransform {
- Set<Expand> all
+ String toString()
+ void addExpandIncludingLimit(double,double)
+ void addExpandExcludingLimit(double,double)
+ double transform(double)
}
class net.sourceforge.plantuml.bpm.BpmDiagramFactory {
# List<Command> createCommands()
+ AbstractPSystem createEmptyDiagram(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.graphic.USymbolPerson {
+ SkinParameter getSkinParameter()
- void drawHeadAndBody(UGraphic,boolean,Dimension2D,double)
- double headSize(Dimension2D)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
interface net.sourceforge.plantuml.LineConfigurable {
+ Colors getColors(ISkinParam)
+ void setSpecificColorTOBEREMOVED(ColorType,HColor)
}
class net.sourceforge.plantuml.svek.HeaderLayout {
- TextBlock name
- TextBlock stereo
- TextBlock generic
- TextBlock circledCharacter
- {static} TextBlock protectAgaintNull(TextBlock)
+ Dimension2D getDimension(StringBounder)
+ void drawU(UGraphic,double,double)
}
class net.sourceforge.plantuml.posimo.RacorderFollowTangeanteOld {
+ DotPath getRacordIn(Rectangle2D,Line2D)
}
interface net.sourceforge.plantuml.ugraphic.PlacementStrategy {
+ void add(TextBlock)
+ Map<TextBlock,Point2D> getPositions(double,double)
}
class net.sourceforge.plantuml.gitlog.GitCurve {
- List<Point2D> points
- Mirror xMirror
- Point2D sp
- Point2D ep
- Point2D getPoint(ST_splines,int)
+ void drawCurve(HColor,UGraphic)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandNewpage {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.timingdiagram.graphic.HexaShape {
- double width
- double height
- SymbolContext context
- double delta
+ {static} HexaShape create(double,double,SymbolContext)
+ void drawU(UGraphic)
}
interface net.sourceforge.plantuml.tim.iterator.CodeIterator {
+ StringLocated peek()
+ void next()
+ CodePosition getCodePosition()
+ void jumpToCodePosition(CodePosition)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryLineCrowfoot {
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.jsondiagram.StyleExtractor {
- List<String> list
- List<StringLocated> style
+ void applyStyles(ISkinParam)
+ Iterator<String> getIterator()
}
class net.sourceforge.plantuml.sequencediagram.teoz.LivingSpaces {
- Map<Participant,LivingSpace> all
+ Collection<LivingSpace> values()
+ void addConstraints(StringBounder)
+ LivingSpace previous(LivingSpace)
+ LivingSpace next(LivingSpace)
+ Collection<Participant> participants()
+ void put(Participant,LivingSpace)
+ LivingSpace get(Participant)
+ void drawHeads(UGraphic,Context2D,VerticalAlignment)
+ double getHeadHeight(StringBounder)
+ void drawLifeLines(UGraphic,double,Context2D)
+ void delayOn(double,double)
+ int size()
}
class net.sourceforge.plantuml.preproc.ReadLineReader {
- BufferedReader br
- LineLocationImpl location
- String description
+ String toString()
+ {static} ReadLine create(Reader,String)
+ {static} ReadLine create(Reader,String,LineLocation)
+ StringLocated readLine()
+ void close()
}
class net.sourceforge.plantuml.creole.Sea {
- double currentX
- Map<Atom,Position> positions
- StringBounder stringBounder
+ void add(Atom)
+ Position getPosition(Atom)
+ void doAlign()
+ void translateMinYto(double)
+ void exportAllPositions(Map<Atom,Position>)
+ double getMinY()
+ double getMaxY()
+ double getHeight()
+ MinMax update(MinMax)
+ double getWidth()
}
interface net.sourceforge.plantuml.sequencediagram.graphic.Frontier {
~ double getFreeY(ParticipantRange)
~ Frontier add(double,ParticipantRange)
}
class net.sourceforge.plantuml.style.ValueNull {
+ {static} Value NULL
+ int asInt()
+ double asDouble()
+ boolean asBoolean()
+ String asString()
+ int asFontStyle()
+ HColor asColor(ThemeStyle,HColorSet)
+ HorizontalAlignment asHorizontalAlignment()
}
class net.sourceforge.plantuml.code.TranscoderSmart {
- Transcoder oldOne
- Transcoder zlib
- Transcoder hexOnly
+ String decode(String)
+ String encode(String)
}
class net.sourceforge.plantuml.ScaleWidth {
- double maxWidth
+ double getScaleInternal(double,double)
}
interface net.sourceforge.plantuml.real.Real {
+ void printCreationStackTrace()
+ String getName()
+ double getCurrentValue()
+ Real addFixed(double)
+ Real addAtLeast(double)
+ void ensureBiggerThan(Real)
}
class net.sourceforge.plantuml.timingdiagram.TimingDiagram {
+ {static} double marginX1
- double marginX2
- Map<String,TimeTick> codes
- Map<String,Player> players
- Map<String,PlayerClock> clocks
- List<TimeMessage> messages
- List<Highlight> highlights
- TimingRuler ruler
- TimeTick now
- Player lastPlayer
- boolean drawTimeAxis
- boolean compactByDefault
+ DiagramDescription getDescription()
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
- TextBlockBackcolored getTextBlock()
- void drawInternal(UGraphic)
- void drawHorizontalSeparator(UGraphic)
- void drawBorder(UGraphic)
- UStroke getBorderStroke()
- UTranslate getLastTranslate(StringBounder)
- void drawHighlightsBack(UGraphic)
- void drawHighlightsLines(UGraphic)
- double getHeightTotal(StringBounder)
- double getHeightInner(StringBounder)
- double getHeightForCaptions(StringBounder)
- double getWidthTotal(StringBounder)
- double getPart1MaxWidth(StringBounder)
- void drawMessages(UGraphic,TimeMessage)
- UTranslate getUTranslateForPlayer(Player,StringBounder)
+ CommandExecutionResult createRobustConcise(String,String,TimingStyle,boolean)
+ CommandExecutionResult createClock(String,String,int,int,boolean)
+ PlayerAnalog createAnalog(String,String,boolean)
+ CommandExecutionResult createBinary(String,String,boolean)
+ TimeMessage createTimeMessage(Player,TimeTick,Player,TimeTick,String)
+ void addTime(TimeTick,String)
+ TimeTick getCodeValue(String)
+ void updateNow(TimeTick)
+ Player getPlayer(String)
+ TimeTick getNow()
+ TimeTick getClockValue(String,int)
+ void setLastPlayer(Player)
+ Player getLastPlayer()
+ void scaleInPixels(long,long)
+ CommandExecutionResult hideTimeAxis()
+ CommandExecutionResult highlight(TimeTick,TimeTick,Display,Colors)
+ void goCompactMode()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircle {
- boolean fill
- HColor backgroundColor
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.preproc2.ReadFilterMergeLines {
+ ReadLine applyFilter(ReadLine)
}
class net.sourceforge.plantuml.tim.ExecutionContextForeach {
- String varname
- JsonArray jsonArray
- CodePosition codePosition
- boolean skipMe
- int currentIndex
+ {static} ExecutionContextForeach fromValue(String,JsonArray,CodePosition)
+ void skipMeNow()
+ boolean isSkipMe()
+ CodePosition getStartForeach()
+ int currentIndex()
+ void inc()
+ String getVarname()
+ JsonArray getJsonArray()
}
class net.sourceforge.plantuml.statediagram.command.CommandConcurrentState {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(StateDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.jsondiagram.Arrow {
- Point2D p1
- Point2D p2
+ void drawArrow(UGraphic)
- Point2D getPoint(Point2D,double,double)
}
class net.sourceforge.plantuml.ScaleHeight {
- double maxHeight
+ double getScaleInternal(double,double)
}
interface net.sourceforge.plantuml.timingdiagram.Clocks {
+ TimeTick getNow()
+ TimeTick getClockValue(String,int)
+ TimeTick getCodeValue(String)
}
class net.sourceforge.plantuml.project.lang.SubjectLinks {
+ IRegex toRegex()
+ Failable<GanttDiagram> getMe(GanttDiagram,RegexResult)
+ Collection<? extends SentenceSimple> getSentences()
}
class net.sourceforge.plantuml.project.lang.SubjectLinks.InColor {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.cucadiagram.Stereotag {
- {static} String SINGLE
- String name
+ {static} String pattern()
+ String getName()
+ int hashCode()
+ boolean equals(Object)
+ String toString()
}
class net.sourceforge.plantuml.svek.SvekUtils {
+ {static} void traceString(SFile,String)
+ {static} double getValue(String,int,String)
+ {static} double getMaxX(List<Point2D.Double>)
+ {static} double getMinX(List<Point2D.Double>)
+ {static} Point2D.Double getMinXY(List<Point2D.Double>)
+ {static} double getMaxY(List<Point2D.Double>)
+ {static} double getMinY(List<Point2D.Double>)
+ {static} void println(StringBuilder)
+ {static} String pixelToInches(double)
}
class net.sourceforge.plantuml.descdiagram.DescriptionDiagram {
+ Ident cleanIdent(Ident)
+ ILeaf getOrCreateLeaf(Ident,Code,LeafType,USymbol)
- boolean isUsecase()
+ void makeDiagramReady()
+ String checkFinalError()
}
class net.sourceforge.plantuml.classdiagram.command.CommandLayoutNewLine {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ClassDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.version.PSystemLicenseFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.DirWatcher2 {
- File dir
- Option option
- String pattern
- Map<File,FileWatcher> modifieds
- ExecutorService executorService
+ Map<File,Future<List<GeneratedImage>>> buildCreatedFiles()
- boolean fileToProcess(String)
+ File getDir()
+ void cancel()
+ void waitEnd()
}
class net.sourceforge.plantuml.elk.proxy.core.options.Direction {
+ {static} Object DOWN
}
interface net.sourceforge.plantuml.Stdrpt {
+ void printInfo(PrintStream,Diagram)
+ void finalMessage(ErrorStatus)
+ void errorLine(int,File)
}
class net.sourceforge.plantuml.salt.element.ElementMenuEntry {
- TextBlock block
- String text
- HColor background
- double xxx
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
+ double getX()
+ void setX(double)
+ String getText()
+ HColor getBackground()
+ void setBackground(HColor)
}
class net.sourceforge.plantuml.posimo.RacorderInToCenter {
+ DotPath getRacordIn(Rectangle2D,Line2D)
}
class net.sourceforge.plantuml.asciiart.UmlCharAreaImpl {
+ void drawBoxSimple(int,int,int,int)
+ void drawBoxSimpleUnicode(int,int,int,int)
+ void drawShape(AsciiShape,int,int)
+ void drawStringsLRSimple(Collection<? extends CharSequence>,int,int)
+ void drawStringsLRUnicode(Collection<? extends CharSequence>,int,int)
+ void drawNoteSimple(int,int,int,int)
+ void drawNoteSimpleUnicode(int,int,int,int)
}
class net.sourceforge.plantuml.sequencediagram.teoz.LivingSpace {
- Participant p
- ISkinParam skinParam
- ComponentType headType
- ComponentType tailType
- MutingLine mutingLine
- Rose rose
- LiveBoxes liveboxes
- Real posB
- Real posC
- Real posD
- boolean create
- double createY
- ParticipantEnglober englober
+ int getLevelAt(Tile,EventsHistoryMode)
+ void addStepForLivebox(Event,double)
+ String toString()
- {static} String currentValue(Real)
- boolean useContinueLineBecauseOfDelay(List<Event>)
+ void drawLineAndLiveboxes(UGraphic,double,Context2D)
+ void drawHead(UGraphic,Context2D,VerticalAlignment,HorizontalAlignment)
+ Dimension2D getHeadPreferredDimension(StringBounder)
- double getPreferredWidth(StringBounder)
+ Real getPosC(StringBounder)
+ Real getPosC2(StringBounder)
+ Real getPosD(StringBounder)
+ Real getPosB()
+ Participant getParticipant()
+ void goCreate(double)
+ void goCreate()
+ void delayOn(double,double)
+ ParticipantEnglober getEnglober()
}
class net.sourceforge.plantuml.oregon.PSystemOregon {
- Screen screen
- List<String> inputs
+ ImageBuilder createImageBuilder(FileFormatOption)
+ void add(String)
- Screen getScreen()
# UDrawable getRootDrawable(FileFormatOption)
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.ugraphic.color.HColorNone {
+ UBackground bg()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandElseLegacy1 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.SourceFileReader {
- File getDirIfDirectory(String)
# SuggestedFile getSuggestedFile(BlockUml)
}
class net.sourceforge.plantuml.wire.CommandComponent {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(WireDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.zopfli.Squeeze {
~ {static} LzStore optimal(Cookie,int,LongestMatchCache,byte[],int,int)
~ {static} void optimalRun(Cookie,LongestMatchCache,byte[],int,int,char[],LzStore)
- {static} long fixedCost(int,int)
- {static} void bestLengths(Cookie,LongestMatchCache,int,byte[],int,int,long,SymbolStats,char[],long[])
~ {static} void bestFixedLengths(Cookie,LongestMatchCache,byte[],int,int,char[],long[])
}
class net.sourceforge.plantuml.sequencediagram.puma.PUnivers {
- Collection<PSegment> all
- Collection<FixedLink> links
+ PSegment createPSegment(double)
+ void addFixedLink(PSegment,double,PSegment,double)
+ void solve()
}
class net.sourceforge.plantuml.FileGroup {
- List<File> result
- String pattern
- List<String> excluded
- Option option
- {static} Pattern2 predirPath
- {static} Pattern2 noStarInDirectory
- void recurse()
- void initNoStar()
- void addResultFile(File)
- void addSimpleDirectory(File)
- void addSimpleDirectory(File,String)
- {static} String getNormalizedPath(File)
- void initWithSimpleStar()
- void initWithDoubleStar(File)
+ List<File> getFiles()
+ {static} String toRegexp(String)
}
class net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand {
- IRegex getRegexConcatMultiLine()
- IRegex getRegexConcatSingleLine()
+ Command<SequenceDiagram> createSingleLine()
+ Command<SequenceDiagram> createMultiLine(boolean)
- CommandExecutionResult executeInternal(SequenceDiagram,RegexResult,BlocLines)
}
class net.sourceforge.plantuml.salt.element.ElementEmpty {
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
}
class net.sourceforge.plantuml.webp.BoolDecoder {
~ int bit_count
~ ImageInputStream data
- long offset
- int range
- int value
- void initBoolDecoder()
+ int readBit()
+ int readBool(int)
+ int readLiteral(int)
~ int readTree(int[],int[])
~ int readTreeSkip(int[],int[],int)
+ void seek()
+ String toString()
}
class net.sourceforge.plantuml.anim.AffineTransformation {
- {static} Pattern rotate
- {static} Pattern shear
- {static} Pattern translate
- {static} Pattern scale
- {static} Pattern color
- AffineTransform affineTransform
- Dimension2D dimension
- AffineTransformation compose(AffineTransformation)
+ {static} AffineTransformation from(AffineTransform)
~ {static} AffineTransformation create(String)
- {static} AffineTransformation createSimple(String)
+ AffineTransform getAffineTransform()
- AffineTransform getAffineTransform(Dimension2D)
+ void setDimension(Dimension2D)
+ MinMax getMinMax(Dimension2D)
}
class net.sourceforge.plantuml.version.LicenseInfo {
- {static} Preferences prefs
+ {static} LicenseInfo NONE
- LicenseType type
- long generationDate
- long expirationDate
- String owner
- String context
- byte[] sha
- {static} LicenseInfo cache
+ {static} void persistMe(String)
+ {static} LicenseInfo retrieveQuick()
+ {static} boolean retrieveNamedOrDistributorQuickIsValid()
+ {static} LicenseInfo retrieveNamedSlow()
+ {static} LicenseInfo retrieveNamed(String)
+ {static} BufferedImage retrieveDistributorImage(LicenseInfo)
+ {static} LicenseInfo retrieveDistributor()
+ {static} Collection<SFile> fileCandidates()
- {static} LicenseInfo setIfValid(LicenseInfo,LicenseInfo)
- {static} LicenseInfo retrieve(SFile)
+ {static} void main(String[])
+ Date getGenerationDate()
+ Date getExpirationDate()
+ String getOwner()
+ boolean isNone()
+ boolean isValid()
+ boolean hasExpired()
+ LicenseType getLicenseType()
+ String getContext()
}
class net.sourceforge.plantuml.project.lang.ComplementClose {
+ IRegex toRegex(String)
+ Failable<Object> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.BlockUmlBuilder {
- List<BlockUml> blocks
- Set<FileWithSuffix> usedFiles
- UncommentReadLine reader
- Defines defines
- ImportedFiles importedFiles
- String charset
- void init(ReadLineNumbered)
+ List<BlockUml> getBlockUmls()
+ Set<FileWithSuffix> getIncludedFiles()
+ List<String> getDefinition(String)
+ ImportedFiles getImportedFiles()
+ String getCharset()
}
interface net.sourceforge.plantuml.ugraphic.arc.ExtendedPathIterator {
~ int SEG_CLOSE
~ int SEG_MOVETO
~ int SEG_LINETO
~ int SEG_QUADTO
~ int SEG_CUBICTO
~ int SEG_ARCTO
~ int WIND_EVEN_ODD
~ int WIND_NON_ZERO
~ int currentSegment()
~ int currentSegment(double[])
~ int getWindingRule()
~ boolean isDone()
~ void next()
}
class net.sourceforge.plantuml.creole.command.CommandCreoleLatex {
- {static} Pattern2 pattern
+ {static} Command create()
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.bpm.CommandGoto {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(BpmDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.UImage {
- MutableImage image
- String formula
- String rawFileName
+ UImage withRawFileName(String)
+ UImage withFormula(String)
+ String getRawFileName()
+ String getFormula()
+ UImage scale(double)
+ BufferedImage getImage(double)
+ int getWidth()
+ int getHeight()
+ UImage muteColor(Color)
+ UImage muteTransparentColor(Color)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileWithSwimlanes {
- Swimlane in
- Swimlane out
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
}
class net.sourceforge.plantuml.dedication.Noise {
- {static} Argon2 argon2(byte[],byte[])
+ {static} String computeArgon2String(byte[],byte[])
+ {static} byte[] computeArgon2bytes(byte[],byte[])
+ {static} int shortHash(byte[],byte[])
+ {static} void shuffle(byte[],MTRandom)
+ {static} void xor(byte[],byte[])
+ {static} void xor(byte[],BlumBlumShub)
+ {static} byte[] reverse(byte[],int)
}
class net.sourceforge.plantuml.project.draw.ResourceDraw {
- Resource res
- TimeScale timeScale
- double y
- Day min
- Day max
- GanttDiagram gantt
+ void drawU(UGraphic)
- FontConfiguration getFontConfiguration(int)
- FontConfiguration getFontConfiguration(int,HColor)
+ double getHeight()
+ double getY()
}
class net.sourceforge.plantuml.cucadiagram.dot.GraphvizWindowsLite {
- {static} File specificDotExe
# boolean findExecutableOnPath()
# File specificDotExe()
+ boolean graphviz244onWindows()
# String getExeName()
}
class net.sourceforge.plantuml.mda.MDAPackageImpl {
- Collection<MDAEntity> entities
- IGroup group
+ Collection<MDAEntity> getEntities()
+ String getName()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityLineCrowfoot {
- Point2D contact
- double angle
- double lineHeight
+ Point2D somePoint()
+ void drawU(UGraphic)
- {static} void drawLine(UGraphic,double,double,Point2D,Point2D)
}
class net.sourceforge.plantuml.flowdiagram.FlowDiagram {
- {static} double SINGLE_SIZE_X
- {static} double SINGLE_SIZE_Y
- TilesField field
- Map<Tile,ActivityBox> tilesBoxes
- Tile lastTile
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
+ DiagramDescription getDescription()
+ void lineSimple(TileGeometry,String,String)
+ void linkSimple(TileGeometry,String)
- Tile getTileById(String)
+ ImageBuilder createImageBuilder(FileFormatOption)
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
+ void drawU(UGraphic)
- Point2D getCenter(TileArea)
- Point2D movePoint(Point2D,Tile,TileGeometry,StringBounder)
- MinMaxGolem getMinMax()
+ Dimension2D calculateDimension(StringBounder)
+ MinMax getMinMax(StringBounder)
+ ClockwiseTopRightBottomLeft getDefaultMargins()
}
class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelfNoteRight {
- CommunicationTileSelf tile
- Message message
- Rose skin
- ISkinParam skinParam
- Note noteOnMessage
+ Event getEvent()
+ double getContactPointRelative()
# void callbackY_internal(double)
- Component getComponent(StringBounder)
- Real getNotePosition(StringBounder)
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.svg.SvgGraphics {
- {static} String XLINK_TITLE1
- {static} String XLINK_TITLE2
- {static} String XLINK_HREF1
- {static} String XLINK_HREF2
- Document document
- Element root
- Element defs
- Element gRoot
- String fill
- String stroke
- String strokeWidth
- String strokeDasharray
- String backcolor
- int maxX
- int maxY
- String preserveAspectRatio
- double scale
- String filterUid
- String shadowId
- String gradientId
- boolean svgDimensionStyle
- LengthAdjust lengthAdjust
- boolean INTERACTIVE
- Element pendingBackground
- Map<List<Object>,String> gradients
- List<Element> pendingAction
- Map<String,String> filterBackColor
- StringBuilder currentPath
- Map<String,String> images
- boolean withShadow
- boolean hidden
+ {static} String MD5_HEADER
# void ensureVisible(double,double)
- Element getStylesForInteractiveMode()
- Element getScriptForInteractiveMode()
- {static} String getData(String)
- Element getPathHover(String)
- {static} String getSeed(long)
+ void paintBackcolorGradient(ColorMapper,HColorGradient)
- Element simpleElement(String)
- Document getDocument()
- Element getRootNode()
+ void svgEllipse(double,double,double,double,double)
+ void svgArcEllipse(double,double,double,double,double,double)
+ String createSvgGradient(String,String,char)
+ void setFillColor(String)
+ void setStrokeColor(String)
+ void setStrokeWidth(double,String)
+ Element getG()
+ void svgRectangle(double,double,double,double,double,double,double,String,String)
- Element createRectangleInternal(double,double,double,double)
+ void svgLine(double,double,double,double,double)
- String getStyle()
- String getStyleSpecial()
+ void svgPolygon(double,double)
+ void text(String,double,double,String,int,String,String,String,double,Map<String,String>,String)
- String getIdFilterBackColor(String)
- String getFilterBackColor(String)
- Transformer getTransformer()
+ void createXml(OutputStream)
- String removeXmlHeader(String)
- void createXmlInternal(OutputStream)
+ void svgPath(double,double,UPath,double)
- void fillMe(Element)
- void addFilterShadowId(Element,double)
+ void newpath()
+ void moveto(double,double)
+ void lineto(double,double)
+ void closepath()
+ void curveto(double,double,double,double,double,double)
+ void quadto(double,double,double,double)
- String format(double)
- String formatBoolean(double)
+ void fill(int)
+ void drawPathIterator(double,double,PathIterator)
+ void svgImage(BufferedImage,double,double)
+ void svgImage(UImageSvg,double,double)
- String manageScale(UImageSvg)
- String toBase64(BufferedImage)
- void manageShadow(double)
- void addFilter(Element,String,String)
+ void setHidden(boolean)
+ {static} String getMD5Hex(String)
+ void addComment(String)
+ void openLink(String,String,String)
- String formatTitle(String)
+ void closeLink()
+ void startGroup(UGroupType,String)
+ void closeGroup()
}
class net.sourceforge.plantuml.command.CommandScaleWidthAndHeight {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractPSystem,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.wire.CommandMove {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(WireDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.Guillemet {
+ {static} Guillemet NONE
+ {static} Guillemet DOUBLE_COMPARATOR
+ {static} Guillemet GUILLEMET
- String start
- String end
+ Guillemet fromDescription(String)
+ String manageGuillemet(String)
+ String manageGuillemetStrict(String)
}
class net.sourceforge.plantuml.text.StyledString {
- String text
- FontStyle style
+ String toString()
+ String getText()
+ FontStyle getStyle()
+ {static} List<StyledString> build(String)
}
class net.sourceforge.plantuml.ugraphic.svg.DriverPathSvg {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
abstract class net.sourceforge.plantuml.svek.image.AbstractEntityImageBorder {
+ EntityPosition entityPosition
# Cluster parent
# Bibliotekon bibliotekon
# Rankdir rankdir
# TextBlock desc
+ Dimension2D calculateDimension(StringBounder)
+ double getMaxWidthFromLabelForEntryExit(StringBounder)
+ ShapeType getShapeType()
}
abstract class net.sourceforge.plantuml.SourceFileReaderAbstract {
# File file
# File outputDirectory
# File outputFile
# BlockUmlBuilder builder
# FileFormatOption fileFormatOption
- boolean checkMetadata
# int cpt
+ void setCheckMetadata(boolean)
+ boolean hasError()
+ List<BlockUml> getBlocks()
# Reader getReader(String)
+ Set<FileWithSuffix> getIncludedFiles()
+ void setFileFormatOption(FileFormatOption)
# boolean endsWithSlashOrAntislash(String)
- List<GeneratedImage> getCrashedImage(BlockUml,Throwable,SFile)
# void exportWarnOrErrIfWord(SFile,Diagram)
+ List<GeneratedImage> getGeneratedImages()
# {abstract}SuggestedFile getSuggestedFile(BlockUml)
}
class net.sourceforge.plantuml.classdiagram.command.CommandNamespaceSeparator {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(CucaDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramFileMakerPuma2 {
- SequenceDiagram diagram
- DrawableSet drawableSet
- Dimension2D fullDimension
- List<Page> pages
- FileFormatOption fileFormatOption
- StringBounder stringBounder
+ int getNbPages()
- PageSplitter create(DrawableSet,Map<Newpage,Double>,boolean,Display)
+ ImageData createOne(OutputStream,int,boolean)
- void drawFooter(SequenceDiagramArea,UGraphic,int)
- void drawHeader(SequenceDiagramArea,UGraphic,int)
- PngTitler getPngTitler(FontParam,int)
- boolean isLegendTop()
}
class net.sourceforge.plantuml.classdiagram.command.CommandHideShowByGender {
~ {static} IRegex getRegexConcat()
- EntityGender emptyByGender(EntityPortion)
# CommandExecutionResult executeArg(UmlDiagram,LineLocation,RegexResult)
- CommandExecutionResult executeSequenceDiagram(SequenceDiagram,RegexResult)
- CommandExecutionResult executeDescriptionDiagram(DescriptionDiagram,RegexResult)
- CommandExecutionResult executeClassDiagram(AbstractClassOrObjectDiagram,RegexResult)
- EntityPortion getEntityPortion(String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithDiamonds {
- {static} double SUPP15
# Ftile diamond1
# Ftile diamond2
# List<Branch> branches
- Mode mode
- double w13
- double w9
- double getW9(StringBounder)
+ Collection<Ftile> getMyChildren()
+ double getYdelta1a(StringBounder)
+ double getYdelta1b(StringBounder)
# FtileGeometry calculateDimensionInternalSlow(StringBounder)
+ void drawU(UGraphic)
# UTranslate getTranslateOf(Ftile,StringBounder)
# UTranslate getTranslateMain(StringBounder)
# UTranslate getTranslateDiamond1(StringBounder)
# UTranslate getTranslateDiamond2(StringBounder)
# TextBlock getLabelPositive(Branch)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileHeightFixedMarged {
- Ftile tile
- double ymargin1
- double ymargin2
+ Collection<Ftile> getMyChildren()
+ LinkRendering getInLinkRendering()
+ LinkRendering getOutLinkRendering()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
# FtileGeometry calculateDimensionFtile(StringBounder)
- UTranslate getTranslate(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.graphic.TextBlockVertical2 {
- List<TextBlock> blocks
- HorizontalAlignment horizontalAlignment
- {static} AbstractTextBlock convertImage(UImage)
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ Ports getPorts(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
}
class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf {
- LivingSpace livingSpace1
- Message message
- Rose skin
- ISkinParam skinParam
- LivingSpaces livingSpaces
+ Event getEvent()
+ double getContactPointRelative()
- ArrowComponent getComponent(StringBounder)
# void callbackY_internal(double)
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
- boolean isReverseDefine()
- LivingSpace getPrevious()
- LivingSpace getNext()
- Real getPoint1(StringBounder)
+ Real getMinX()
+ Real getMaxX()
- double getCompWidth()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCrowfoot {
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
+ UDrawable createUDrawable(Point2D,double,Side)
}
interface net.sourceforge.plantuml.wbs.ITF {
+ Point2D getT1(StringBounder)
+ Point2D getT2(StringBounder)
+ Point2D getF1(StringBounder)
+ Point2D getF2(StringBounder)
}
class net.sourceforge.plantuml.tim.TrieImpl {
- Map<Character,TrieImpl> brothers
+ void add(String)
- {static} void addInternal(TrieImpl,String)
+ boolean remove(String)
- {static} boolean removeInternal(TrieImpl,String)
- TrieImpl getOrCreate(Character)
+ String getLonguestMatchStartingIn(String)
- {static} String getLonguestMatchStartingIn(TrieImpl,String)
}
class net.sourceforge.plantuml.project.lang.SentenceTaskStartsAbsolute {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandLinkAnchor {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.salt.element.Grid {
- double[] rowsStart
- double[] colsStart
- TableStrategy strategy
- TextBlock title
- Set<Segment> horizontals
- Set<Segment> verticals
- void addOutside()
+ void drawU(UGraphic,double,double)
+ void addCell(Cell)
}
interface net.sourceforge.plantuml.ISourceFileReader {
+ List<GeneratedImage> getGeneratedImages()
+ List<BlockUml> getBlocks()
+ boolean hasError()
+ void setFileFormatOption(FileFormatOption)
+ void setCheckMetadata(boolean)
}
abstract class net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike {
- {static} double XLEN
- {static} double HALF_WIDTH
- UPolygon trig
- UBackground back
- Point2D contact
+ Point2D somePoint()
- {static} void addTrigPoint(UPolygon,double,double,double,Point2D)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike.Point {
+ double x
+ double y
+ void rotate(double)
+ UTranslate getPos(Point2D)
+ void translate(Point2D)
+ void add(UPolygon)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike.Redefines {
- {static} double XSUFFIX
- UStroke barStroke
- UTranslate pos
- ULine bar
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike.DefinedBy {
- {static} double XSUFFIX
- {static} double DOTHSIZE
- UTranslate pos1
- UEllipse dot
- {static} UTranslate getDotPos(double,double,double,double,Point2D)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.graphic.TextBlockMarged {
- TextBlock textBlock
- double top
- double right
- double bottom
- double left
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
+ Ports getPorts(StringBounder)
}
interface net.sourceforge.plantuml.posimo.Decor {
~ void drawDecor(UGraphic,Point2D,double)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandUrl {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.argon2.Constants {
+ {static} int ARGON2_BLOCK_SIZE
+ {static} int ARGON2_QWORDS_IN_BLOCK
+ {static} int ARGON2_ADDRESSES_IN_BLOCK
+ {static} int ARGON2_PREHASH_DIGEST_LENGTH
+ {static} int ARGON2_PREHASH_SEED_LENGTH
+ {static} int ARGON2_SYNC_POINTS
+ {static} int ARGON2_DEFAULT_FLAGS
+ {static} int ARGON2_VERSION_10
+ {static} int ARGON2_VERSION_13
}
class net.sourceforge.plantuml.argon2.Constants.Defaults {
+ {static} int OUTLEN_DEF
+ {static} int T_COST_DEF
+ {static} int LOG_M_COST_DEF
+ {static} int LANES_DEF
+ {static} Argon2Type TYPE_DEF
+ {static} int VERSION_DEF
+ {static} int ARGON2_VERSION_NUMBER
+ {static} boolean ENCODED_ONLY
+ {static} boolean RAW_ONLY
}
class net.sourceforge.plantuml.argon2.Constants.Constraints {
+ {static} int MAX_PASSWORD_LEN
+ {static} int MIN_PARALLELISM
+ {static} int MAX_PARALLELISM
+ {static} int MIN_OUTLEN
+ {static} int MAX_OUTLEN
+ {static} int MIN_MEMORY
+ {static} int MIN_ITERATIONS
+ {static} int MAX_ITERATIONS
+ {static} int MIN_PWD_LENGTH
+ {static} int MAX_PWD_LENGTH
+ {static} int MIN_SALT_LENGTH
+ {static} int MAX_SALT_LENGTH
+ {static} int MAX_SECRET_LENGTH
+ {static} int MAX_AD_LENGTH
}
class net.sourceforge.plantuml.argon2.Constants.Messages {
+ {static} String P_MIN_MSG
+ {static} String P_MAX_MSG
+ {static} String M_MIN_MSG
+ {static} String T_MIN_MSG
+ {static} String T_MAX_MSG
+ {static} String PWD_MIN_MSG
+ {static} String PWD_MAX_MSG
+ {static} String SALT_MIN_MSG
+ {static} String SALT_MAX_MSG
+ {static} String SECRET_MAX_MSG
+ {static} String ADDITIONAL_MAX_MSG
}
class net.sourceforge.plantuml.svek.GroupPngMakerActivity {
- CucaDiagram diagram
- IGroup group
- StringBounder stringBounder
- Rose rose
- List<Link> getPureInnerLinks()
+ StyleSignature getDefaultStyleDefinitionGroup()
+ IEntityImage getImage()
# HColor getColor(ColorParam,Stereotype)
}
class net.sourceforge.plantuml.svek.GroupPngMakerActivity.InnerGroupHierarchy {
+ Set<SuperGroup> getAllSuperGroups()
+ IGroup getRootGroup()
+ SuperGroup getRootSuperGroup()
+ Collection<IGroup> getChildrenGroups(IGroup)
+ boolean isEmpty(IGroup)
}
abstract class net.sourceforge.plantuml.sequencediagram.command.CommandExoArrowAny {
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
- ArrowPart getArrowPart(String,MessageExoType)
~ {abstract}MessageExoType getMessageExoType(RegexResult)
- boolean isShortArrow(RegexResult)
- boolean containsSymbolExterior(RegexResult,String)
- boolean containsSymbol(RegexResult,String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorateOut {
- LinkRendering linkRendering
+ LinkRendering getOutLinkRendering()
}
interface net.sourceforge.plantuml.api.mda.option3.MDAVisitor {
}
class net.sourceforge.plantuml.command.CommandMultilinesFooter {
+ String getPatternEnd()
+ CommandExecutionResult execute(TitledDiagram,BlocLines)
}
class net.sourceforge.plantuml.project.draw.TaskDrawRegular {
- Day end
- boolean oddStart
- boolean oddEnd
- Collection<Day> paused
- Collection<GanttConstraint> constraints
- ISkinParam skinParam
# double getShapeHeight(StringBounder)
+ void drawTitle(UGraphic,LabelStrategy,double,double)
# TextBlock getTitle()
- double getOutPosition(double)
- boolean isThereRightArrow()
~ StyleSignature getStyleSignature()
+ void drawU(UGraphic)
- double getYNotePosition(StringBounder)
- void drawNote(UGraphic)
+ double getHeightMax(StringBounder)
- Opale getOpaleNote()
+ FingerPrint getFingerPrint(StringBounder)
+ FingerPrint getFingerPrintNote(StringBounder)
- UGraphic applyColors(UGraphic)
+ double getX1(TaskAttribute)
+ double getX2(TaskAttribute)
- void drawShape(UGraphic)
- void drawShapeOld(UGraphic)
- void drawPause(UGraphic,Day,Day)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandTicks {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.code.StringCompressor {
~ String compress(String)
~ String decompress(String)
}
class net.sourceforge.plantuml.svek.DirectionalTextBlock {
- TextBlock right
- TextBlock left
- TextBlock up
- TextBlock down
- GuideLine guideline
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.sequencediagram.MessageNumber {
- String representation
+ String toString()
+ String getNumberRaw()
+ char charAt(int)
+ int length()
+ CharSequence subSequence(int,int)
}
class net.sourceforge.plantuml.elk.proxy.graph.ElkLabel {
+ void setText(String)
+ void setDimensions(double,double)
+ String getText()
+ double getX()
+ double getY()
}
class net.sourceforge.plantuml.tim.stdlib.SetVariableValue {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.compositediagram.command.CommandCreateBlock {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(CompositeDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.svek.MinFinder {
- double minX
- double minY
+ void manage(double,double)
+ void manage(Point2D)
+ void manage(MinFinder)
+ String toString()
+ double getMinX()
+ double getMinY()
}
class net.sourceforge.plantuml.tim.FunctionsSet {
- Map<TFunctionSignature,TFunction> functions
- Set<TFunctionSignature> functionsFinal
- Trie functions3
- TFunctionImpl pendingFunction
+ TFunction getFunctionSmart(TFunctionSignature)
+ int size()
+ Map<TFunctionSignature,TFunction> functions()
+ String getLonguestMatchStartingIn(String)
+ TFunctionImpl pendingFunction()
+ void addFunction(TFunction)
+ void executeEndfunction()
+ void executeLegacyDefine(TContext,TMemory,StringLocated)
+ void executeLegacyDefineLong(TContext,TMemory,StringLocated)
+ void executeDeclareReturnFunction(TContext,TMemory,StringLocated)
+ void executeDeclareProcedure(TContext,TMemory,StringLocated)
}
class net.sourceforge.plantuml.braille.BrailleCharFactory {
+ {static} List<BrailleChar> build(String)
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorProcedure {
- FunctionsSet functionsSet
- TContext context
- TMemory memory
- List<StringLocated> logs
+ StringLocated peek()
}
interface net.sourceforge.plantuml.Scale {
+ double getScale(double,double)
}
interface net.sourceforge.plantuml.sequencediagram.EventWithDeactivate {
+ void setPosYendLevel(double)
+ double getPosYendLevel()
+ boolean addLifeEvent(LifeEvent)
}
class net.sourceforge.plantuml.ugraphic.visio.DriverPolygonVdx {
+ void draw(UShape,double,double,ColorMapper,UParam,VisioGraphics)
}
class net.sourceforge.plantuml.sequencediagram.Note {
- Participant p
- Participant p2
- Display strings
- NotePosition position
- StyleBuilder styleBuilder
- NoteStyle noteStyle
- Colors colors
- Url url
- Style style
- boolean parallel
+ void temporaryProtectedUntilTeozIsStandard()
+ StyleSignature getDefaultStyleDefinition()
+ Style[] getUsedStyles()
+ void setStereotype(Stereotype)
+ Note withPosition(NotePosition)
+ Participant getParticipant()
+ Participant getParticipant2()
+ Display getStrings()
+ NotePosition getPosition()
+ Colors getColors(ISkinParam)
+ void setColors(Colors)
+ boolean dealWith(Participant)
+ Url getUrl()
+ boolean hasUrl()
+ NoteStyle getNoteStyle()
+ void setNoteStyle(NoteStyle)
+ ISkinParam getSkinParamBackcolored(ISkinParam)
+ String toString()
+ void setUrl(Url)
+ void goParallel()
+ boolean isParallel()
}
class net.sourceforge.plantuml.ugraphic.g2d.UGraphicG2d {
- BufferedImage bufferedImage
- double dpiFactor
- UAntiAliasing antiAliasing
- List<Url> urls
- Set<Url> allUrls
- boolean hasAffineTransform
+ Set<Url> getAllUrlsEncountered()
+ UGraphic apply(UChange)
# AbstractCommonUGraphic copyUGraphic()
- void register(double)
+ StringBounder getStringBounder()
# void beforeDraw()
- void applyClip()
# double getDpiFactor()
+ void startUrl(Url)
+ void closeUrl()
+ void ensureVisible(double,double)
+ BufferedImage getBufferedImage()
+ void setBufferedImage(BufferedImage)
+ Graphics2D getGraphics2D()
+ void writeImageTOBEMOVED(OutputStream,String,int)
+ double dpiFactor()
}
class net.sourceforge.plantuml.version.PSystemLicense {
# UDrawable getRootDrawable(FileFormatOption)
+ {static} PSystemLicense create(UmlSource)
- TextBlockBackcolored getGraphicStrings(List<String>)
+ DiagramDescription getDescription()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.creole.command.CommandCreoleColorChange {
- {static} Pattern2 pattern
- {static} Pattern2 patternEol
- Pattern2 mypattern
- ThemeStyle themeStyle
+ {static} Command create(ThemeStyle)
+ {static} Command createEol(ThemeStyle)
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.bpm.Navigators {
+ {static} Navigator<O> iterate(Chain<O>,O,O)
+ {static} Navigator<O> reverse(Navigator<O>)
}
class net.sourceforge.plantuml.ugraphic.visio.DriverNoneVdx {
+ void draw(UShape,double,double,ColorMapper,UParam,VisioGraphics)
}
class net.sourceforge.plantuml.sequencediagram.Reference {
- List<Participant> participants
- Url url
- HColor backColorGeneral
- HColor backColorElement
- Display strings
- Style style
- Style styleHeader
+ StyleSignature getDefaultStyleDefinition()
- StyleSignature getHeaderStyleDefinition()
+ Style[] getUsedStyles()
+ List<Participant> getParticipant()
+ Display getStrings()
+ boolean dealWith(Participant)
+ Url getUrl()
+ boolean hasUrl()
+ String toString()
+ HColor getBackColorGeneral()
+ HColor getBackColorElement()
}
interface net.sourceforge.plantuml.posimo.Positionable {
+ Dimension2D getSize()
+ Point2D getPosition()
}
class net.sourceforge.plantuml.timingdiagram.command.CommandPixelHeight {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorLegacyDefine {
- FunctionsSet functionsSet
- TContext context
- TMemory memory
- List<StringLocated> logs
+ StringLocated peek()
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverPolygonTikz {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
class net.sourceforge.plantuml.sequencediagram.teoz.TileMarged {
- Tile tile
- double x1
- double x2
- double y1
- double y2
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
+ Event getEvent()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandEndif3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.stats.CreoleConverter {
- DateFormat formatter
- Stats stats
+ List<String> toCreole()
- void printTableCreole(List<String>,StatsTable)
- String getCreoleLine(Collection<StatsColumn>,StatsLine,boolean)
- String getCreoleHeader(Collection<StatsColumn>)
}
class net.sourceforge.plantuml.project.lang.ComplementBeforeOrAfterOrAtTaskStartOrEnd {
- {static} int POS_NB1
- {static} int POS_DAY_OR_WEEK1
- {static} int POS_NB2
- {static} int POS_DAY_OR_WEEK2
- {static} int POS_BEFORE_OR_AFTER
- {static} int POS_CODE_OTHER
- {static} int POS_START_OR_END
+ IRegex toRegex(String)
+ Failable<TaskInstant> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.creole.atom.AtomSprite {
- Sprite sprite
- double scale
- Url url
- HColor color
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.asciiart.TextSkin {
- FileFormat fileFormat
+ ArrowComponent createComponentArrow(Style[],ArrowConfiguration,ISkinParam,Display)
+ Component createComponent(Style[],ComponentType,ArrowConfiguration,ISkinParam,Display)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandGroupEnd3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileNoteAlone {
- Opale opale
- boolean withOutPoint
- Swimlane swimlane
+ StyleSignature getDefaultStyleDefinition()
+ Collection<Ftile> getMyChildren()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
- Dimension2D calculateDimensionInternal(StringBounder)
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
class net.sourceforge.plantuml.xmlsc.ScxmlStateDiagramStandard {
- StateDiagram diagram
- Document document
- String getInitial()
- Element createState(IEntity)
- void addLink(Element,Link)
- String getId(IEntity)
+ void transformerXml(OutputStream)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileWithUrl {
- Url url
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.graphic.USymbolComponent1 {
+ SkinParameter getSkinParameter()
- void drawComponent1(UGraphic,double,double,boolean,double)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.help.CommandHelpKeyword {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(Help,LineLocation,RegexResult)
}
abstract class net.sourceforge.plantuml.project.lang.SentenceSimple {
# Subject subjectii
- IRegex verb
# Something complementii
+ IRegex toRegex()
+ CommandExecutionResult execute(GanttDiagram,RegexResult)
+ {abstract}CommandExecutionResult execute(GanttDiagram,Object,Object)
+ String getVerbPattern()
+ IRegex getVerbRegex()
}
class net.sourceforge.plantuml.project.time.Day {
+ {static} long MILLISECONDS_PER_DAY
- {static} Calendar gmt
- int dayOfMonth
- MonthYear monthYear
- long ms1
+ {static} Day create(int,String,int)
+ {static} Day create(int,int,int)
+ {static} Day create(long)
+ {static} Day today()
+ int getWeekOfYear(WeekNumberStrategy)
+ Day increment()
+ Day decrement()
+ Day addDays(int)
+ int getAbsoluteDayNum()
+ long getMillis()
+ int year()
- int internalNumber()
+ String toString()
+ int hashCode()
+ boolean equals(Object)
+ int getDayOfMonth()
- int daysPerMonth()
+ Month month()
+ MonthYear monthYear()
+ DayOfWeek getDayOfWeek()
+ int compareTo(Day)
+ {static} Day min(Day,Day)
+ {static} Day max(Day,Day)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandAutonumberResume {
- {static} RegexConcat getConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.eggs.PSystemLost {
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.tim.StringEater {
+ void analyze(TContext,TMemory)
}
class net.sourceforge.plantuml.sprite.SpriteImage {
- UImage img
+ TextBlock asTextBlock(HColor,double)
+ {static} Sprite fromInternal(String)
+ {static} InputStream getInternalSprite(String)
}
class net.sourceforge.plantuml.stats.FormatCounter {
- ConcurrentMap<FileFormat,NumberAnalyzed> data
+ void plusOne(FileFormat,long)
- StatsLine createLine(String,NumberAnalyzed)
+ StatsTable getStatsTable(String)
+ void reload(String,Preferences)
~ {static} String removeDotSaved(String)
+ void save(Preferences,FileFormat)
}
class net.sourceforge.plantuml.gitlog.GitTextArea {
- List<String> lines
- List<Commit> commits
+ void add(String)
+ List<Commit> getAllCommits()
+ char charAt(int,int)
+ String getLine(int)
+ Commit getCommitByName(String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit {
+ StyleSignature getDefaultStyleDefinition()
# Ftile doStep1(Ftile)
- HColor getThin1Color(Rainbow)
- boolean hasOut()
# Ftile doStep2(Ftile,Ftile)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit.ConnectionIn {
- double x
- Rainbow arrowColor
- Display label
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit.ConnectionOut {
- double x
- Rainbow arrowColor
- double height
- Display label
- UTranslate translate0
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.FileUtils {
- {static} AtomicInteger counter
+ {static} void resetCounter()
+ {static} File createTempFileLegacy(String,String)
+ {static} SFile createTempFile(String,String)
+ {static} void copyInternal(InputStream,OutputStream,boolean)
+ {static} void copyToFile(SFile,SFile)
+ {static} void copyToStream(SFile,OutputStream)
+ {static} void copyToStream(File,OutputStream)
+ {static} void copyToStream(InputStream,OutputStream)
+ {static} void copyToFile(byte[],SFile)
+ {static} String readSvg(SFile)
+ {static} String readSvg(InputStream)
+ {static} String readText(InputStream)
+ {static} String readFile(SFile)
- {static} String readSvg(BufferedReader,boolean,boolean)
}
class net.sourceforge.plantuml.command.CommandPragma {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.graphic.USymbolHexagon {
- double marginY
+ SkinParameter getSkinParameter()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
- void drawRect(UGraphic,double,double,boolean,double,double)
- Margin getMargin()
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.wire.WireDiagramFactory {
# List<Command> createCommands()
+ WireDiagram createEmptyDiagram(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.salt.element.ElementMenuBar {
- Collection<ElementMenuEntry> entries
- Map<ElementMenuEntry,ElementMenuPopup> popups
- UFont font
- ISkinSimple spriteContainer
+ void addEntry(String)
+ void addSubEntry(String,String)
- ElementMenuPopup getPopup(ElementMenuEntry)
- ElementMenuEntry getElementMenuEntry(String)
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
}
class net.sourceforge.plantuml.flashcode.FlashCodeUtilsNone {
+ BufferedImage exportFlashcode(String,Color,Color)
}
class net.sourceforge.plantuml.project.command.CommandPrintScale {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(GanttDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ErrorStatus {
- boolean noData
- boolean hasErrors
- boolean hasOk
+ {static} ErrorStatus init()
+ void goWithError()
+ void goOk()
+ boolean hasError()
+ boolean isNoData()
+ int getExitCode()
}
class net.sourceforge.plantuml.sdot.YMirror {
- double max
+ double getMirrored(double)
+ Point2D getMirrored(Point2D)
+ DotPath getMirrored(DotPath)
+ UTranslate getMirrored(UTranslate)
}
class net.sourceforge.plantuml.salt.element.Segment {
- int row
- int col
+ int hashCode()
+ boolean equals(Object)
+ int getRow()
+ int getCol()
}
class net.sourceforge.plantuml.graphic.USymbolDatabase {
+ SkinParameter getSkinParameter()
- void drawDatabase(UGraphic,double,double,boolean)
- UPath getClosingPath(double)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
+ int suppHeightBecauseOfShape()
}
class net.sourceforge.plantuml.graphic.USymbolDatabase.MyUGraphicDatabase {
- double endingX
# AbstractUGraphicHorizontalLine copy(UGraphic)
# void drawHline(UGraphic,UHorizontalLine,UTranslate)
}
class net.sourceforge.plantuml.tim.EaterAffectation {
+ void analyze(TContext,TMemory)
}
class net.sourceforge.plantuml.command.CommandCaption {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandAnalog {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
abstract class net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile {
- ISkinParam skinParam
- FtileGeometry cachedGeometry
+ ISkinParam skinParam()
+ HColorSet getIHtmlColorSet()
+ LinkRendering getInLinkRendering()
+ LinkRendering getOutLinkRendering()
+ Collection<Connection> getInnerConnections()
+ UTranslate getTranslateFor(Ftile,StringBounder)
+ UStroke getThickness()
+ List<WeldingPoint> getWeldingPoints()
+ Collection<Ftile> getMyChildren()
+ HorizontalAlignment arrowHorizontalAlignment()
+ FtileGeometry calculateDimension(StringBounder)
# {abstract}FtileGeometry calculateDimensionFtile(StringBounder)
+ MinMax getMinMax(StringBounder)
}
interface net.sourceforge.plantuml.project.lang.Subject {
+ Collection<? extends SentenceSimple> getSentences()
+ IRegex toRegex()
+ Failable<? extends Object> getMe(GanttDiagram,RegexResult)
}
class net.sourceforge.plantuml.openiconic.SvgPosition {
- SvgCommandNumber x
- SvgCommandNumber y
+ String toString()
+ SvgCommandNumber getX()
+ SvgCommandNumber getY()
+ double getXDouble()
+ double getYDouble()
+ SvgPosition add(SvgPosition)
+ SvgPosition getMirror(SvgPosition)
}
class net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile {
- boolean isBackground
+ void draw(UShape)
+ UGraphic apply(UChange)
+ boolean isBackground()
}
class net.sourceforge.plantuml.svek.extremity.MiddleCircleCircled {
- HColor diagramBackColor
- double angle
- MiddleCircleCircledMode mode
- double radius1
- UEllipse circle
- double radius2
- UEllipse bigcircle
- HColor backColor
+ Point2D somePoint()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.preproc.Variables {
- List<DefineVariable> all
- String fonctionName
- String definitionQuoted
- String newValue
- Pattern regex2
+ void add(DefineVariable)
+ int countDefaultValue()
+ Variables removeSomeDefaultValues(int)
+ String applyOn(String)
}
class net.sourceforge.plantuml.tim.stdlib.RetrieveProcedure {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.creole.legacy.StripeTree {
- FontConfiguration fontConfiguration
- ISkinSimple skinParam
- AtomTree tree
- Atom marged
- StripeStyle stripeStyle
+ List<Atom> getAtoms()
+ Atom getLHeader()
+ void analyzeAndAdd(String)
- int computeLevel(String)
}
class net.sourceforge.plantuml.preproc.Define {
- DefineSignature signature
- String definition
- String definitionQuoted
- boolean emptyParentheses
- Pattern pattern
- AParentFolder currentDir
+ String toString()
+ String apply(String)
- String apply2(String)
- String apply1(String)
+ String getFunctionName()
+ TValue asTVariable()
}
class net.sourceforge.plantuml.sequencediagram.command.CommandDeactivateShort {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.activitydiagram3.ftile.Swimable {
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
}
class net.sourceforge.plantuml.graphic.color.Colors {
- Map<ColorType,HColor> map
- LinkStyle lineStyle
- Boolean shadowing
+ String toString()
+ {static} Colors empty()
+ boolean isEmpty()
- Colors copy()
+ HColor getColor(ColorType)
+ HColor getColor(ColorType,ColorType)
+ UStroke getSpecificLineStroke()
+ Colors add(ColorType,HColor)
- Colors add(ColorType,Colors)
+ LinkStyle getLineStyle()
+ ISkinParam mute(ISkinParam)
+ Colors addLegacyStroke(String)
+ {static} UGraphic applyStroke(UGraphic,Colors)
+ Colors applyStereotype(Stereotype,ISkinParam,ColorParam)
- Colors applyFontParamStereotype(Stereotype,ISkinParam,FontParam)
+ Colors applyStereotypeForNote(Stereotype,ISkinParam,FontParam,ColorParam)
+ Boolean getShadowing()
+ UStroke muteStroke(UStroke)
}
class net.sourceforge.plantuml.json.JsonLiteral {
- String value
- boolean isNull
- boolean isTrue
- boolean isFalse
~ void write(JsonWriter)
+ String toString()
+ int hashCode()
+ boolean isNull()
+ boolean isTrue()
+ boolean isFalse()
+ boolean isBoolean()
+ boolean asBoolean()
+ boolean equals(Object)
}
abstract class net.sourceforge.plantuml.error.PSystemError {
# List<StringLocated> trace
# ErrorUml singleError
+ ImageBuilder createImageBuilder(FileFormatOption)
# StringLocated getLastLine()
+ LineLocation getLineLocation()
+ Collection<ErrorUml> getErrorsUml()
+ ErrorUml getFirstError()
+ String getWarningOrError()
- TextBlockBackcolored getGraphicalFormatted()
- List<String> header()
+ List<String> getPureAsciiFormatted()
- List<String> getTextFromStack()
# List<String> getTextFullBody()
- void addToResult(List<String>,StringLocated)
- List<String> getTextError()
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
# UDrawable getRootDrawable(FileFormatOption)
- void append(List<String>,LineLocation)
+ DiagramDescription getDescription()
- List<String> allButLast(List<String>)
- List<String> onlyLast(List<String>)
- TextBlockBackcolored getWelcome()
- TextBlock addWelcome(TextBlockBackcolored)
- TextBlock addMessageLiberapay(TextBlock)
- TextBlock addMessagePatreon(TextBlock)
- TextBlock addMessageDedication(TextBlock)
- TextBlock addMessageAdopt(TextBlock)
- TextBlock addMessageArecibo(TextBlock)
- TextBlockBackcolored getMessageDedication()
- TextBlockBackcolored getMessageAdopt()
- TextBlockBackcolored getMessagePatreon()
- TextBlockBackcolored getMessageLiberapay()
+ int score()
- BufferedImage smaller(BufferedImage)
}
abstract class net.sourceforge.plantuml.json.JsonHandler {
~ JsonParser parser
# Location getLocation()
+ void startNull()
+ void endNull()
+ void startBoolean()
+ void endBoolean(boolean)
+ void startString()
+ void endString(String)
+ void startNumber()
+ void endNumber(String)
+ A startArray()
+ void endArray(A)
+ void startArrayValue(A)
+ void endArrayValue(A)
+ O startObject()
+ void endObject(O)
+ void startObjectName(O)
+ void endObjectName(O,String)
+ void startObjectValue(O,String)
+ void endObjectValue(O,String)
}
class net.sourceforge.plantuml.creole.legacy.CreoleStripeSimpleParser {
- String line
- StripeStyle style
- CreoleMode modeSimpleLine
- FontConfiguration fontConfiguration
- ISkinSimple skinParam
+ Stripe createStripe(CreoleContext)
}
class net.sourceforge.plantuml.project.core.TaskSeparator {
- String comment
+ Day getStart()
+ Day getEnd()
+ void setStart(Day)
+ void setEnd(Day)
+ void setColors(CenterBorderColor)
+ String getName()
+ void addResource(Resource,int)
+ Load getLoad()
+ void setLoad(Load)
+ void setDiamond(boolean)
+ boolean isDiamond()
+ void setCompletion(int)
+ void setUrl(Url)
+ void addPause(Day)
+ void addPause(DayOfWeek)
+ void setNote(Display)
}
class net.sourceforge.plantuml.ScaleMaxWidthAndHeight {
- double maxWidth
- double maxHeight
+ double getScaleInternal(double,double)
}
class net.sourceforge.plantuml.mindmap.Idea {
- Display label
- int level
- Idea parent
- List<Idea> children
- IdeaShape shape
- HColor backColor
- StyleBuilder styleBuilder
- String stereotype
+ Idea createIdea(StyleBuilder,HColor,int,Display,IdeaShape,String)
+ String toString()
+ int getLevel()
+ Display getLabel()
+ Collection<Idea> getChildren()
+ boolean hasChildren()
+ Idea getParent()
+ IdeaShape getShape()
+ HColor getBackColor()
+ StyleBuilder getStyleBuilder()
+ String getStereotype()
}
class net.sourceforge.plantuml.board.BoardDiagramFactory {
# List<Command> createCommands()
+ BoardDiagram createEmptyDiagram(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileLabel {
- String name
+ String getName()
}
class net.sourceforge.plantuml.creole.atom.Bullet {
- FontConfiguration fontConfiguration
- int order
- double getWidth(StringBounder)
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
- void drawU0(UGraphic)
+ double getStartingAltitude(StringBounder)
- Dimension2D calculateDimension0(StringBounder)
- void drawU1(UGraphic)
- Dimension2D calculateDimension1(StringBounder)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandConstraint {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.ConnectionCross {
- Connection connection
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.webp.VP8Decoder {
- int[][][][] coefProbs
~ VP8Frame f
- int frameCount
+ void decodeFrame(ImageInputStream)
+ VP8Frame getFrame()
+ int getHeight()
+ int getWidth()
+ void writePGMFile(String,VP8Frame)
+ void writeYV12File(String,VP8Frame)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandGrouping {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverTextAsPathG2d {
- EnsureVisible visible
- FontRenderContext fontRenderContext
- {static} void printFont()
+ void draw(UShape,double,double,ColorMapper,UParam,Graphics2D)
+ {static} Dimension2D calculateDimension(StringBounder,UFont,String)
}
class net.sourceforge.plantuml.Pragma {
- Map<String,String> values
+ void define(String,String)
+ boolean isDefine(String)
+ void undefine(String)
+ String getValue(String)
+ boolean horizontalLineBetweenDifferentPackageAllowed()
+ boolean backToLegacyPackage()
+ boolean useNewPackage()
+ boolean useVerticalIf()
+ boolean useTeozLayout()
}
class net.sourceforge.plantuml.timingdiagram.graphic.PentaBShape {
- double width
- double height
- SymbolContext context
- double delta
+ {static} PentaBShape create(double,double,SymbolContext)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.code.CompressionHuffman {
+ byte[] compress(byte[])
+ ByteArray decompress(byte[])
}
interface net.sourceforge.plantuml.ugraphic.UParam {
+ HColor getColor()
+ HColor getBackcolor()
+ UStroke getStroke()
+ boolean isHidden()
+ UPattern getPattern()
+ double getScale()
}
class net.sourceforge.plantuml.openiconic.PSystemOpenIconicFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.svek.image.EntityImageClass {
- TextBlock body
- Margins shield
- EntityImageClassHeader header
- Url url
- double roundCorner
- LeafType leafType
- LineConfigurable lineConfig
+ Dimension2D calculateDimension(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
+ void drawU(UGraphic)
- Style getStyle()
- StyleSignature getDefaultStyleDefinition()
- void drawInternal(UGraphic)
+ Ports getPorts(StringBounder)
- UStroke getStroke()
+ ShapeType getShapeType()
+ Margins getShield(StringBounder)
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
class net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple {
- double pos
- String name
+ String toString()
+ double getCenterX(StringBounder)
+ void pushToLeft(double)
+ double getPreferredWidth(StringBounder)
+ Collection<Segment> getDelays(StringBounder)
}
class net.sourceforge.plantuml.skin.ActorStickMan {
- double armsY
- double armsLenght
- double bodyLenght
- double legsX
- double legsY
- double headDiam
- SymbolContext symbolContext
- boolean actorBusiness
+ void drawU(UGraphic)
- void specialBusiness(UGraphic)
- Point2D getOnCircle(double)
- double thickness()
+ double getPreferredWidth()
+ double getPreferredHeight()
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.code.ByteArray {
- byte[] data
- int length
+ {static} ByteArray from(byte[])
+ String toUFT8String()
+ String toUPF9String()
+ int getByteAt(int)
+ int length()
}
class net.sourceforge.plantuml.asciiart.ComponentTextGroupingBody {
- ComponentType type
- List<? extends CharSequence> stringsToDisplay
- FileFormat fileFormat
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.command.CommandNamespace {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ClassDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.svg.DriverRectangleSvg {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
+ {static} void applyColor(SvgGraphics,ColorMapper,UParam)
}
class net.sourceforge.plantuml.command.regex.FoxSignature {
- {static} long[] masks
+ {static} void printMe()
- {static} long getMask(char)
+ {static} long getFoxSignature(String)
+ {static} String backToString(long)
}
class net.sourceforge.plantuml.vizjs.VizJsEngine {
- Object viz
- Method mExecute
+ {static} boolean isOk()
+ String execute(String)
}
class net.sourceforge.plantuml.cucadiagram.MethodsOrFieldsArea {
- FontParam fontParam
- ISkinParam skinParam
- Rose rose
- Display members
- HorizontalAlignment align
- Stereotype stereotype
- ILeaf leaf
- Style style
+ TextBlock asBlockMemberImpl()
- boolean hasSmallIcon()
+ Dimension2D calculateDimension(StringBounder)
+ Ports getPorts(StringBounder)
- TextBlock createTextBlock(CharSequence)
- TextBlock getUBlock(VisibilityModifier,Url)
+ boolean contains(String)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
- ULayoutGroup getLayout(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.cucadiagram.MethodsOrFieldsArea.TextBlockTracer {
- TextBlock bloc
- Url url
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
}
class net.sourceforge.plantuml.picoweb.RenderRequest {
- String[] options
- String source
+ String[] getOptions()
+ String getSource()
+ {static} RenderRequest fromJson(String)
}
class net.sourceforge.plantuml.project.lang.SentenceOccurs {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectToday {
+ IRegex toRegex()
+ Failable<Today> getMe(GanttDiagram,RegexResult)
+ Collection<? extends SentenceSimple> getSentences()
}
class net.sourceforge.plantuml.project.lang.SubjectToday.InColor {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.project.lang.SubjectToday.IsDate {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.donors.PSystemSkinparameterListFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile {
- Ftile whileBlock
- Ftile diamond1
- Ftile specialOut
- Ftile backward
+ Collection<Ftile> getMyChildren()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ {static} Ftile create(LinkRendering,Swimlane,Ftile,Display,HColor,HColor,Rainbow,Display,FontConfiguration,FtileFactory,ConditionStyle,FontConfiguration,Instruction,Ftile,LinkRendering,LinkRendering)
+ void drawU(UGraphic)
- UTranslate getTranslateBackward(StringBounder)
# FtileGeometry calculateDimensionFtile(StringBounder)
- double xDeltaBecauseSpecial(StringBounder)
+ UTranslate getTranslateFor(Ftile,StringBounder)
- UTranslate getTranslateForWhile(StringBounder)
- UTranslate getTranslateDiamond1(StringBounder)
- UTranslate getTranslateForSpecial(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionIn {
- Rainbow arrowColor
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackSimple {
- Rainbow endInlinkColor
- TextBlock back
- Point2D getP1(StringBounder)
- double getBottom(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackBackward1 {
- Rainbow endInlinkColor
- TextBlock back
- Point2D getP1(StringBounder)
- double getBottom(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackBackward2 {
- Rainbow endInlinkColor
- TextBlock back
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackEmpty {
- Rainbow endInlinkColor
- Point2D getP1(StringBounder)
- double getBottom(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionOut {
- Rainbow afterEndwhileColor
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionOutSpecial {
- Rainbow afterEndwhileColor
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryRadioOff {
- DataSource dataSource
- ISkinSimple spriteContainer
+ Terminated<Element> create()
- List<String> extracted(String)
+ boolean ready()
}
interface net.sourceforge.plantuml.svek.IEntityImage {
+ {static} int CORNER
+ {static} int MARGIN
+ {static} int MARGIN_LINE
+ ShapeType getShapeType()
+ Margins getShield(StringBounder)
+ double getOverscanX(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.svek.image.EntityImageState2 {
- Url url
- TextBlock asSmall
- Style getStyle(FontParam)
+ ShapeType getShapeType()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.asciiart.TranslatedCharArea {
- int dx
- int dy
- UmlCharArea charArea
+ void drawBoxSimple(int,int,int,int)
+ void drawBoxSimpleUnicode(int,int,int,int)
+ void drawNoteSimple(int,int,int,int)
+ void drawNoteSimpleUnicode(int,int,int,int)
+ void drawShape(AsciiShape,int,int)
+ void drawChar(char,int,int)
+ void drawHLine(char,int,int,int)
+ void drawHLine(char,int,int,int,char,char)
+ void drawStringLR(String,int,int)
+ void drawStringTB(String,int,int)
+ void drawVLine(char,int,int,int)
+ int getHeight()
+ int getWidth()
+ String getLine(int)
+ List<String> getLines()
+ void print(PrintStream)
+ void drawStringsLRSimple(Collection<? extends CharSequence>,int,int)
+ void drawStringsLRUnicode(Collection<? extends CharSequence>,int,int)
+ void fillRect(char,int,int,int,int)
}
class net.sourceforge.plantuml.tim.stdlib.Filename {
- String value
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.utils.UniqueSequence {
- {static} AtomicInteger cpt
+ {static} int getValue()
+ {static} String getString(String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds {
- {static} double SUPP_WIDTH
# Ftile diamond1
# Ftile diamond2
+ Collection<Ftile> getMyChildren()
+ int getYdelta1a(StringBounder)
+ int getYdelta1b(StringBounder)
# double widthInner(StringBounder)
# FtileGeometry calculateDimensionInternalSlow(StringBounder)
+ void drawU(UGraphic)
# UTranslate getTranslate1(StringBounder)
# UTranslate getTranslate2(StringBounder)
# UTranslate getTranslateDiamond1(StringBounder)
# UTranslate getTranslateDiamond2(StringBounder)
+ double computeMarginNeedForBranchLabe1(StringBounder,Dimension2D)
+ double computeMarginNeedForBranchLabe2(StringBounder,Dimension2D)
+ double computeVerticalMarginNeedForBranchs(StringBounder,Dimension2D,Dimension2D)
}
class net.sourceforge.plantuml.ugraphic.comp.Slot {
- double start
- double end
+ String toString()
+ double getStart()
+ double getEnd()
+ double size()
+ boolean contains(double)
+ boolean intersect(Slot)
+ Slot merge(Slot)
+ Slot intersect(double,double)
+ int compareTo(Slot)
}
class net.sourceforge.plantuml.math.PSystemLatex {
- String latex
- float scale
- Color color
- Color backColor
+ DiagramDescription getDescription()
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
+ void doCommandLine(String)
- Color getColor(String)
}
class net.sourceforge.plantuml.wbs.ITFComposed {
- List<ITF> left
- List<ITF> right
- TextBlock main
- double delta1x
- double marginBottom
+ {static} ITF build2(ISkinParam,WElement)
# double getw1(StringBounder)
+ Point2D getT1(StringBounder)
+ Point2D getT2(StringBounder)
+ Point2D getF1(StringBounder)
+ Point2D getF2(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- double getCollWidth(StringBounder,Collection<? extends TextBlock>)
- double getCollHeight(StringBounder,Collection<? extends TextBlock>,double)
}
class net.sourceforge.plantuml.json.JsonParser {
- {static} int MAX_NESTING_LEVEL
- {static} int MIN_BUFFER_SIZE
- {static} int DEFAULT_BUFFER_SIZE
- JsonHandler<Object,Object> handler
- Reader reader
- char[] buffer
- int bufferOffset
- int index
- int fill
- int line
- int lineOffset
- int current
- StringBuilder captureBuffer
- int captureStart
- int nestingLevel
+ void parse(String)
+ void parse(Reader)
+ void parse(Reader,int)
- void readValue()
- void readArray()
- void readObject()
- String readName()
- void readNull()
- void readTrue()
- void readFalse()
- void readRequiredChar(char)
- void readString()
- String readStringInternal()
- void readEscape()
- void readNumber()
- boolean readFraction()
- boolean readExponent()
- boolean readChar(char)
- boolean readDigit()
- void skipWhiteSpace()
- void read()
- void startCapture()
- void pauseCapture()
- String endCapture()
~ Location getLocation()
- ParseException expected(String)
- ParseException error(String)
- boolean isWhiteSpace()
- boolean isDigit()
- boolean isHexDigit()
- boolean isEndOfText()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleConnect {
- HColor backgroundColor
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.api.PlantumlUtils {
+ {static} boolean hasCMapData(String)
}
class net.sourceforge.plantuml.posimo.PositionableUtils {
+ {static} Rectangle2D convert(Positionable)
+ {static} boolean contains(Positionable,Point2D)
+ {static} boolean intersect(Positionable,Positionable)
+ {static} Positionable addMargin(Positionable,double,double)
~ {static} Rectangle2D move(Rectangle2D,double,double)
+ {static} Point2D getCenter(Positionable)
+ {static} Positionable move(Positionable,double,double)
+ {static} Positionable moveAwayFrom(Positionable,Positionable)
- {static} boolean doesIntersectWithThisCoef(Positionable,Positionable,double,double,double)
}
class net.sourceforge.plantuml.SpriteContainerEmpty {
+ Sprite getSprite(String)
+ String getValue(String)
+ double getPadding()
+ Guillemet guillemet()
+ String getMonospacedFamily()
+ int getTabSize()
+ HColorSet getIHtmlColorSet()
+ int getDpi()
+ LineBreakStrategy wrapWidth()
+ ColorMapper getColorMapper()
+ void copyAllFrom(ISkinSimple)
+ Map<String,String> values()
+ double minClassWidth()
+ String transformStringForSizeHack(String)
+ ThemeStyle getThemeStyle()
}
abstract class net.sourceforge.plantuml.ugraphic.color.AbstractColorMapper {
+ String toRGB(HColor)
+ String toSvg(HColor)
- {static} String sharpAlpha(int)
}
class net.sourceforge.plantuml.svek.image.EntityImageObject {
- TextBlock name
- TextBlock stereo
- TextBlock fields
- Url url
- double roundCorner
- LineConfigurable lineConfig
- int marginEmptyFieldsOrMethod
- int xMarginCircle
- Display getUnderlinedName(ILeaf)
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- UStroke getStroke()
- double getMethodOrFieldHeight(Dimension2D)
- Dimension2D getTitleDimension(StringBounder)
- Dimension2D getNameAndSteretypeDimension(StringBounder)
+ ShapeType getShapeType()
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
interface net.sourceforge.plantuml.ugraphic.color.HColor {
+ UBackground bg()
+ HColor darken(int)
+ HColor lighten(int)
+ String asString()
+ boolean isDark()
+ HColor reverseHsluv()
+ HColor reverse()
}
class net.sourceforge.plantuml.ugraphic.InflaterSet {
- List<Inflater> all
+ void addInflater(double,double)
+ double inflate(double)
}
class net.sourceforge.plantuml.ugraphic.InflaterSet.Inflater {
- double start
- double size
}
class net.sourceforge.plantuml.BlockUml {
- List<StringLocated> rawSource
- List<StringLocated> data
- List<StringLocated> debug
- Diagram system
- Defines localDefines
- ISkinSimple skinParam
- Set<FileWithSuffix> included
- boolean preprocessorError
+ Set<FileWithSuffix> getIncluded()
+ String getEncodedUrl()
+ String getFlashData()
+ {static} List<StringLocated> convert(String)
+ {static} List<StringLocated> convert(List<String>)
+ String getFileOrDirname()
+ Diagram getDiagram()
+ List<StringLocated> getData()
- String internalEtag()
+ String etag()
+ long lastModified()
+ boolean isStartDef(String)
+ List<String> getDefinition(boolean)
+ Defines getLocalDefines()
}
class net.sourceforge.plantuml.statediagram.command.CommandHideEmptyDescription {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(UmlDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.svek.ArithmeticStrategy {
~ void eat(double)
~ double getResult()
}
class net.sourceforge.plantuml.creole.rosetta.Rosetta {
- List<String> unicodeHtml
+ {static} Rosetta fromUnicodeHtml(List<String>)
+ {static} Rosetta fromSyntax(WikiLanguage,String)
+ {static} Rosetta fromSyntax(WikiLanguage,List<String>)
+ {static} Rosetta fromSyntax(WikiLanguage,Display)
- {static} List<String> from(Display)
+ List<String> translateTo(WikiLanguage)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandCircleSpot3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.preproc.Truth {
+ boolean isTrue(String)
}
class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom {
- Tile tile
- AbstractMessage message
- Rose skin
- ISkinParam skinParam
- Note noteOnMessage
- double spacey
+ Event getEvent()
+ double getContactPointRelative()
# void callbackY_internal(double)
- Component getComponent(StringBounder)
- Real getNotePosition(StringBounder)
+ void drawU(UGraphic)
- void drawLine(UGraphic,double,double,double,double)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.ugraphic.hand.UPolygonHand {
- UPolygon poly
+ Shadowable getHanddrawn()
}
class net.sourceforge.plantuml.svek.Oscillator {
- int n
- int i
- char seg
- int x
- int y
+ Point2D.Double nextPosition()
}
class net.sourceforge.plantuml.eggs.PSystemPath {
- GraphicsPath path
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.sequencediagram.graphic.ConstraintSet {
- ParticipantBoxSimple firstBorder
- ParticipantBoxSimple lastborder
- List<Pushable> participantList
- Map<List<Pushable>,Constraint> constraints
+ String toString()
+ double getMaxX()
+ Constraint getConstraint(Pushable,Pushable)
+ Constraint getConstraintAfter(Pushable)
+ Constraint getConstraintBefore(Pushable)
+ Pushable getPrevious(Pushable)
+ Pushable getNext(Pushable)
- Pushable getOtherParticipant(Pushable,int)
+ void takeConstraintIntoAccount(StringBounder)
- void pushEverybody(StringBounder,int)
+ void pushToLeftParticipantBox(double,Pushable,boolean)
+ void pushToLeft(double)
- void ensureSpaceAfter(StringBounder,Pushable,Pushable,double)
+ Pushable getFirstBorder()
+ Pushable getLastborder()
}
class net.sourceforge.plantuml.svek.image.EntityImageLollipopInterfaceEye1 {
- {static} int SIZE
- TextBlock desc
- Bibliotekon bibliotekon
- Url url
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile {
- Reference reference
- TileArguments tileArguments
- Real first
- Real last
+ Event getEvent()
- void init(StringBounder)
- Component getComponent(StringBounder)
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment {
- List<StringLocated> logs
+ StringLocated peek()
}
class net.sourceforge.plantuml.openiconic.Movement {
- SvgCommandLetter letter
- List<SvgCommandNumber> arguments
+ char getLetter()
+ Movement mutoToC(SvgPosition)
+ String toSvg()
+ SvgPosition getSvgPosition(int)
+ double getArgument(int)
+ SvgPosition lastPosition()
+ Movement toAbsoluteUpperCase(SvgPosition)
+ SvgPosition getMirrorControlPoint()
+ boolean is(char)
}
class net.sourceforge.plantuml.classdiagram.ClassDiagramFactory {
+ ClassDiagram createEmptyDiagram(UmlSource,ISkinSimple)
# List<Command> createCommands()
}
class net.sourceforge.plantuml.brotli.Utils {
- {static} byte[] BYTE_ZEROES
- {static} int[] INT_ZEROES
~ {static} void fillBytesWithZeroes(byte[],int,int)
~ {static} void fillIntsWithZeroes(int[],int,int)
~ {static} void copyBytesWithin(byte[],int,int,int)
~ {static} int readInput(InputStream,byte[],int,int)
~ {static} void closeInput(InputStream)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandPartition3 {
~ {static} IRegex getRegexConcat()
- USymbol getUSymbol(String)
- ColorParam getColorParamBorder(USymbol)
- ColorParam getColorParamBack(USymbol)
- {static} ColorParser color(String)
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
+ StyleSignature getDefaultStyleDefinitionPartition()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileSplit1 {
- List<Ftile> forks
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Set<Swimlane> getSwimlanes()
+ {static} Set<Swimlane> mergeSwimlanes(List<Ftile>)
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
+ UTranslate getTranslateFor(Ftile,StringBounder)
}
class net.sourceforge.plantuml.api.ImageDataSimple {
+ boolean containsCMapData()
+ String getCMapData(String)
+ String getWarningOrError()
+ {static} ImageData error()
+ {static} ImageData ok()
}
class net.sourceforge.plantuml.svek.Ports {
- Map<String,PortGeometry> ids
+ void addThis(Ports)
+ {static} String encodePortNameToId(String)
+ String toString()
+ Ports translateY(double)
+ void add(String,double,double)
+ Map<String,PortGeometry> getAllWithEncodedPortId()
}
class net.sourceforge.plantuml.style.StyleLoader {
- SkinParam skinParam
- StyleBuilder styleBuilder
- {static} String NAME_USER
- {static} Pattern2 userName
- {static} Pattern2 propertyAndValue
- {static} Pattern2 closeBracket
+ StyleBuilder loadSkin(String)
- void loadSkinInternal(BlocLines)
+ {static} Collection<Style> getDeclaredStyles(BlocLines,AutomaticCounter)
- {static} StyleSignature contextToSignature(List<String>)
}
class net.sourceforge.plantuml.project.draw.TimeHeaderWeekly {
- WeekNumberStrategy weekNumberStrategy
+ double getTimeHeaderHeight()
+ double getTimeFooterHeight()
+ void drawTimeHeader(UGraphic,double)
+ void drawTimeFooter(UGraphic)
- void drawCalendar(UGraphic,double)
- void printMonths(UGraphic)
- void printSmallVbars(UGraphic,double)
- void printDaysOfMonth(UGraphic)
- void printMonth(UGraphic,MonthYear,double,double)
- void drawVbar(UGraphic,double,double,double)
- void printLeft(UGraphic,TextBlock,double)
+ double getFullHeaderHeight()
}
class net.sourceforge.plantuml.math.TeXIconBuilder {
- Icon icon
+ Icon getIcon()
}
class net.sourceforge.plantuml.descdiagram.command.CommandNewpage {
- PSystemCommandFactory factory
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(UmlDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.NamedOutputStream {
- OutputStream os
- BaseFile basefile
+ void close()
+ void flush()
+ void write(byte[])
+ void write(byte[],int,int)
+ void write(int)
+ BaseFile getBasefile()
}
abstract class net.sourceforge.plantuml.Log {
- {static} long start
+ {static} void debug(String)
+ {static} void info(String)
+ {static} void error(String)
- {static} String format(String)
+ {static} void println(Object)
+ {static} void header(String)
}
abstract class net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic {
- UStroke stroke
- UPattern pattern
- boolean hidden
- HColor backColor
- HColor color
- boolean enlargeClip
- UTranslate translate
- ColorMapper colorMapper
- UClip clip
- double scale
- HColor defaultBackground
+ HColor getDefaultBackground()
+ double dpiFactor()
+ UGraphic apply(UChange)
+ UClip getClip()
+ void enlargeClip()
# {abstract}AbstractCommonUGraphic copyUGraphic()
+ UParam getParam()
# double getTranslateX()
# double getTranslateY()
+ ColorMapper getColorMapper()
+ void flushUg()
+ void startUrl(Url)
+ void closeUrl()
+ void startGroup(UGroupType,String)
+ void closeGroup()
+ boolean matchesProperty(String)
}
interface net.sourceforge.plantuml.version.IteratorCounter2 {
+ int currentNum()
+ IteratorCounter2 cloneMe()
+ StringLocated peek()
+ StringLocated peekPrevious()
+ void copyStateFrom(IteratorCounter2)
+ List<StringLocated> getTrace()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandEnd3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.jsondiagram.SmetanaForJson {
- {static} int NUM
- {static} boolean printFirst
- {static} boolean exitAfterFirst
- UGraphic ug
- ISkinParam skinParam
- int num
- ST_Agraph_s g
- StringBounder stringBounder
- List<InternalNode> nodes
- List<ST_Agedge_s> edges
- Mirror xMirror
- UGraphic getUgFor(SName)
- SName getDiagramType()
- Style getStyle(SName)
- Style getStyleNodeHighlight()
- ST_Agnode_s manageOneNode(JsonValue,List<String>)
- List<String> removeOneLevel(String,List<String>)
+ void drawMe(JsonValue,List<String>)
- void initGraph(JsonValue,List<String>)
- UTranslate getPosition(ST_Agnode_s)
- JsonCurve getCurve(ST_Agedge_s,double)
- ST_Agedge_s createEdge(ST_Agnode_s,ST_Agnode_s,int)
- ST_Agnode_s createNode(Dimension2D,int,boolean,int,int)
- String getDotLabel(int,boolean,int,int,int)
}
class net.sourceforge.plantuml.jsondiagram.SmetanaForJson.InternalNode {
- TextBlockJson block
- ST_Agnode_s node
~ double getMaxX()
}
class net.sourceforge.plantuml.xmi.XmiClassDiagramArgo {
- void addLink(Link)
- Element createEntityNodeRef(IEntity)
}
class net.sourceforge.plantuml.sudoku.PSystemSudoku {
- ISudoku sudoku
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.tim.expression.ReversePolishInterpretor {
- TValue result
- boolean trace
+ TValue getResult()
}
class net.sourceforge.plantuml.command.regex.RegexResult {
- Map<String,RegexPartialMatch> data
+ String toString()
+ RegexPartialMatch get(String)
+ String get(String,int)
+ String getLazzy(String,int)
+ int size()
}
class net.sourceforge.plantuml.project.Arrows {
- {static} double delta2
- {static} UPolygon asToUp()
- {static} UPolygon asToDown()
- {static} UPolygon asToRight()
- {static} UPolygon asToLeft()
+ {static} UPolygon asTo(Direction)
}
interface net.sourceforge.plantuml.activitydiagram3.ftile.ConnectionTranslatable {
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.sequencediagram.ParticipantEnglober {
- Display title
- HColor boxColor
- Stereotype stereotype
+ Display getTitle()
+ HColor getBoxColor()
+ Stereotype getStereotype()
}
class net.sourceforge.plantuml.project.draw.RectangleTask {
- List<Segment> segments
- double round
- int completion
- void draw2hlines(UGraphic,double,ULine)
- void drawRect(UGraphic,int,HColor,double,double)
+ void draw(UGraphic,double,HColor,boolean,boolean)
- void drawWithRound(UGraphic,double,HColor)
- void drawWithoutRound(UGraphic,double,HColor,boolean,boolean)
- void drawIntermediateDotted(UGraphic,double)
- void drawPartly(UGraphic,Segment,double,HColor,int)
}
class net.sourceforge.plantuml.code.StringCompressorNone {
+ String compress(String)
+ String decompress(String)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionSwitch {
- List<Branch> branches
- ISkinParam skinParam
- Instruction parent
- Branch current
- LinkRendering topInlinkRendering
- LinkRendering afterEndwhile
- Display labelTest
- Swimlane swimlane
+ boolean containsBreak()
+ void add(Instruction)
+ Ftile createFtile(FtileFactory)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Instruction getLast()
+ boolean switchCase(Display,LinkRendering)
+ Instruction getParent()
+ void endSwitch(LinkRendering)
}
class net.sourceforge.plantuml.ugraphic.UGraphicStencil {
- Stencil stencil
- UStroke defaultStroke
+ {static} UGraphic create(UGraphic,Stencil,UStroke)
+ {static} UGraphic create(UGraphic,Dimension2D)
- {static} Stencil getRectangleStencil(Dimension2D)
# AbstractUGraphicHorizontalLine copy(UGraphic)
# void drawHline(UGraphic,UHorizontalLine,UTranslate)
}
class net.sourceforge.plantuml.PSystemUtils {
+ {static} List<FileImageData> exportDiagrams(Diagram,SuggestedFile,FileFormatOption)
+ {static} List<FileImageData> exportDiagrams(Diagram,SuggestedFile,FileFormatOption,boolean)
- {static} List<FileImageData> exportDiagramsNewpaged(NewpagedDiagram,SuggestedFile,FileFormatOption)
+ {static} boolean canFileBeWritten(SFile)
- {static} List<FileImageData> exportDiagramsDefault(Diagram,SuggestedFile,FileFormatOption)
- {static} List<FileImageData> exportDiagramsActivityDiagram3(ActivityDiagram3,SuggestedFile,FileFormatOption)
- {static} List<FileImageData> exportDiagramsSequence(SequenceDiagram,SuggestedFile,FileFormatOption)
- {static} List<FileImageData> exportDiagramsCuca(CucaDiagram,SuggestedFile,FileFormatOption)
- {static} List<FileImageData> exportDiagramsGantt2(GanttDiagram,SuggestedFile,FileFormatOption)
- {static} List<FileImageData> createFilesHtml(CucaDiagram,SuggestedFile)
}
class net.sourceforge.plantuml.sprite.StdlibDiagram {
- {static} int WIDTH
- String name
+ DiagramDescription getDescription()
+ ImageBuilder createImageBuilder(FileFormatOption)
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
- TextBlock getTable()
+ void setStdlibName(String)
- void drawInternal(UGraphic)
}
class net.sourceforge.plantuml.SkinParam {
+ {static} String DEFAULT_PRESERVE_ASPECT_RATIO
- String skin
- StyleBuilder styleBuilder
- {static} String stereoPatternString
- {static} Pattern2 stereoPattern
- Map<String,String> params
- Map<String,String> svgCharSizes
- Rankdir rankdir
- UmlDiagramType type
- boolean useVizJs
- Map<String,List<String>> cacheCleanForKey
- Map<String,Sprite> sprites
- HColorSet htmlColorSet
- ThemeStyle themeStyle
+ StyleBuilder getCurrentStyleBuilder()
+ void muteStyle(Style)
+ String getDefaultSkin()
+ void setDefaultSkin(String)
+ StyleBuilder getCurrentStyleBuilderInternal()
+ {static} int zeroMargin(int)
+ void copyAllFrom(ISkinSimple)
+ Map<String,String> values()
+ void setParam(String,String)
+ {static} SkinParam create(UmlDiagramType)
+ {static} SkinParam noShadowing(UmlDiagramType)
~ List<String> cleanForKey(String)
~ List<String> cleanForKeySlow(String)
- {static} String replaceSmart(String,String,String)
+ HColor getHyperlinkColor()
+ HColor getBackgroundColor(boolean)
+ String getValue(String)
+ String getValue(String,String)
- boolean valueIs(String,String)
- boolean isTrue(String)
~ {static} String humanName(String)
+ HColor getHtmlColor(ColorParam,Stereotype,boolean)
+ char getCircledCharacter(Stereotype)
+ Colors getColors(ColorParam,Stereotype)
- String getParamName(ColorParam,boolean)
- void checkStereotype(Stereotype)
- int getFontSize(Stereotype,FontParam)
- String getFontFamily(Stereotype,FontParam)
+ HColor getFontHtmlColor(Stereotype,FontParam)
- String getFirstValueNonNullWithSuffix(String,FontParam)
- int getFontStyle(Stereotype,boolean,FontParam)
+ UFont getFont(Stereotype,boolean,FontParam)
+ int getCircledCharacterRadius()
+ int classAttributeIconSize()
+ {static} Collection<String> getPossibleValues()
- {static} String capitalize(String)
+ int getDpi()
+ DotSplines getDotSplines()
+ HorizontalAlignment getHorizontalAlignment(AlignmentParam,ArrowDirection,boolean)
+ HorizontalAlignment getDefaultTextAlignment(HorizontalAlignment)
+ HorizontalAlignment getStereotypeAlignment()
- String getArg(String,int)
+ ColorMapper getColorMapper()
+ boolean shadowing(Stereotype)
+ boolean shadowingForNote(Stereotype)
+ boolean shadowing2(Stereotype,SkinParameter)
+ Collection<String> getAllSpriteNames()
+ void addSprite(String,Sprite)
+ Sprite getSprite(String)
+ PackageStyle packageStyle()
+ ComponentStyle componentStyle()
+ boolean stereotypePositionTop()
+ boolean useSwimlanes(UmlDiagramType)
+ boolean swimlanes()
+ double getNodesep()
+ double getRanksep()
+ double getDiagonalCorner(CornerParam,Stereotype)
+ double getRoundCorner(CornerParam,Stereotype)
- Double getCornerInternal(String,CornerParam,Stereotype)
+ UStroke getThickness(LineParam,Stereotype)
+ LineBreakStrategy maxMessageSize()
+ LineBreakStrategy wrapWidth()
+ LineBreakStrategy swimlaneWrapTitleWidth()
+ boolean strictUmlStyle()
+ boolean forceSequenceParticipantUnderlined()
+ ConditionStyle getConditionStyle()
+ ConditionEndStyle getConditionEndStyle()
+ double minClassWidth()
+ boolean sameClassWidth()
+ Rankdir getRankdir()
+ void setRankdir(Rankdir)
+ boolean useOctagonForActivity(Stereotype)
+ HColorSet getIHtmlColorSet()
+ boolean useUnderlineForHyperlink()
+ int groupInheritance()
+ Guillemet guillemet()
+ boolean handwritten()
+ String getSvgLinkTarget()
+ String getPreserveAspectRatio()
+ String getMonospacedFamily()
+ int getTabSize()
+ int maxAsciiMessageLength()
+ int colorArrowSeparationSpace()
+ SplitParam getSplitParam()
+ int swimlaneWidth()
+ UmlDiagramType getUmlDiagramType()
+ HColor hoverPathColor()
+ double getPadding()
+ double getPadding(PaddingParam)
- double getAsDouble(String)
- int getAsInt(String,int)
+ boolean useRankSame()
+ boolean displayGenericWithOldFashion()
+ boolean responseMessageBelowArrow()
+ TikzFontDistortion getTikzFontDistortion()
+ boolean svgDimensionStyle()
+ boolean fixCircleLabelOverlapping()
+ void setUseVizJs(boolean)
+ boolean isUseVizJs()
+ Padder sequenceDiagramPadder()
+ ActorStyle actorStyle()
+ void setSvgSize(String,String)
+ String transformStringForSizeHack(String)
+ LengthAdjust getlengthAdjust()
+ void assumeTransparent(ThemeStyle)
+ ThemeStyle getThemeStyle()
}
class net.sourceforge.plantuml.tim.stdlib.LogicalNot {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.tim.expression.TokenStack {
- List<Token> tokens
+ int size()
+ TokenStack subTokenStack(int)
+ String toString()
+ void add(Token)
+ TokenStack withoutSpace()
+ {static} TokenStack eatUntilCloseParenthesisOrComma(Eater)
+ {static} void eatUntilCloseParenthesisOrComma(TokenIterator)
- int countFunctionArg(TokenIterator)
+ void guessFunctions()
+ TokenIterator tokenIterator()
+ TValue getResult(LineLocation,TContext,TMemory)
}
class net.sourceforge.plantuml.tim.expression.TokenStack.InternalIterator {
- int pos
+ Token peekToken()
+ Token nextToken()
+ boolean hasMoreTokens()
}
abstract class net.sourceforge.plantuml.UmlDiagram {
- boolean rotation
- boolean hideUnlinkedData
- int minwidth
- Dimension2D lastInfo
+ int getMinwidth()
+ void setMinwidth(int)
+ boolean isRotation()
+ void setRotation(boolean)
+ DisplaySection getFooterOrHeaderTeoz(FontParam)
+ boolean isHideUnlinkedData()
+ void setHideUnlinkedData(boolean)
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
- void exportDiagramError(OutputStream,Throwable,FileFormatOption,String)
+ {static} void exportDiagramError(OutputStream,Throwable,FileFormatOption,long,String,String,List<String>)
- {static} void exportDiagramErrorText(OutputStream,Throwable,List<String>)
+ String getFlashData()
- {static} List<String> getFailureText1(Throwable,String,String)
+ {static} List<String> getFailureText2(Throwable,String)
- void exportDiagramInternalMjpeg(OutputStream)
- ImageData exportDiagramInternalPdf(OutputStream,int)
# {abstract}ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
# void exportCmap(SuggestedFile,int,ImageData)
~ {static} String changeName(String)
+ String getWarningOrError()
+ void setHideEmptyDescription(boolean)
}
class net.sourceforge.plantuml.AParentFolderZip {
- SFile zipFile
- String parent
+ String toString()
+ AFile getAFile(String)
~ String merge(String)
}
class net.sourceforge.plantuml.graphic.SkinParameter {
+ {static} SkinParameter DATABASE
+ {static} SkinParameter ARTIFACT
+ {static} SkinParameter COMPONENT1
+ {static} SkinParameter NODE
+ {static} SkinParameter STORAGE
+ {static} SkinParameter QUEUE
+ {static} SkinParameter STACK
+ {static} SkinParameter CLOUD
+ {static} SkinParameter FRAME
+ {static} SkinParameter COMPONENT2
+ {static} SkinParameter AGENT
+ {static} SkinParameter FOLDER
+ {static} SkinParameter FILE
+ {static} SkinParameter PACKAGE
+ {static} SkinParameter CARD
+ {static} SkinParameter RECTANGLE
+ {static} SkinParameter LABEL
+ {static} SkinParameter HEXAGON
+ {static} SkinParameter PERSON
+ {static} SkinParameter ARCHIMATE
+ {static} SkinParameter COLLECTIONS
+ {static} SkinParameter ACTOR
+ {static} SkinParameter USECASE
+ {static} SkinParameter BOUNDARY
+ {static} SkinParameter CONTROL
+ {static} SkinParameter ENTITY
+ {static} SkinParameter INTERFACE
+ {static} SkinParameter PARTICIPANT
- ColorParam colorParamBorder
- ColorParam colorParamBack
- FontParam fontParam
- FontParam fontParamStereotype
- String name
- LineParam lineParam
- CornerParam roundParam
- SName styleName
+ String toString()
+ SName getStyleName()
+ String getUpperCaseName()
+ ColorParam getColorParamBorder()
+ ColorParam getColorParamBack()
+ FontParam getFontParam()
+ FontParam getFontParamStereotype()
+ double getRoundCorner(ISkinParam,Stereotype)
+ double getDiagonalCorner(ISkinParam,Stereotype)
+ UStroke getStroke(ISkinParam,Stereotype)
}
class net.sourceforge.plantuml.project.core3.TimeLineSimple {
- List<Long> events
+ long getNext(long)
+ long getPrevious(long)
+ void add(long)
}
class net.sourceforge.plantuml.tim.stdlib.FunctionExists {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.ugraphic.eps.UGraphicEps {
- StringBounder stringBounder
- EpsStrategy strategyTOBEREMOVED
# AbstractCommonUGraphic copyUGraphic()
- void register(EpsStrategy)
+ void close()
+ String getEPSCode()
+ EpsGraphics getEpsGraphics()
+ StringBounder getStringBounder()
+ void drawEps(String,double,double)
+ {static} String getEpsString(HColor,ColorMapper,EpsStrategy,UDrawable)
+ void startUrl(Url)
+ void closeUrl()
+ void writeImageTOBEMOVED(OutputStream,String,int)
}
class net.sourceforge.plantuml.project.lang.SentenceHappens {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.tim.stdlib.GetVersion {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
abstract class net.sourceforge.plantuml.posimo.AbstractEntityImage2 {
- IEntity entity
- ISkinParam skinParam
- Rose rose
+ {abstract}Dimension2D getDimension(StringBounder)
# IEntity getEntity()
# UFont getFont(FontParam)
# HColor getFontColor(FontParam)
# HColor getColor(ColorParam)
# ISkinParam getSkinParam()
}
class net.sourceforge.plantuml.creole.CreoleContext {
- List<Integer> stack
+ int getLocalNumber(int)
- void ensureStackOk(int)
}
class net.sourceforge.plantuml.gitlog.MagicBox {
- ISkinParam skinParam
- GNode node
- TextBlock getSmallBlock()
- TextBlock getCommentBlock()
+ Dimension2D getBigDim(StringBounder)
+ void drawBorder(UGraphic,Dimension2D)
}
class net.sourceforge.plantuml.wire.WLinkHorizontal {
- UTranslate start
- double destination
- WLinkType type
- WArrowDirection direction
- HColor color
- Display label
- ISkinParam skinParam
- TextBlock getTextBlock()
+ void drawMe(UGraphic)
- void drawBusArrow(UGraphic)
- void drawNormalArrow(UGraphic)
}
class net.sourceforge.plantuml.code.TranscoderImpl {
- Compression compression
- URLEncoder urlEncoder
- StringCompressor stringCompressor
- Format format
+ {static} Transcoder utf8(URLEncoder,StringCompressor,Compression)
+ {static} Transcoder upf9(URLEncoder,StringCompressor,Compression)
+ String encode(String)
+ String decode(String)
}
interface net.sourceforge.plantuml.code.deflate.BitInputStream {
+ int getBitPosition()
+ int readByte()
+ int read()
+ int readNoEof()
+ void close()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityOther {
- UPolygon polygon
+ void drawU(UGraphic)
+ Point2D somePoint()
}
class net.sourceforge.plantuml.activitydiagram.ActivityDiagram {
- IEntity lastEntityConsulted
- IEntity lastEntityBrancheConsulted
- ConditionalContext currentContext
+ ILeaf getOrCreateLeaf(Ident,Code,LeafType,USymbol)
- String getAutoBranch()
+ IEntity getOrCreate(Ident,Code,Display,LeafType)
+ ILeaf getLeafVerySmart(Ident)
+ void startIf(String)
+ void endif()
+ ILeaf getStart()
+ ILeaf getEnd(String)
- void updateLasts(IEntity)
+ ILeaf createLeaf(Ident,Code,Display,LeafType,USymbol)
+ IEntity createNote(Ident,Code,Display)
# List<String> getDotStrings()
+ DiagramDescription getDescription()
+ IEntity getLastEntityConsulted()
+ IEntity getLastEntityBrancheConsulted()
+ ConditionalContext getCurrentContext()
+ void setLastEntityConsulted(IEntity)
+ IEntity createInnerActivity()
+ void concurrentActivity(String)
}
class net.sourceforge.plantuml.graphic.QuoteUtils {
- {static} List<String> quotes
- {static} List<String> tmp
+ {static} String getSomeQuote()
}
class net.sourceforge.plantuml.project.lang.ComplementInColors {
+ IRegex toRegex(String)
+ Failable<CenterBorderColor> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.braille.DriverPolygonBraille {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,BrailleGrid)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryParenthesis {
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
abstract class net.sourceforge.plantuml.command.CommandMultilines2 {
- IRegex starting
- MultilinesStrategy strategy
+ boolean syntaxWithFinalBracket()
+ {abstract}String getPatternEnd()
+ String[] getDescription()
+ CommandControl isValid(BlocLines)
+ CommandExecutionResult execute(S,BlocLines)
# {abstract}CommandExecutionResult executeNow(S,BlocLines)
# boolean isCommandForbidden()
# void actionIfCommandValid()
# IRegex getStartingPattern()
}
class net.sourceforge.plantuml.LineLocationImpl {
- String desc
- int position
- LineLocation parent
+ String toString()
+ LineLocationImpl oneLineRead()
+ int getPosition()
+ String getDescription()
+ LineLocation getParent()
- boolean isStandardLibrary()
+ int compareTo(LineLocation)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.Snake {
- Worm worm
- UPolygon startDecoration
- UPolygon endDecoration
- Rainbow color
- List<Text> texts
- MergeStrategy mergeable
- Direction emphasizeDirection
+ Snake transformX(PiecewiseAffineTransform)
+ Snake move(double,double)
- Snake cloneEmpty()
+ Snake ignoreForCompression()
+ Snake emphasizeDirection(Direction)
+ Snake withoutEndDecoration()
+ Snake withMerge(MergeStrategy)
+ Snake withLabel(TextBlock,HorizontalAlignment)
+ Snake withLabel(TextBlock,VerticalAlignment)
+ {static} Snake create(Rainbow)
+ {static} Snake create(Rainbow,UPolygon)
+ {static} Snake create(UPolygon,Rainbow,UPolygon)
+ Snake translate(UTranslate)
+ String toString()
+ void addPoint(double,double)
+ void addPoint(Point2D)
+ void drawInternal(UGraphic)
- void drawRainbow(UGraphic)
- void drawInternalLabel(UGraphic)
+ double getMaxX(StringBounder)
- Point2D getTextBlockPosition(StringBounder,Text)
+ List<Line2D> getHorizontalLines()
- Point2D getFirst()
+ Point2D getLast()
~ {static} boolean same(Point2D,Point2D)
+ Snake merge(Snake,StringBounder)
+ boolean touches(Snake)
+ boolean doesHorizontalCross(MinMax)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.Snake.Text {
- TextBlock textBlock
- VerticalAlignment verticalAlignment
- HorizontalAlignment horizontalAlignment
- boolean hasText(StringBounder)
}
class net.sourceforge.plantuml.svek.image.EntityImageTips {
- Rose rose
- ISkinParam skinParam
- HColor noteBackgroundColor
- HColor borderColor
- Bibliotekon bibliotekon
- double ySpacing
- Position getPosition()
+ ShapeType getShapeType()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- Opale getOpale(Display)
}
class net.sourceforge.plantuml.oregon.SmartKeyboard {
- Keyboard keyboard
- List<String> history
+ String input(Screen)
+ int inputInt(Screen)
+ boolean hasMore()
+ List<String> getHistory()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry {
- double width
- double height
- double left
- double inY
- double outY
+ Point2D getPointA()
+ Point2D getPointIn()
+ Point2D getPointB()
+ Point2D getPointC()
+ Point2D getPointD()
+ Point2D getPointOut()
+ String toString()
+ void setSize(double,double)
+ FtileGeometry incHeight(double)
+ boolean hasPointOut()
+ FtileGeometry withoutPointOut()
+ FtileGeometry translate(UTranslate)
+ double getInY()
+ double getLeft()
+ double getRight()
+ double getOutY()
+ double getWidth()
+ double getHeight()
+ FtileGeometry addDim(double,double)
+ FtileGeometry addMarginX(double)
+ FtileGeometry addMarginX(double,double)
+ FtileGeometry fixedHeight(double)
+ FtileGeometry appendBottom(FtileGeometry)
+ FtileGeometry ensureHeight(double)
- FtileGeometry ensureRightStrange(double)
}
interface net.sourceforge.plantuml.posimo.IEntityImageBlock {
~ Dimension2D getDimension(StringBounder)
~ void drawU(UGraphic,double,double,double,double)
}
class net.sourceforge.plantuml.security.SFile {
+ {static} String separator
+ {static} String pathSeparator
+ {static} char separatorChar
- File internal
+ String toString()
+ {static} SFile fromFile(File)
+ SFile file(String)
+ boolean exists()
+ SFile getCanonicalFile()
+ boolean isAbsolute()
+ boolean isDirectory()
+ String getName()
+ boolean isFile()
+ long lastModified()
+ int compareTo(SFile)
+ String getPath()
+ long length()
+ boolean canWrite()
+ void setWritable(boolean)
+ void delete()
+ Collection<SFile> listFiles()
+ String[] list()
+ SFile getAbsoluteFile()
+ SFile getParentFile()
+ int hashCode()
+ boolean equals(Object)
+ String getAbsolutePath()
+ String getPrintablePath()
+ boolean canRead()
+ void deleteOnExit()
+ void mkdirs()
+ {static} SFile createTempFile(String,String)
+ URI toURI()
+ boolean renameTo(SFile)
- boolean isFileOk()
- boolean isInAllowList(List<SFile>)
- String getCleanPathSecure()
+ BufferedImage readRasterImageFromFile()
+ BufferedReader openBufferedReader()
+ File conv()
+ InputStream openFile()
+ BufferedOutputStream createBufferedOutputStream()
+ PrintWriter createPrintWriter()
+ PrintWriter createPrintWriter(String)
+ FileOutputStream createFileOutputStream()
+ FileOutputStream createFileOutputStream(boolean)
+ PrintStream createPrintStream()
+ PrintStream createPrintStream(String)
}
class net.sourceforge.plantuml.project.command.CommandGanttArrow2 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(GanttDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryArrow {
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.command.regex.MaxSizeHashMap {
- int maxSize
# boolean removeEldestEntry(Map.Entry<K,V>)
}
abstract class net.sourceforge.plantuml.command.regex.MyPattern {
- {static} Map<String,Pattern2> cache
- {static} Pattern2 EMPTY
+ {static} Pattern2 cmpile(String)
- {static} String transform(String)
+ {static} boolean mtches(CharSequence,String)
+ {static} CharSequence removeAll(CharSequence,String)
}
class net.sourceforge.plantuml.sprite.SpriteColor {
- int width
- int height
- int[][] grey
- int[][] color
+ void setGrey(int,int,int)
+ void setColor(int,int,int)
+ int getHeight()
+ int getWidth()
+ UImage toUImage(ColorMapper,HColor,HColor)
+ TextBlock asTextBlock(HColor,double)
}
class net.sourceforge.plantuml.salt.Dictionary {
- Map<String,Element> data
- Map<String,Sprite> sprites
+ void put(String,Element)
+ Element get(String)
+ Sprite getSprite(String)
+ String getValue(String)
+ double getPadding()
+ Guillemet guillemet()
+ String getMonospacedFamily()
+ int getTabSize()
+ HColorSet getIHtmlColorSet()
+ int getDpi()
+ void addSprite(String,Sprite)
+ LineBreakStrategy wrapWidth()
+ ColorMapper getColorMapper()
+ void copyAllFrom(ISkinSimple)
+ Map<String,String> values()
+ double minClassWidth()
+ String transformStringForSizeHack(String)
+ ThemeStyle getThemeStyle()
}
class net.sourceforge.plantuml.statediagram.command.CommandEndState {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(StateDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.command.ProtectedCommand {
- Command<S> cmd
+ CommandExecutionResult execute(S,BlocLines)
+ CommandControl isValid(BlocLines)
+ String[] getDescription()
}
class net.sourceforge.plantuml.yaml.YamlLines {
+ {static} String KEY
- List<String> lines
- void manageSpaceTwoPoints()
- String removeDiese(String)
- void manageList()
- void removeFirstCols(int)
- int startingEmptyCols()
- {static} int startingSpaces(String)
- void mergeMultiline()
- String isMultilineStart(int)
+ {static} String nameOnly(String)
- boolean textOnly(String)
- boolean isList(String)
+ Iterator<String> iterator()
}
class net.sourceforge.plantuml.project.lang.ComplementEmpty {
+ IRegex toRegex(String)
+ Failable<Object> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.jcckit.PSystemJcckit {
- PropertiesBasedConfigData prop
- int width
- int height
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.tim.EaterException {
- String message
+ {static} EaterException unlocated(String)
+ {static} EaterException located(String)
+ String getMessage()
+ EaterExceptionLocated withLocation(StringLocated)
}
abstract class net.sourceforge.plantuml.sequencediagram.teoz.CommonTile {
- StringBounder stringBounder
- double y
+ void callbackY(double)
# void callbackY_internal(double)
# StringBounder getStringBounder()
+ double getMiddleX()
+ double getY()
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryScroll {
+ Terminated<Element> create()
+ boolean ready()
}
class net.sourceforge.plantuml.sequencediagram.teoz.UGraphicNewpages {
- double ymin
- double ymax
- double dy
+ void draw(UShape)
+ UGraphic apply(UChange)
}
class net.sourceforge.plantuml.tim.stdlib.DateFunction {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.version.PSystemKeygen {
- String key
# UDrawable getRootDrawable(FileFormatOption)
+ DiagramDescription getDescription()
- void drawInternal(UGraphic)
- ArrayList<String> header()
- void drawFlash(UGraphic,LicenseInfo)
}
class net.sourceforge.plantuml.svek.image.Footprint {
- StringBounder stringBounder
+ ContainingEllipse getEllipse(UDrawable,double)
}
class net.sourceforge.plantuml.svek.image.Footprint.MyUGraphic {
- UTranslate translate
- List<Point2D.Double> all
+ double dpiFactor()
+ boolean matchesProperty(String)
+ UGraphic apply(UChange)
+ StringBounder getStringBounder()
+ UParam getParam()
+ void draw(UShape)
+ ColorMapper getColorMapper()
- void addPoint(double,double)
- void drawText(double,double,UText)
- void drawImage(double,double,UImage)
- void drawPath(double,double,UPath)
- void drawRectangle(double,double,URectangle)
- void drawEmpty(double,double,UEmpty)
+ void flushUg()
}
class net.sourceforge.plantuml.sprite.PSystemListInternalSpritesFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.classdiagram.command.CommandStereotype {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ClassDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.board.BoardDiagram {
- List<Activity> activities
+ DiagramDescription getDescription()
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
- TextBlockBackcolored getTextBlock()
- void drawMe(UGraphic)
- double getFullWidth()
- int getMaxStage()
- Activity getLastActivity()
+ CommandExecutionResult addLine(String,String)
}
class net.sourceforge.plantuml.svek.PointAndAngle {
- Point2D pt
- double angle
+ Point2D getPt()
+ double getAngle()
+ double getX()
+ double getY()
}
class net.sourceforge.plantuml.creole.Parser {
+ {static} String MONOSPACED
+ {static} SheetBuilder build(FontConfiguration,HorizontalAlignment,ISkinSimple,CreoleMode)
+ {static} SheetBuilder build(FontConfiguration,HorizontalAlignment,ISkinSimple,CreoleMode,FontConfiguration)
+ {static} boolean isCodeStart(String)
+ {static} boolean isCodeEnd(String)
+ {static} boolean isTreeStart(String)
+ {static} double getScale(String,double)
+ {static} String getColor(String)
}
class net.sourceforge.plantuml.directdot.PSystemDot {
- String data
+ DiagramDescription getDescription()
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
}
class net.sourceforge.plantuml.command.CommandPackage {
- {static} IRegex getRegexConcat()
+ boolean syntaxWithFinalBracket()
- {static} ColorParser color()
# CommandExecutionResult executeArg(AbstractEntityDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.StringUtils {
+ {static} char USER_NEWLINE
+ {static} char USER_TAB
+ {static} char HR_SIMPLE
+ {static} char HR_DOUBLE
+ {static} char HR_DOTTED
+ {static} char HR_BOLD
+ {static} char PRIVATE_FIELD
+ {static} char PROTECTED_FIELD
+ {static} char PACKAGE_PRIVATE_FIELD
+ {static} char PUBLIC_FIELD
+ {static} char PRIVATE_METHOD
+ {static} char PROTECTED_METHOD
+ {static} char PACKAGE_PRIVATE_METHOD
+ {static} char PUBLIC_METHOD
+ {static} char IE_MANDATORY
+ {static} char BOLD_START
+ {static} char BOLD_END
+ {static} char PRIVATE_BLOCK
+ {static} char INTERNAL_BOLD
+ {static} String toInternalBoldNumber(String)
+ {static} void appendInternalToRealBoldNumber(StringBuilder,char)
+ {static} void appendInternalToPlainNumber(StringBuilder,char)
+ {static} List<String> getSplit(Pattern2,String)
+ {static} boolean isNotEmpty(String)
+ {static} boolean isNotEmpty(List<? extends CharSequence>)
+ {static} boolean isEmpty(String)
+ {static} String manageHtml(String)
+ {static} String unicode(String)
+ {static} String unicodeForHtml(String)
+ {static} String unicodeForHtml(Display)
+ {static} String manageArrowForSequence(String)
+ {static} String capitalize(String)
+ {static} String goUpperCase(String)
+ {static} char goUpperCase(char)
+ {static} String goLowerCase(String)
+ {static} char goLowerCase(char)
+ {static} String manageArrowForCuca(String)
+ {static} String manageQueueForCuca(String)
+ {static} Direction getArrowDirection(String)
+ {static} Direction getQueueDirection(String)
+ {static} String eventuallyRemoveStartingAndEndingDoubleQuote(String,String)
+ {static} String eventuallyRemoveStartingAndEndingDoubleQuote(String)
- {static} boolean isDoubleQuote(char)
+ {static} boolean isCJK(char)
+ {static} char hiddenLesserThan()
+ {static} char hiddenBiggerThan()
+ {static} String hideComparatorCharacters(String)
+ {static} String showComparatorCharacters(String)
- {static} int getWidth(Display)
+ {static} int getWcWidth(Display)
+ {static} int getHeight(List<? extends CharSequence>)
+ {static} int getHeight(Display)
+ {static} boolean isDiagramCacheable(String)
+ {static} int getPragmaRevision(String)
+ {static} List<String> splitComma(String)
+ {static} String getUid(String,int)
+ {static} List<O> merge(List<O>,List<O>)
+ {static} boolean endsWithBackslash(String)
+ {static} String rot(String)
+ {static} String manageUnicodeNotationUplus(String)
+ {static} String manageAmpDiese(String)
+ {static} String manageTildeArobaseStart(String)
+ {static} String trinNoTrace(CharSequence)
+ {static} String trin(String)
- {static} int getPositionStartNonSpace(String)
- {static} String trinEnding(String)
- {static} String trinEndingInternal(String,int)
- {static} boolean isSpaceOrTabOrNull(char)
+ {static} String manageEscapedTabs(String)
+ {static} long seed(String)
}
class net.sourceforge.plantuml.eggs.PSystemCharlieFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandActivate {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.svek.CircleInterface2 {
- double margin
- double radius
- HColor backgroundColor
- HColor foregroundColor
- double deltaShadow
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.UPolygon {
- List<Point2D.Double> all
- String name
- MinMax minmax
- CompressionMode compressionMode
+ Point2D checkMiddleContactForSpecificTriangle(Point2D)
+ void addPoint(double,double)
+ void addPoint(Point2D)
- void manageMinMax(double,double)
+ List<Point2D.Double> getPoints()
+ UPolygon translate(double,double)
+ void rotate(double)
+ String toString()
+ double getHeight()
+ double getWidth()
+ double getMinX()
+ double getMinY()
+ double getMaxX()
+ double getMaxY()
+ MinMax getMinMax()
+ double[] getPointArray(double,double)
+ CompressionMode getCompressionMode()
+ void setCompressionMode(CompressionMode)
}
interface net.sourceforge.plantuml.DefinitionsContainer {
+ List<String> getDefinition(String)
}
class net.sourceforge.plantuml.project.lang.SentenceLinksTo {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.salt.element.Skeleton {
- List<Entry> entries
+ void add(double,double)
+ void draw(UGraphic,double,double)
- void drawChild(UGraphic,Entry,Entry)
}
class net.sourceforge.plantuml.salt.element.Skeleton.Entry {
- double xpos
- double ypos
+ void drawRectangle(UGraphic)
}
interface net.sourceforge.plantuml.bpm.Placeable {
+ Dimension2D getDimension(StringBounder,ISkinParam)
+ TextBlock toTextBlock(ISkinParam)
+ String getId()
}
class net.sourceforge.plantuml.asciiart.BasicCharAreaImpl {
- int charSize1
- int charSize2
- int width
- int height
- char[][] chars
+ int getWidth()
+ int getHeight()
+ void drawChar(char,int,int)
- boolean isLong(char)
- void ensurePossible(int,int)
+ void drawStringLR(String,int,int)
+ void drawStringTB(String,int,int)
+ String getLine(int)
+ void print(PrintStream)
+ List<String> getLines()
+ void drawHLine(char,int,int,int)
+ void drawHLine(char,int,int,int,char,char)
+ void drawVLine(char,int,int,int)
+ String toString()
+ void fillRect(char,int,int,int,int)
}
class net.sourceforge.plantuml.creole.atom.AtomTree {
- HColor lineColor
- List<Atom> cells
- Map<Atom,Integer> levels
- double margin
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
- int getLevel(Atom)
+ void addCell(Atom,int)
}
class net.sourceforge.plantuml.timingdiagram.graphic.Ribbon {
- List<ChangeState> changes
- List<TimeConstraint> constraints
- ISkinParam skinParam
- TimingRuler ruler
- String initialState
- Colors initialColors
- List<TimingNote> notes
- boolean compact
- TextBlock title
- int suggestedHeight
+ IntricatedPoint getTimeProjection(StringBounder,TimeTick)
+ void addChange(ChangeState)
- double getPosInPixel(ChangeState)
- FontConfiguration getFontConfiguration()
- TextBlock createTextBlock(String)
+ TextBlock getPart1(double)
+ UDrawable getPart2()
- void drawNotes(UGraphic,Position)
- double getInitialWidth(StringBounder)
- void drawHexa(UGraphic,double,ChangeState)
- void drawFlat(UGraphic,double,ChangeState)
- double getRibbonHeight()
- void drawPentaB(UGraphic,double,ChangeState)
- void drawPentaA(UGraphic,double,ChangeState)
- double getHeightForConstraints(StringBounder)
- double getHeightForNotes(StringBounder,Position)
- double getMarginX()
+ void setInitialState(String,Colors)
+ void addConstraint(TimeConstraint)
+ double getFullHeight(StringBounder)
- double getBottomMargin()
- void drawPart2(UGraphic)
- void drawBeforeZeroState(UGraphic)
- void drawBeforeZeroStateLabel(UGraphic)
- void drawStates(UGraphic)
- void drawStatesLabels(UGraphic)
- TextBlock getCommentTopBlock(ChangeState)
- double getHeightForTopComment(StringBounder)
- void drawConstraints(UGraphic)
}
class net.sourceforge.plantuml.timingdiagram.TimeMessage {
- TickInPlayer tickInPlayer1
- TickInPlayer tickInPlayer2
- Display label
+ Player getPlayer1()
+ Player getPlayer2()
+ TimeTick getTick1()
+ TimeTick getTick2()
+ Display getLabel()
+ void goNorank()
}
class net.sourceforge.plantuml.preproc2.ReadFilterQuoteComment {
+ ReadLine applyFilter(ReadLine)
}
class net.sourceforge.plantuml.sequencediagram.teoz.EmptyTile {
- double height
- Tile position
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
+ Event getEvent()
}
interface net.sourceforge.plantuml.sequencediagram.graphic.Lazy {
+ double getNow()
}
class net.sourceforge.plantuml.project.lang.SentenceTaskEndsAbsolute {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.fun.IconLoader {
- {static} int NUMBER_OF_ICONS
- {static} Map<String,BufferedImage> all
- {static} List<String> tmp
+ {static} BufferedImage getRandom()
- {static} String getSomeQuote()
- {static} BufferedImage getIcon(String)
- {static} BufferedImage getIconSlow(String)
- {static} BufferedImage addTransparent(BufferedImage)
}
class net.sourceforge.plantuml.sequencediagram.teoz.Englobers {
- List<Englober> englobers
+ int size()
+ double getOffsetForEnglobers(StringBounder)
+ void addConstraints(StringBounder)
+ void drawEnglobers(UGraphic,double,Context2D)
+ Real getMinX(StringBounder)
+ Real getMaxX(StringBounder)
}
class net.sourceforge.plantuml.tim.stdlib.Upper {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.project.lang.PairOfSomething {
- Something complement1
- Something complement2
+ Failable<? extends Object> getMe(GanttDiagram,RegexResult,String)
+ IRegex toRegex(String)
}
class net.sourceforge.plantuml.compositediagram.command.CommandEndPackageBlock {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(CompositeDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.gitlog.Commit {
- String name
- String comment
- CursorPosition position
+ String getComment()
+ int hashCode()
+ boolean equals(Object)
+ String toString()
+ List<CursorPosition> getCandidatesForDown()
- {static} void addAbove(List<CursorPosition>,CursorPosition)
+ List<Commit> getAncestors()
+ String getName()
+ CursorPosition getPosition()
}
class net.sourceforge.plantuml.dedication.DedicationSimple {
- byte[] crypted
- String sentence
+ BufferedImage getImage(TinyHashableString)
- boolean same(String,String)
}
class net.sourceforge.plantuml.openiconic.SvgCommandNumber {
- String number
+ String toString()
+ SvgCommandNumber add(SvgCommandNumber)
+ String toSvg()
+ double getDouble()
}
class net.sourceforge.plantuml.ugraphic.UEmpty {
- double width
- double height
+ double getWidth()
+ double getHeight()
}
class net.sourceforge.plantuml.picoweb.PicoWebServerTest {
- {static} int port
+ {static} void main(String[])
- {static} void test_basic_http()
- {static} void test_GET_png()
- {static} void test_GET_svg()
- {static} void test_POST_render()
- {static} void test_unknown_path()
- {static} HttpURLConnection httpGet(String)
- {static} HttpURLConnection httpPost(String,String,byte[])
- {static} HttpURLConnection httpPostJson(String,String)
- {static} String httpRaw(String)
- {static} BufferedImage readStreamAsImage(InputStream)
- {static} String readStreamAsString(InputStream)
- {static} String renderRequestJson(String,String)
- {static} void startServer()
- {static} Socket socketConnection()
- {static} HttpURLConnection urlConnection(String)
}
class net.sourceforge.plantuml.wbs.WBSDiagram {
+ {static} Pattern2 patternStereotype
- WElement root
- WElement last
- String first
+ DiagramDescription getDescription()
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
- TextBlockBackcolored getTextBlock()
- void drawMe(UGraphic)
- TextBlock getDrawingElement()
+ CommandExecutionResult addIdea(HColor,int,String,Direction,IdeaShape)
- void initRoot(HColor,String,String,IdeaShape)
- WElement getParentOfLast(int)
+ int getSmartLevel(String)
- CommandExecutionResult add(HColor,int,String,String,Direction,IdeaShape)
}
class net.sourceforge.plantuml.ugraphic.UTranslate {
- double dx
- double dy
+ String toString()
+ {static} UTranslate none()
+ {static} UTranslate dx(double)
+ {static} UTranslate dy(double)
+ double getDx()
+ double getDy()
+ boolean isAlmostSame(UTranslate)
+ Point2D getTranslated(Point2D)
+ UTranslate scaled(double)
+ UTranslate compose(UTranslate)
+ UTranslate reverse()
+ Rectangle2D apply(Rectangle2D)
+ UTranslate multiplyBy(double)
+ UTranslate sym()
+ Point2D getPosition()
}
class net.sourceforge.plantuml.ClipboardLoop {
+ {static} void runLoop()
+ {static} void runOnce()
- boolean isTextOk(String)
- void runText(String)
- String getClipboardText()
- void setClipboardImage(BufferedImage)
}
class net.sourceforge.plantuml.argon2.exception.Argon2InvalidParameterException {
}
class net.sourceforge.plantuml.sequencediagram.graphic.ParticipantRange {
- int start
- int end
+ int start()
+ int end()
+ ParticipantRange merge(ParticipantRange)
}
class net.sourceforge.plantuml.project.lang.ComplementCompleted {
+ IRegex toRegex(String)
+ Failable<Completion> getMe(GanttDiagram,RegexResult,String)
}
interface net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack {
~ FrontierStack openBar()
~ FrontierStack restore()
~ FrontierStack closeBar()
}
interface net.sourceforge.plantuml.AFile {
+ InputStream openFile()
+ boolean isOk()
+ AParentFolder getParentFile()
+ SFile getUnderlyingFile()
+ SFile getSystemFolder()
}
class net.sourceforge.plantuml.SourceFileReaderHardFile {
# SuggestedFile getSuggestedFile(BlockUml)
}
class net.sourceforge.plantuml.project.lang.SentencePausesDates {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.activitydiagram.ConditionalContext {
- IEntity branch
- Direction direction
- ConditionalContext parent
+ Direction getDirection()
+ ConditionalContext getParent()
+ IEntity getBranch()
}
class net.sourceforge.plantuml.brotli.Dictionary {
- {static} ByteBuffer data
+ {static} void setData(ByteBuffer)
+ {static} ByteBuffer getData()
}
class net.sourceforge.plantuml.brotli.Dictionary.DataLoader {
~ {static} boolean OK
}
class net.sourceforge.plantuml.svek.ClusterDecoration {
- UStroke defaultStroke
- USymbol symbol
- TextBlock title
- TextBlock stereo
- double minX
- double minY
- double maxX
- double maxY
- {static} USymbol guess(USymbol,PackageStyle)
+ void drawU(UGraphic,HColor,HColor,double,double,HorizontalAlignment,HorizontalAlignment)
}
class net.sourceforge.plantuml.dedication.TurningBytes {
- byte[] key
- int idx
+ byte nextByte()
}
class net.sourceforge.plantuml.sequencediagram.graphic.DrawableSet {
- Map<Participant,LivingParticipantBox> participants
- Map<Event,GraphicalElement> events
- Map<Participant,ParticipantEnglober> participantEnglobers2
- List<Event> eventsList
- Rose skin
- ISkinParam skinParam
- Dimension2D dimension
- double topStartingY
- {static} int MARGIN_FOR_ENGLOBERS
- {static} int MARGIN_FOR_ENGLOBERS1
+ ParticipantBox getVeryfirst()
+ Rose getSkin()
+ ISkinParam getSkinParam()
+ Collection<Event> getAllEvents()
+ Set<Participant> getAllParticipants()
+ Collection<LivingParticipantBox> getAllLivingParticipantBox()
+ Collection<GraphicalElement> getAllGraphicalElements()
+ LivingParticipantBox getLivingParticipantBox(Participant)
+ GraphicalElement getEvent(Event)
+ double getHeadHeight(StringBounder)
+ double getHeadAndEngloberHeight(Participant,StringBounder)
+ List<Englober> getExistingParticipantEnglober(StringBounder)
+ double getOffsetForEnglobers(StringBounder)
+ double getTailHeight(StringBounder,boolean)
+ void addParticipant(Participant,ParticipantEnglober)
+ void setLivingParticipantBox(Participant,LivingParticipantBox)
+ void addEvent(Event,GraphicalElement)
+ void addEvent(Newpage,GraphicalNewpage,Event)
~ void setDimension(Dimension2D)
+ Dimension2D getDimension()
~ TextBlock asTextBlock(double,double,Page,boolean)
~ void drawU22(UGraphic,double,double,Page,boolean)
- UGraphic clipAndTranslate2(double,double,Page,UGraphic)
- UTranslate getTranslate4(double)
- void drawLineU22(UGraphic,boolean,Page)
- void drawHeadTailU(UGraphic,Page,double)
- double getMaxX()
- double getMaxY()
- void drawPlaygroundU(UGraphic,Context2D)
- void drawEnglobers(UGraphic,double,Context2D)
+ double getEngloberPreferedWidth(StringBounder,Englober)
- Component getEngloberComponent(Englober)
+ double getX1(Englober)
+ double getX2(StringBounder,Englober)
- void drawLifeLineU(UGraphic,Participant)
- Englober getParticipantEnglober(Participant,StringBounder)
+ void setTopStartingY(double)
~ Participant getFirst(Collection<Participant>)
~ Participant getLast(Collection<Participant>)
+ double getArrowThickness()
}
interface net.sourceforge.plantuml.svek.IShapePseudo {
~ String getUid()
~ void appendShape(StringBuilder,StringBounder)
~ double getMaxWidthFromLabelForEntryExit(StringBounder)
}
class net.sourceforge.plantuml.tim.expression.Token {
- String surface
- JsonValue json
- TokenType tokenType
+ String toString()
+ TokenOperator getTokenOperator()
+ String getSurface()
+ TokenType getTokenType()
+ Token muteToFunction()
+ JsonValue getJson()
}
class net.sourceforge.plantuml.project.Today {
}
interface net.sourceforge.plantuml.sequencediagram.teoz.Bordered {
+ double getBorder1()
+ double getBorder2()
}
class net.sourceforge.plantuml.graphic.TextBlockTitle {
- double outMargin
- TextBlock textBlock
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
+ MinMax getMinMax(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
}
class net.sourceforge.plantuml.AFileZipEntry {
- SFile zipFile
- String entry
+ String toString()
+ InputStream openFile()
+ boolean isOk()
+ int hashCode()
+ boolean equals(Object)
+ AParentFolder getParentFile()
+ SFile getUnderlyingFile()
+ SFile getSystemFolder()
}
class net.sourceforge.plantuml.eggs.PSystemCharlie {
- BufferedImage image
+ ImageBuilder createImageBuilder(FileFormatOption)
+ UDrawable getRootDrawable(FileFormatOption)
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.StdrptV2 {
+ void finalMessage()
+ void finalMessage(ErrorStatus)
+ void errorLine(int,File)
+ void printInfo(PrintStream,Diagram)
- void out(PrintStream,PSystemError)
- boolean empty(PSystemError)
}
class net.sourceforge.plantuml.ugraphic.UHorizontalLine {
- double skipAtStart
- double skipAtEnd
- TextBlock title
- boolean blankTitle
- char style
+ {static} UHorizontalLine infinite(double,double,char)
+ {static} UHorizontalLine infinite(double,double,TextBlock,char)
+ boolean isDouble()
+ void drawLineInternal(UGraphic,Stencil,double,UStroke)
- Stencil addSkip(Stencil)
- {static} Stencil firstHalf(Stencil,double)
- {static} Stencil secondHalf(Stencil,double)
- void drawHLine(Stencil,double,UGraphic)
- {static} void drawSimpleHline(UGraphic,Stencil,double)
+ void drawTitleInternal(UGraphic,double,double,double,boolean)
+ void drawMe(UGraphic)
+ UStroke getStroke()
}
class net.sourceforge.plantuml.creole.command.CommandCreoleStyle2 {
+ {static} Command createCreole(FontStyle)
+ {static} Command createLegacy(FontStyle)
+ {static} Command createLegacyEol(FontStyle)
+ String executeAndGetRemaining(String,StripeSimple)
+ int matchingSize(String)
}
class net.sourceforge.plantuml.jasic.Jasic {
- Map<String,Value> variables
- Map<String,Integer> labels
- BufferedReader lineIn
- int currentStatement
- {static} List<Token> tokenize(String)
+ void interpret(String)
}
class net.sourceforge.plantuml.jasic.Jasic.Token {
+ String text
+ TokenType type
}
class net.sourceforge.plantuml.jasic.Jasic.Parser {
- List<Token> tokens
- int position
+ List<Statement> parse(Map<String,Integer>)
- Expression expression()
- Expression operator()
- Expression atomic()
- boolean match(TokenType,TokenType)
- boolean match(TokenType)
- boolean match(String)
- Token consume(TokenType)
- Token consume(String)
- Token last(int)
- Token get(int)
}
interface net.sourceforge.plantuml.jasic.Jasic.Statement {
~ void execute()
}
interface net.sourceforge.plantuml.jasic.Jasic.Expression {
~ Value evaluate()
}
class net.sourceforge.plantuml.jasic.Jasic.PrintStatement {
- Expression expression
+ void execute()
}
class net.sourceforge.plantuml.jasic.Jasic.InputStatement {
- String name
+ void execute()
}
class net.sourceforge.plantuml.jasic.Jasic.AssignStatement {
- String name
- Expression value
+ void execute()
}
class net.sourceforge.plantuml.jasic.Jasic.GotoStatement {
- String label
+ void execute()
}
class net.sourceforge.plantuml.jasic.Jasic.IfThenStatement {
- Expression condition
- String label
+ void execute()
}
class net.sourceforge.plantuml.jasic.Jasic.VariableExpression {
- String name
+ Value evaluate()
}
class net.sourceforge.plantuml.jasic.Jasic.OperatorExpression {
- Expression left
- char operator
- Expression right
+ Value evaluate()
}
interface net.sourceforge.plantuml.jasic.Jasic.Value {
~ String toString()
~ double toNumber()
}
class net.sourceforge.plantuml.jasic.Jasic.NumberValue {
- double value
+ String toString()
+ double toNumber()
+ Value evaluate()
}
class net.sourceforge.plantuml.jasic.Jasic.StringValue {
- String value
+ String toString()
+ double toNumber()
+ Value evaluate()
}
class net.sourceforge.plantuml.salt.element.ElementTreeEntry {
- Element firstElement
- int level
- List<Element> otherElements
+ void addCell(Element)
+ Dimension2D getPreferredDimensionFirstCell(StringBounder)
+ ListWidth getPreferredDimensionOtherCell(StringBounder)
+ double getXDelta()
+ void drawFirstCell(UGraphic,double,double)
+ void drawSecondCell(UGraphic,double,double,ListWidth,double)
}
class net.sourceforge.plantuml.asciiart.ComponentTextGroupingElse {
- ComponentType type
- Display stringsToDisplay
- FileFormat fileFormat
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.eggs.PSystemEgg {
+ DiagramDescription getDescription()
}
interface net.sourceforge.plantuml.ugraphic.ClipContainer {
+ UClip getClip()
}
interface net.sourceforge.plantuml.posimo.Racorder {
+ DotPath getRacordIn(Rectangle2D,Line2D)
+ DotPath getRacordOut(Rectangle2D,Line2D)
}
class net.sourceforge.plantuml.syntax.SyntaxResult {
- UmlDiagramType umlDiagramType
- boolean isError
- String description
- Collection<String> errors
- boolean hasCmapData
- PSystemError systemError
- LineLocation lineLocation
+ UmlDiagramType getUmlDiagramType()
+ boolean isError()
+ String getDescription()
+ Collection<String> getErrors()
+ void setUmlDiagramType(UmlDiagramType)
+ void setError(boolean)
+ void setDescription(String)
+ void addErrorText(String)
+ boolean hasCmapData()
+ void setCmapData(boolean)
+ void setSystemError(PSystemError)
+ void generateDiagramDescriptionForError(OutputStream,FileFormatOption)
+ void setLineLocation(LineLocation)
+ LineLocation getLineLocation()
}
class net.sourceforge.plantuml.cucadiagram.entity.EntityFactory {
- Map<String,ILeaf> leafsByCode
- Map<String,IGroup> groupsByCode
~ Map<Ident,ILeaf> leafs2
~ Map<Ident,IGroup> groups2
- List<Link> links
- int rawLayout
- IGroup rootGroup
- SuperGroup rootSuperGroup
- List<HideOrShow2> hides2
- List<HideOrShow2> removed
+ CucaDiagram namespaceSeparator
- Map<IGroup,ILeaf> emptyGroupsAsNode
- Set<SuperGroup> superGroups
~ Map<IGroup,SuperGroup> groupToSuper
- Collection<Ident> hiddenBecauseOfIntrication
+ ILeaf getLeafForEmptyGroup(IGroup)
+ SuperGroup getRootSuperGroup()
+ Set<SuperGroup> getAllSuperGroups()
+ void buildSuperGroups()
+ ILeaf createLeafForEmptyGroup(IGroup,ISkinParam)
+ Display getIntricatedDisplay(Ident)
+ IGroup isIntricated(IGroup)
+ boolean isHidden(ILeaf)
+ boolean isRemoved(ILeaf)
+ void thisIsGoingToBeALeaf(Ident)
+ void thisIsNotArealGroup(Ident)
+ ILeaf createLeaf(Ident,Code,Display,LeafType,IGroup,Set<VisibilityModifier>,String)
+ IGroup createGroup(Ident,Code,Display,Code,GroupType,IGroup,Set<VisibilityModifier>,String)
+ void addLeaf(ILeaf)
+ void addGroup(IGroup)
- void ensureParentIsCreated(Ident)
~ void removeGroup(String)
~ void removeGroup(Ident)
+ {static} void bigError()
~ void removeLeaf(String)
~ void removeLeaf(Ident)
- void removeLeaf1972(ILeaf)
+ IGroup muteToGroup(String,Code,GroupType,IGroup)
+ IGroup muteToGroup1972(Ident,Code,GroupType,IGroup)
+ IGroup getRootGroup()
+ ILeaf getLeafStrict(Ident)
+ ILeaf getLeafSmart(Ident)
+ ILeaf getLeafVerySmart(Ident)
+ Ident buildFullyQualified(Ident,Ident)
+ IGroup getGroupStrict(Ident)
+ IGroup getGroupVerySmart(Ident)
+ ILeaf getLeaf(Code)
+ IGroup getGroup(Code)
+ Collection<ILeaf> leafs()
+ Collection<IGroup> groups()
+ Collection<IGroup> groups2()
+ Collection<ILeaf> leafs2()
+ void incRawLayout()
+ List<Link> getLinks()
+ void addLink(Link)
- boolean containsSimilarLink(Link)
+ void removeLink(Link)
+ IGroup getParentContainer(Ident,IGroup)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.Arrows {
- {static} double delta1
- {static} double delta2
+ {static} UPolygon asToUp()
+ {static} UPolygon asToDown()
+ {static} UPolygon asToRight()
+ {static} UPolygon asToLeft()
+ {static} UPolygon asTo(Direction)
}
class net.sourceforge.plantuml.command.CommandNamespace2 {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ClassDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.AParentFolder {
+ AFile getAFile(String)
}
class net.sourceforge.plantuml.bpm.Coord {
- Line line
- Col col
+ Col getCol()
+ String toString()
+ Line getLine()
+ int hashCode()
+ boolean equals(Object)
}
class net.sourceforge.plantuml.graphic.SvgAttributesChange {
~ {static} Pattern2 pattern
- SvgAttributes attributes
+ FontConfiguration apply(FontConfiguration)
}
class net.sourceforge.plantuml.command.regex.RegexOptional {
# String getFullSlow()
+ boolean match(StringLocated)
}
class net.sourceforge.plantuml.tim.TContext {
- List<StringLocated> resultList
- List<StringLocated> debug
+ FunctionsSet functionsSet
- ImportedFiles importedFiles
- String charset
- Map<String,Sub> subs
- DefinitionsContainer definitionsContainer
- Set<FileWithSuffix> filesUsedCurrent
- String pendingAdd
+ Set<FileWithSuffix> getFilesUsedCurrent()
- void addStandardFunctions(Defines)
+ Knowledge asKnowledge(TMemory,LineLocation)
- TValue fromJson(TMemory,String,LineLocation)
- CodeIterator buildCodeIterator(TMemory,List<StringLocated>)
+ TValue executeLines(TMemory,List<StringLocated>,TFunctionType,boolean)
- void executeLinesInternal(TMemory,List<StringLocated>,TFunctionType)
- TValue executeOneLineSafe(TMemory,StringLocated,TFunctionType,boolean)
- TValue executeOneLineNotSafe(TMemory,StringLocated,TFunctionType,boolean)
- void addPlain(TMemory,StringLocated)
- void simulatePlain(TMemory,StringLocated)
- void executeAffectationDefine(TMemory,StringLocated)
- void executeDumpMemory(TMemory,StringLocated)
- void executeAssert(TMemory,StringLocated)
- void executeUndef(TMemory,StringLocated)
- StringLocated[] applyFunctionsAndVariablesInternal(TMemory,StringLocated)
+ String applyFunctionsAndVariables(TMemory,LineLocation,String)
- void appendToLastResult(String)
- void executeVoid3(LineLocation,TMemory,String,TFunction,EaterFunctionCall)
- void executeImport(TMemory,StringLocated)
- void executeLog(TMemory,StringLocated)
+ FileWithSuffix getFileWithSuffix(String,String)
- void executeIncludesub(TMemory,StringLocated)
- void executeIncludeDef(TMemory,StringLocated)
- void executeTheme(TMemory,StringLocated)
- void executeInclude(TMemory,StringLocated)
+ boolean isLegacyDefine(String)
+ boolean isUnquoted(String)
+ boolean doesFunctionExist(String)
- String getFunctionNameAt(String,int)
+ List<StringLocated> getResultList()
+ List<StringLocated> getDebug()
+ String extractFromResultList(int)
+ void appendEndOfLine(String)
+ TFunction getFunctionSmart(TFunctionSignature)
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverUTextTikz {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
abstract class net.sourceforge.plantuml.ugraphic.color.HColorAbstract {
+ UBackground bg()
+ HColor lighten(int)
+ HColor darken(int)
+ HColor reverseHsluv()
+ HColor reverse()
+ boolean isDark()
+ String asString()
}
class net.sourceforge.plantuml.wbs.WElement {
- HColor backColor
- Display label
- int level
- String stereotype
- WElement parent
- StyleBuilder styleBuilder
- List<WElement> childrenLeft
- List<WElement> childrenRight
- IdeaShape shape
- StyleSignature getDefaultStyleDefinitionNode(int)
+ ISkinParam withBackColor(ISkinParam)
+ Style getStyle()
+ boolean isLeaf()
+ WElement createElement(HColor,int,Display,String,Direction,IdeaShape,StyleBuilder)
+ String toString()
+ int getLevel()
+ Display getLabel()
+ Collection<WElement> getChildren(Direction)
+ WElement getParent()
+ IdeaShape getShape()
+ StyleBuilder getStyleBuilder()
}
class net.sourceforge.plantuml.security.ImageIO {
+ {static} ImageOutputStream createImageOutputStream(OutputStream)
+ {static} void write(RenderedImage,String,OutputStream)
+ {static} void write(RenderedImage,String,java.io.File)
+ {static} void write(RenderedImage,String,SFile)
+ {static} BufferedImage read(java.io.File)
+ {static} BufferedImage read(SFile)
+ {static} BufferedImage read(InputStream)
+ {static} ImageInputStream createImageInputStream(java.io.File)
+ {static} ImageInputStream createImageInputStream(SFile)
+ {static} ImageInputStream createImageInputStream(Object)
+ {static} ImageInputStream createImageInputStream(InputStream)
+ {static} Iterator<ImageReader> getImageReaders(ImageInputStream)
+ {static} Iterator<ImageWriter> getImageWritersBySuffix(String)
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment {
- List<StringLocated> logs
+ StringLocated peek()
}
class net.sourceforge.plantuml.sequencediagram.LinkAnchor {
- String anchor1
- String anchor2
- String message
+ String toString()
+ String getAnchor1()
+ String getAnchor2()
+ String getMessage()
+ void drawAnchor(UGraphic,CommonTile,CommonTile,ISkinParam)
}
class net.sourceforge.plantuml.openiconic.OpenIcon {
- SvgPath svgPath
- List<String> rawData
- String id
+ {static} OpenIcon retrieve(String)
- {static} InputStream getResource(String)
~ void saveCopy(SFile)
- Dimension2D getDimension(double)
- String getNumber(String,String)
+ TextBlock asTextBlock(HColor,double)
}
class net.sourceforge.plantuml.project.Load {
- int winks
+ {static} Load inWinks(int)
+ int getFullLoad()
}
class net.sourceforge.plantuml.svek.InnerStateAutonom {
- IEntityImage im
- TextBlock title
- TextBlock attribute
- HColor borderColor
- HColor backColor
- boolean shadowing
- Url url
- boolean withSymbol
- UStroke stroke
+ void drawU(UGraphic)
- double getSpaceYforURL(StringBounder)
+ HColor getBackcolor()
+ Dimension2D calculateDimension(StringBounder)
+ ShapeType getShapeType()
+ Margins getShield(StringBounder)
+ boolean isHidden()
+ double getOverscanX(StringBounder)
}
class net.sourceforge.plantuml.svek.DotStringFactory {
- Bibliotekon bibliotekon
- Set<String> rankMin
- ColorSequence colorSequence
- Cluster root
- Cluster current
- UmlDiagramType umlDiagramType
- ISkinParam skinParam
- DotMode dotMode
- StringBounder stringBounder
- GraphvizVersion graphvizVersion
+ void addNode(SvekNode)
- void printMinRanking(StringBuilder)
- double getHorizontalDzeta()
- double getVerticalDzeta()
~ String createDotString(String)
- void manageMinMaxCluster(StringBuilder)
- int getMinRankSep()
- int getMinNodeSep()
+ GraphvizVersion getGraphvizVersion()
- GraphvizVersion getGraphvizVersionInternal()
+ String getSvg(BaseFile,String[])
+ boolean illegalDotExe()
+ File getDotExe()
+ void solve(boolean,EntityFactory,String)
- int getClusterIndex(String,int)
+ {static} String sharp000000(int)
+ void openCluster(int,int,TextBlock,TextBlock,IGroup)
+ void closeCluster()
+ void moveSvek(double,double)
+ Bibliotekon getBibliotekon()
+ ColorSequence getColorSequence()
}
class net.sourceforge.plantuml.timingdiagram.PlayerBinary {
- List<TimeConstraint> constraints
- SortedMap<TimeTick,Boolean> values
- Boolean initialState
- double ymargin
- double getHeightForConstraints(StringBounder)
+ double getFullHeight(StringBounder)
+ void drawFrameTitle(UGraphic)
- SymbolContext getContext()
+ IntricatedPoint getTimeProjection(StringBounder,TimeTick)
+ void addNote(TimeTick,Display,Position)
+ void defineState(String,String)
+ void setState(TimeTick,String,Colors,String)
- boolean getState(String)
+ void createConstraint(TimeTick,TimeTick,String)
- double getYpos(StringBounder,boolean)
- double getYlow(StringBounder)
- double getYhigh(StringBounder)
+ TextBlock getPart1(double,double)
+ UDrawable getPart2()
- void drawConstraints(UGraphic)
}
class net.sourceforge.plantuml.nwdiag.CommandNetwork {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(NwDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ActivityDiagram3 {
- SwimlaneStrategy swimlaneStrategy
- Swimlanes swinlanes
- boolean hasUrl
- void manageSwimlaneStrategy()
+ CommandExecutionResult swimlane(String,HColor,Display)
- void setCurrent(Instruction)
- Instruction current()
- LinkRendering nextLinkRenderer()
+ void addActivity(Display,BoxStyle,Url,Colors,Stereotype)
+ void addSpot(String,HColor)
+ CommandExecutionResult addGoto(String)
+ CommandExecutionResult addLabel(String)
+ void start()
+ void stop()
+ void end()
- boolean manageSpecialStopEndAfterEndWhile(Instruction)
+ void breakInstruction()
+ DiagramDescription getDescription()
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
+ void fork()
+ CommandExecutionResult forkAgain()
+ CommandExecutionResult endFork(ForkStyle,String)
+ void split()
+ CommandExecutionResult splitAgain()
+ CommandExecutionResult endSplit()
+ void startSwitch(Display,HColor)
+ CommandExecutionResult switchCase(Display)
+ CommandExecutionResult endSwitch()
+ void startIf(Display,Display,HColor,Url)
+ CommandExecutionResult elseIf(LinkRendering,Display,LinkRendering,HColor)
+ CommandExecutionResult else2(LinkRendering)
+ CommandExecutionResult endif()
+ void startRepeat(HColor,Display,BoxStyle,Colors)
+ CommandExecutionResult repeatWhile(Display,Display,Display,Display,Rainbow)
+ CommandExecutionResult backward(Display,BoxStyle,LinkRendering,LinkRendering)
+ void doWhile(Display,Display,HColor)
+ CommandExecutionResult endwhile(Display)
+ CommandExecutionResult kill()
+ void startGroup(Display,HColor,HColor,HColor,USymbol,double)
+ CommandExecutionResult endGroup()
- void setNextLinkRendererInternal(LinkRendering)
- void setNextLink(LinkRendering)
+ void setLabelNextArrow(Display)
+ void setColorNextArrow(Rainbow)
+ CommandExecutionResult addNote(Display,NotePosition,NoteType,Colors)
- void manageHasUrl(Display)
+ boolean hasUrl()
}
class net.sourceforge.plantuml.zopfli.Zopfli {
- Cookie cookie
+ Buffer compress(Options,byte[])
- {static} int adler32(byte[])
- void compressZlib(Options,byte[],Buffer)
- void compressGzip(Options,byte[],Buffer)
}
class net.sourceforge.plantuml.zopfli.Zopfli.Crc {
- {static} int[] table
- {static} int[] makeTable()
+ {static} int calculate(byte[])
}
class net.sourceforge.plantuml.bpm.Line {
}
class net.sourceforge.plantuml.mindmap.CommandMindMapDirection {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(MindMapDiagram,LineLocation,RegexResult)
}
abstract class net.sourceforge.plantuml.svek.image.EntityImageStateCommon {
# TextBlock desc
# Url url
# LineConfigurable lineConfig
# UStroke getStroke()
+ ShapeType getShapeType()
# URectangle getShape(Dimension2D)
# UGraphic applyColor(UGraphic)
}
class net.sourceforge.plantuml.wire.CommandNewColumn {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(WireDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.svek.Untranslated {
+ void drawUntranslated(UGraphic,double,double)
}
class net.sourceforge.plantuml.sudoku.dlx_solver {
~ {static} int M
~ {static} int M2
~ {static} int M4
~ int[][] A0
~ int[][] Col
~ int[] C
~ int[] Mr
~ int[] Mc
~ int[] Mw
~ int nocheck
~ int rnd
~ int min
~ long[] Node
~ long nodes
~ double xx
~ int q
~ char[] L
~ {static} int M6
~ {static} int M7
~ {static} int RESTART
~ {static} int M22
~ {static} int M3
~ {static} int M44
~ {static} int NEXT_TRY
~ {static} int END
- Random random
~ long MWC()
~ String solve(String)
~ int shuffle()
}
class net.sourceforge.plantuml.sudoku.dlx_generator {
~ int[] Rows
~ int[] P
~ char[] B
~ char[][] H
~ long c2
~ int b
~ int mi1
~ char[] L
~ {static} int M0S
~ {static} int M0
~ {static} int MR1
~ {static} int MR3
~ {static} int MR4
~ {static} int M2
~ {static} int M3
~ {static} int M4
~ {static} int M9
~ {static} int MR
~ {static} int END
~ {static} int M6
~ boolean DBG
- Random random
~ long MWC()
~ void dbg(String)
~ void initialize()
+ long rate(String)
+ String[] generate(int,int)
~ int solve()
}
class net.sourceforge.plantuml.sudoku.DLXEngine {
~ dlx_generator generator
~ dlx_solver solver
~ String generate(int,int)
~ long rate(String)
~ String solve(String)
}
class net.sourceforge.plantuml.compositediagram.command.CommandLinkBlock {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(CompositeDiagram,LineLocation,RegexResult)
- LinkDecor getLinkDecor(String)
}
class net.sourceforge.plantuml.BasicEnsureVisible {
- double minX
- double maxX
- double minY
- double maxY
+ void ensureVisible(double,double)
+ boolean hasData()
+ String getCoords(double)
+ double getSurface()
}
class net.sourceforge.plantuml.real.RealMin {
- List<Real> all
+ String getName()
~ double getCurrentValueInternal()
+ Real addFixed(double)
+ Real addAtLeast(double)
+ void ensureBiggerThan(Real)
+ int size()
+ void printCreationStackTrace()
}
abstract class net.sourceforge.plantuml.sequencediagram.graphic.Arrow {
- Rose skin
- ArrowComponent arrowComponent
- double paddingArrowHead
- double maxX
- Url url
+ void setMaxX(double)
# double getMaxX()
+ {abstract}double getActualWidth(StringBounder)
# Url getUrl()
# void startUrl(UGraphic)
# void endUrl(UGraphic)
+ {abstract}int getDirection(StringBounder)
# Rose getSkin()
# ArrowComponent getArrowComponent()
+ double getArrowOnlyWidth(StringBounder)
+ {abstract}double getArrowYStartLevel(StringBounder)
+ {abstract}double getArrowYEndLevel(StringBounder)
+ {abstract}LivingParticipantBox getParticipantAt(StringBounder,NotePosition)
# double getPaddingArrowHead()
# void setPaddingArrowHead(double)
+ double getMargin()
}
interface net.sourceforge.plantuml.code.Compression {
~ byte[] compress(byte[])
~ ByteArray decompress(byte[])
}
class net.sourceforge.plantuml.ugraphic.hand.ULineHand {
- UPath path
+ UPath getHanddrawn()
}
class net.sourceforge.plantuml.salt.element.WrappedElement {
- Element wrapped
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleCross {
- HColor backgroundColor
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
abstract class net.sourceforge.plantuml.wbs.WBSTextBlock {
# ISkinParam skinParam
- StyleBuilder styleBuilder
- int level
# void drawLine(UGraphic,Point2D,Point2D)
- Style getStyleUsed()
# void drawLine(UGraphic,double,double,double,double)
+ StyleSignature getDefaultStyleDefinitionArrow()
# TextBlock buildMain(WElement)
}
class net.sourceforge.plantuml.sequencediagram.teoz.LiveBoxes {
- Rose skin
- ISkinParam skinParam
- Map<Double,Double> delays
- Participant p
- List<Event> events
- Map<Event,Double> eventsStep
+ void addStep(Event,double)
+ Participant getParticipant()
+ int getLevelAt(Event,EventsHistoryMode)
- int getLevelAtInternal(Event,EventsHistoryMode)
- boolean isNextEventADestroy(Event)
- SymbolContext getActivateColor(Event)
- Event nextButSkippingNotes(Iterator<Event>)
+ Stairs getStairs(double,double)
- boolean isActivateAnDeactivate(Event)
+ int getMaxValue()
+ double getMaxPosition(StringBounder)
+ void drawBoxes(UGraphic,Context2D,double,double)
- void drawDestroys(UGraphic,Stairs,Context2D)
- void drawOneLevel(UGraphic,int,Stairs,Context2D)
+ void delayOn(double,double)
}
class net.sourceforge.plantuml.classdiagram.command.CommandHideShowSpecificClass {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(CucaDiagram,LineLocation,RegexResult)
}
abstract class net.sourceforge.plantuml.graphic.StringBounderRaw {
+ Dimension2D calculateDimension(UFont,String)
# {abstract}Dimension2D calculateDimensionInternal(UFont,String)
+ double getDescent(UFont,String)
}
class net.sourceforge.plantuml.ugraphic.URectangle {
- double width
- double height
- double rx
- double ry
- String comment
- String codeLine
- boolean ignoreForCompressionOnX
- boolean ignoreForCompressionOnY
+ URectangle withHeight(double)
+ URectangle withWidth(double)
+ URectangle withCommentAndCodeLine(String,String)
+ URectangle rounded(double)
+ Shadowable diagonalCorner(double)
+ URectangle ignoreForCompressionOnX()
+ URectangle ignoreForCompressionOnY()
+ UShape getScaled(double)
+ String toString()
+ double getWidth()
+ double getHeight()
+ double getRx()
+ double getRy()
+ URectangle clip(UClip)
+ MinMax getMinMax()
+ String getComment()
+ String getCodeLine()
+ void drawWhenCompressed(UGraphic,CompressionMode)
+ boolean isIgnoreForCompressionOn(CompressionMode)
}
class net.sourceforge.plantuml.activitydiagram.command.CommandLinkLongActivity {
+ String getPatternEnd()
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeNow(ActivityDiagram,BlocLines)
+ Url extractUrl(ActivityDiagram,StringLocated)
+ Url extractUrlString(ActivityDiagram,String)
}
class net.sourceforge.plantuml.security.SecurityUtils {
- {static} SecurityProfile current
+ {static} SecurityProfile getSecurityProfile()
+ {static} boolean getJavascriptUnsecure()
+ {static} String getenv(String)
+ {static} List<SFile> getPath(String)
+ {static} boolean allowSvgText()
+ {static} java.io.PrintWriter createPrintWriter(OutputStream)
+ {static} java.io.PrintWriter createPrintWriter(OutputStream,boolean)
+ {static} PrintStream createPrintStream(OutputStream)
+ {static} PrintStream createPrintStream(OutputStream,boolean,String)
+ {static} BufferedImage readRasterImage(ImageIcon)
+ {static} FileReader createFileReader(String)
+ {static} java.io.PrintWriter createPrintWriter(String)
+ {static} FileOutputStream createFileOutputStream(String)
}
class net.sourceforge.plantuml.graphic.SimpleTextBlockBordered {
- TextBlock textBlock
- HColor color
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.svek.image.EntityImageDeepHistory {
}
class net.sourceforge.plantuml.syntax.SyntaxChecker {
+ {static} SyntaxResult checkSyntax(List<String>)
+ {static} SyntaxResult checkSyntax(String)
+ {static} SyntaxResult checkSyntaxFair(String)
- {static} int lastLineNumber(String)
- {static} LineLocation lastLineNumber2(String)
}
class net.sourceforge.plantuml.ugraphic.TextLimitFinder {
- StringBounder stringBounder
- UTranslate translate
- MinMaxMutable minmax
+ boolean matchesProperty(String)
+ double dpiFactor()
+ UGraphic apply(UChange)
+ StringBounder getStringBounder()
+ UParam getParam()
+ void draw(UShape)
+ ColorMapper getColorMapper()
- void drawText(double,double,UText)
+ double getMaxX()
+ double getMaxY()
+ double getMinX()
+ double getMinY()
+ void flushUg()
}
class net.sourceforge.plantuml.graphic.USymbolEntityDomain {
+ SkinParameter getSkinParameter()
# TextBlock getDrawing(SymbolContext)
}
class net.sourceforge.plantuml.svek.ArithmeticStrategySum {
- double sum
+ void eat(double)
+ double getResult()
}
abstract class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileDimensionMemoize {
- FtileGeometry calculateDimensionInternal
# FtileGeometry calculateDimensionInternal(StringBounder)
# {abstract}FtileGeometry calculateDimensionInternalSlow(StringBounder)
}
class net.sourceforge.plantuml.brotli.Context {
~ {static} int[] LOOKUP
- {static} String UTF_MAP
- {static} String UTF_RLE
- {static} void unpackLookupTable(int[],String,String)
}
class net.sourceforge.plantuml.bpm.Grid {
- Chain<Line> lines
- Chain<Col> cols
- Coord root
- Map<Coord,Cell> cells
+ Grid cloneMe()
+ Cell getCell(Coord)
+ Cell getCell(Line,Col)
+ Coord getById(String)
+ Coord getRoot()
+ Chain<Line> lines()
+ Chain<Col> cols()
+ Coord getCoord(Cell)
- Coord getCoord(Placeable)
+ Navigator<Line> linesOf(Coord)
+ Navigator<Col> colsOf(Coord)
+ Navigator<Line> linesOf(Cell)
+ Navigator<Col> colsOf(Cell)
+ GridArray toArray(ISkinParam)
+ Set<Col> usedColsOf(Line)
+ void removeLine(Line)
+ void addConnections()
- void drawStartVertical(Coord,Coord)
- void drawStartHorizontal(Coord,Coord)
- void addPuzzle(Line,Col,String)
}
class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft {
- Tile tile
- AbstractMessage message
- Rose skin
- ISkinParam skinParam
- LivingSpace livingSpace
- Note noteOnMessage
+ Event getEvent()
+ double getContactPointRelative()
# void callbackY_internal(double)
- Component getComponent(StringBounder)
- Real getNotePosition(StringBounder)
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.graphic.UDrawableUtils {
+ {static} UDrawable move(UDrawable,double,double)
}
class net.sourceforge.plantuml.ugraphic.comp.Expand {
- double position
- double extend
- ExpandType type
+ String toString()
+ int compareTo(Expand)
+ double getPosition()
+ double getExtend()
+ ExpandType getType()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileMargedVertically {
- double margin1
- double margin2
- FtileGeometry cached
+ void drawU(UGraphic)
+ FtileGeometry calculateDimension(StringBounder)
- FtileGeometry calculateDimensionSlow(StringBounder)
}
class net.sourceforge.plantuml.svek.EmptySvgException {
}
class net.sourceforge.plantuml.sequencediagram.InGroupableList {
- {static} int MARGIN5
+ {static} int MARGIN10
- Grouping grouping
- Set<InGroupable> inGroupables
- double minWidth
- ParticipantBox veryfirst
- InGroupable cacheMin
- InGroupable cacheMax
- double hack2
+ List<InGroupableList> getInnerList()
+ void addInGroupable(InGroupable)
+ boolean isEmpty()
+ String toString()
+ String toString(StringBounder)
- InGroupable getMinSlow(StringBounder)
- InGroupable getMaxSlow(StringBounder)
- InGroupable getMin(StringBounder)
- InGroupable getMax(StringBounder)
+ void setMinWidth(double)
+ ParticipantBox getFirstParticipantBox()
+ ParticipantBox getLastParticipantBox()
+ double getMinX(StringBounder)
+ double getMaxX(StringBounder)
- double getMaxXInternal(StringBounder)
+ void changeHack2(double)
+ double getHack2()
}
class net.sourceforge.plantuml.objectdiagram.command.CommandAddData {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractClassOrObjectDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.zopfli.Deflate {
- {static} void getFixedTree(int[],int[])
+ {static} void greedy(Cookie,LongestMatchCache,byte[],int,int,LzStore)
~ {static} void findLongestMatch(Cookie,LongestMatchCache,int,Hash,byte[],int,int,int,char[])
- {static} void deflatePart(Cookie,Options,byte[],int,int,boolean,Buffer)
- {static} void deflateDynamicBlock(Cookie,Options,boolean,byte[],int,int,Buffer)
- {static} void deflateSplittingLast(Cookie,Options,boolean,byte[],int,int,Buffer)
- {static} void deflateSplittingFirst(Cookie,Options,boolean,byte[],int,int,Buffer)
~ {static} int calculateBlockSize(Cookie,char[],char[],int,int)
- {static} int calculateFixedBlockSize(Cookie,char[],char[],int)
- {static} void lzCounts(char[],char[],int,int,int[],int[])
~ {static} void compress(Cookie,Options,byte[],Buffer)
- {static} void patchDistanceCodesForBuggyDecoders(int[])
- {static} void addDynamicTree(Cookie,int[],int[],Buffer)
- {static} void encodeTree(Cookie,int[],int[],boolean,boolean,boolean,Buffer)
- {static} int simulateAddDynamicTree(Cookie,int[],int[])
- {static} int simulateEncodeTree(Cookie,int[],int[],boolean,boolean,boolean)
- {static} void addLzBlock(Cookie,BlockType,boolean,char[],char[],int,int,Buffer)
- {static} void addLzData(char[],char[],int,int,int[],int[],int[],int[],Buffer)
- {static} void lengthsToSymbols(int[],int,int,int[],int[],int[])
- {static} void optimizeHuffmanForRle(Cookie,int[])
}
class net.sourceforge.plantuml.classdiagram.command.CommandUrl {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractEntityDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.version.PLSSignature {
- int type
- byte[] sha
- long now
- long exp
- String owner
- String context
- LicenseInfo toLicenseInfo()
+ {static} byte[] retrieveDistributorImageSignature()
+ {static} PLSSignature fromRaw512(byte[])
- {static} byte[] readBytes(ByteArrayInputStream,int)
- {static} String readString(ByteArrayInputStream)
- {static} long readLong(ByteArrayInputStream)
+ {static} LicenseInfo retrieveNamed(String,String,boolean)
+ {static} LicenseInfo retrieveDistributor(String)
- {static} byte[] decode(String)
- {static} void xor(byte[],TurningBytes)
+ {static} void xor(byte[],byte[])
+ {static} byte[] getSalt(String)
- {static} long getSeed(byte[])
+ {static} byte[] signature()
- {static} String getMacAddress()
}
class net.sourceforge.plantuml.command.CommandMultilinesHeader {
+ String getPatternEnd()
+ CommandExecutionResult execute(TitledDiagram,BlocLines)
}
class net.sourceforge.plantuml.bpm.CommandElseBranch {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(BpmDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.command.CommandDecoratorMultine {
- SingleLineCommand2<D> cmd
- boolean removeEmptyColumn
- int nbMaxLines
+ CommandExecutionResult execute(D,BlocLines)
+ CommandControl isValid(BlocLines)
+ String[] getDescription()
+ int getNbMaxLines()
}
class net.sourceforge.plantuml.brotli.State {
~ byte[] ringBuffer
~ byte[] contextModes
~ byte[] contextMap
~ byte[] distContextMap
~ byte[] output
~ byte[] byteBuffer
~ short[] shortBuffer
~ int[] intBuffer
~ int[] rings
~ int[] blockTrees
~ int[] hGroup0
~ int[] hGroup1
~ int[] hGroup2
~ long accumulator64
~ int runningState
~ int nextRunningState
~ int accumulator32
~ int bitOffset
~ int halfOffset
~ int tailBytes
~ int endOfStreamReached
~ int metaBlockLength
~ int inputEnd
~ int isUncompressed
~ int isMetadata
~ int literalBlockLength
~ int numLiteralBlockTypes
~ int commandBlockLength
~ int numCommandBlockTypes
~ int distanceBlockLength
~ int numDistanceBlockTypes
~ int pos
~ int maxDistance
~ int distRbIdx
~ int trivialLiteralContext
~ int literalTreeIndex
~ int literalTree
~ int j
~ int insertLength
~ int contextMapSlice
~ int distContextMapSlice
~ int contextLookupOffset1
~ int contextLookupOffset2
~ int treeCommandOffset
~ int distanceCode
~ int numDirectDistanceCodes
~ int distancePostfixMask
~ int distancePostfixBits
~ int distance
~ int copyLength
~ int copyDst
~ int maxBackwardDistance
~ int maxRingBufferSize
~ int ringBufferSize
~ int expectedTotalSize
~ int outputOffset
~ int outputLength
~ int outputUsed
~ int bytesWritten
~ int bytesToWrite
~ InputStream input
}
class net.sourceforge.plantuml.sequencediagram.graphic.PageSplitter {
- double fullHeight
- List<Double> positions
- List<Display> titles
- double headerHeight
- double tailHeight
- double signatureHeight
- double newpageHeight
- Display diagramTitle
+ List<Page> getPages()
- Page lastPage()
- Page firstPage()
- Page onePage()
- Page createPage(int)
}
class net.sourceforge.plantuml.ugraphic.MinMax {
- double maxX
- double maxY
- double minX
- double minY
+ boolean doesHorizontalCross(Point2D.Double,Point2D.Double)
+ {static} MinMax getEmpty(boolean)
+ String toString()
+ {static} MinMax fromMutable(MinMaxMutable)
+ MinMax addPoint(Point2D)
+ MinMax addPoint(double,double)
+ MinMax addMinMax(MinMax)
+ {static} MinMax fromMax(double,double)
+ {static} MinMax fromDim(Dimension2D)
+ double getMaxX()
+ double getMaxY()
+ double getMinX()
+ double getMinY()
+ double getHeight()
+ double getWidth()
+ Dimension2D getDimension()
+ void drawGrey(UGraphic)
+ void draw(UGraphic,HColor)
+ MinMax translate(UTranslate)
}
class net.sourceforge.plantuml.salt.PSystemSalt {
- List<String> data
- Dictionary dictionary
- boolean iamSalt
+ void add(String)
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
- TextBlockBackcolored getTextBlock(Element,Dimension2D)
+ DiagramDescription getDescription()
+ void addSprite(String,Sprite)
- List<String> manageSprite()
- Element createElement(List<String>)
- {static} void addSimpleFactory(AbstractElementFactoryComplex,DataSource,Dictionary)
+ void setIamSalt(boolean)
+ boolean isIamSalt()
+ ClockwiseTopRightBottomLeft getDefaultMargins()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityStateLine2 {
- UPolygon polygon
- Point2D dest
- double radius
- double angle
+ Point2D somePoint()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.project.lang.SentenceIsForTask {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
interface net.sourceforge.plantuml.salt.factory.ElementFactory {
~ Terminated<Element> create()
~ boolean ready()
}
class net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA4 {
~ {static} IRegex getRegexConcat()
}
class net.sourceforge.plantuml.classdiagram.command.CommandAllowMixing {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ClassDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.math.PSystemMath {
- String math
- float scale
- Color color
- Color backColor
+ DiagramDescription getDescription()
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
+ void doCommandLine(String)
- Color getColor(String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleStop {
- {static} int SIZE
- HColor borderColor
- HColor backColor
- Swimlane swimlane
- double shadowing
+ Collection<Ftile> getMyChildren()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
}
class net.sourceforge.plantuml.svek.SvekLine {
- {static} Dimension2DDouble CONSTRAINT_SPOT
- Cluster ltail
- Cluster lhead
- Link link
- EntityPort startUid
- EntityPort endUid
- TextBlock startTailText
- TextBlock endHeadText
- TextBlock labelText
- boolean divideLabelWidthByTwo
- int lineColor
- int noteLabelColor
- int startTailColor
- int endHeadColor
- StringBounder stringBounder
- Bibliotekon bibliotekon
- DotPath dotPath
- Positionable startTailLabelXY
- Positionable endHeadLabelXY
- Positionable labelXY
- UDrawable extremity2
- UDrawable extremity1
- double dx
- double dy
- boolean opale
- Cluster projectionCluster
- Pragma pragma
- HColor backgroundColor
- boolean useRankSame
- UStroke defaultThickness
- HColor arrowLollipopColor
- ISkinParam skinParam
- double labelShield
+ String toString()
+ Direction getArrowDirection()
- Direction getArrowDirectionInternal()
+ double getArrowDirection2()
- double getArrowDirectionInternal2()
- Cluster getCluster2(Bibliotekon,IEntity)
- TextBlock addVisibilityModifier(TextBlock,Link,ISkinParam)
- HorizontalAlignment getMessageTextAlignment(UmlDiagramType,ISkinParam)
+ boolean hasNoteLabelText()
- LinkArrow getLinkArrow()
+ void appendLine(GraphvizVersion,StringBuilder,DotMode)
- Dimension2D eventuallyDivideByTwo(Dimension2D)
+ String rankSame()
+ {static} void appendTable(StringBuilder,Dimension2D,int,GraphvizVersion)
+ {static} void appendTable(StringBuilder,int,int,int)
+ String getStartUidPrefix()
+ String getEndUidPrefix()
- UDrawable getExtremity(LinkDecor,PointListIterator,Point2D,double,Cluster,SvekNode)
+ void solveLine(SvgResult)
- boolean isOpalisable()
- Point2D.Double getXY(SvgResult,int)
+ void drawU(UGraphic,UStroke,HColor,Set<String>)
- List<Point2D> getSquare(double,double)
- String uniq(Set<String>,String)
- void drawRainbow(UGraphic,HColor,DotPath,List<Colors>,UStroke)
+ boolean isInverted()
- double getDecorDzeta()
+ double getHorizontalDzeta(StringBounder)
- boolean isHorizontal()
+ double getVerticalDzeta(StringBounder)
+ void manageCollision(Collection<SvekNode>)
- void avoid(Point2D.Double,Positionable,SvekNode)
- boolean cut(Positionable,SvekNode)
- boolean tooClose(Positionable)
+ void moveSvek(double,double)
+ DotPath getDotPath()
+ int getLength()
+ void setOpale(boolean)
+ boolean isOpale()
+ boolean isHorizontalSolitary()
+ boolean isLinkFromOrTo(IEntity)
+ boolean hasEntryPoint()
+ void setProjectionCluster(Cluster)
+ boolean isHidden()
+ boolean sameConnections(SvekLine)
- boolean isAutolink()
+ Point2D getMyPoint(IEntity)
- Point2D moveDelta(Point2D)
+ boolean isLink(Link)
+ Point2D getStartContactPoint()
+ Point2D getEndContactPoint()
+ IEntity getOther(IEntity)
+ StyleBuilder getCurrentStyleBuilder()
+ Stereotype getStereotype()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane {
- String name
- Display display
- UTranslate translate
- double actualWidth
- Colors colors
- MinMax minMax
+ String toString()
+ String getName()
+ Display getDisplay()
+ void setDisplay(Display)
+ UTranslate getTranslate()
+ void setTranslate(UTranslate)
+ void setWidth(double)
+ Colors getColors(ISkinParam)
+ void setSpecificColorTOBEREMOVED(ColorType,HColor)
+ double getActualWidth()
+ void setColors(Colors)
+ void setMinMax(MinMax)
+ MinMax getMinMax()
}
interface net.sourceforge.plantuml.svek.extremity.ExtremityFactory {
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
+ UDrawable createUDrawable(Point2D,double,Side)
}
class net.sourceforge.plantuml.png.PngRotation {
+ {static} BufferedImage process(BufferedImage)
}
interface net.sourceforge.plantuml.graphic.Line {
~ HorizontalAlignment getHorizontalAlignment()
}
abstract class net.sourceforge.plantuml.timingdiagram.Player {
# ISkinParam skinParam
# TimingRuler ruler
- boolean compact
- Display title
# int suggestedHeight
+ boolean isCompact()
# FontConfiguration getFontConfiguration()
# TextBlock getTitle()
+ {abstract}void addNote(TimeTick,Display,Position)
+ {abstract}void defineState(String,String)
+ {abstract}void setState(TimeTick,String,Colors,String)
+ {abstract}void createConstraint(TimeTick,TimeTick,String)
+ {abstract}TextBlock getPart1(double,double)
+ {abstract}UDrawable getPart2()
+ {abstract}double getFullHeight(StringBounder)
+ void setHeight(int)
}
class net.sourceforge.plantuml.logo.PSystemLogo {
- List<String> lines
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
+ DiagramDescription getDescription()
+ void doCommandLine(String)
}
class net.sourceforge.plantuml.posimo.Path {
- Label label
- Block start
- Block end
- int length
- DotPath dotPath
- boolean invis
+ Label getLabel()
+ Block getStart()
+ Block getEnd()
+ void setLabelPositionCenter(double,double)
+ void setLabelPosition(double,double)
+ void setDotPath(DotPath)
+ DotPath getDotPath()
+ int getLength()
+ boolean isInvis()
}
class net.sourceforge.plantuml.command.CommandNope {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(Diagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.oregon.NoInputException {
}
class net.sourceforge.plantuml.descdiagram.command.CommandCreateElementMultilines {
- int type
+ String getPatternEnd()
- {static} RegexConcat getRegexConcat(int)
# CommandExecutionResult executeNow(AbstractEntityDiagram,BlocLines)
- {static} ColorParser color()
}
class net.sourceforge.plantuml.asciiart.ComponentTextNewpage {
- FileFormat fileFormat
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.PositionedNote {
- Display display
- NotePosition notePosition
- NoteType type
- Colors colors
- Swimlane swimlaneNote
+ String toString()
+ Display getDisplay()
+ NotePosition getNotePosition()
+ NoteType getType()
+ Colors getColors()
+ Swimlane getSwimlaneNote()
}
class net.sourceforge.plantuml.svek.image.EntityImageGroup {
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.activitydiagram.command.CommandIf {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity {
+ Color toColor(HColor)
}
class net.sourceforge.plantuml.command.note.CommandFactoryNoteOnEntity {
- IRegex partialPattern
- String key
- IRegex getRegexConcatSingleLine(IRegex)
- {static} ColorParser color()
- IRegex getRegexConcatMultiLine(IRegex,boolean)
+ Command<AbstractEntityDiagram> createSingleLine()
+ Command<AbstractEntityDiagram> createMultiLine(boolean)
- CommandExecutionResult executeInternal(RegexResult,AbstractEntityDiagram,Url,BlocLines)
}
class net.sourceforge.plantuml.command.regex.RegexPartialMatch {
- List<String> data
+ void add(String)
+ int size()
+ String get(int)
+ Iterator<String> iterator()
+ String toString()
}
abstract class net.sourceforge.plantuml.project.core.AbstractTask {
- TaskCode code
- StyleBuilder styleBuilder
- Task row
+ void putInSameRowAs(Task)
+ Task getRow()
+ TaskCode getCode()
+ StyleBuilder getStyleBuilder()
}
class net.sourceforge.plantuml.nwdiag.NwGroup {
+ {static} HColorSet colors
- String name
- Network network
- Set<String> elements
- HColor color
- String description
+ String toString()
+ int size()
+ String getName()
+ void addElement(String)
+ boolean matches(LinkedElement)
+ HColor getColor()
+ void setColor(HColor)
+ void setDescription(String)
+ void drawGroup(UGraphic,MinMax,ISkinParam)
- FontConfiguration getGroupDescriptionFontConfiguration()
+ Network getNetwork()
}
class net.sourceforge.plantuml.cucadiagram.Ident {
- List<String> parts
+ String toString()
+ boolean startsWith(Ident)
+ String forXmi()
+ Ident add(Ident)
+ {static} Ident empty()
+ String getLast()
+ Code toCode(CucaDiagram)
+ Ident eventuallyRemoveStartingAndEndingDoubleQuote(String)
+ Ident removeStartingParenthesis()
+ Ident addSuffix(String)
+ Ident removeMemberPart()
+ String getPortMember()
- {static} Ident from(String,String)
- {static} boolean isOdd(String,String)
- void checkResult(String)
+ Ident add(String,String)
+ Ident parent()
+ boolean equals(Object)
+ int hashCode()
+ String toString(String)
+ void checkSameAs(Code,String,CucaDiagram)
- String getLastPart(String,String)
+ String getName()
+ boolean isRoot()
+ Ident move(Ident,Ident)
+ int size()
+ Ident getPrefix(int)
+ Ident getSuffix(int)
}
class net.sourceforge.plantuml.project.core.Resource {
- String name
- ResourceDraw draw
- OpenClose openClose
+ int hashCode()
+ boolean equals(Object)
+ String toString()
+ String getName()
+ ResourceDraw getResourceDraw()
+ void setTaskDraw(ResourceDraw)
+ boolean isClosedAt(Day)
+ void addCloseDay(Day)
+ void addForceOnDay(Day)
+ void addCloseDay(DayOfWeek)
}
class net.sourceforge.plantuml.bpm.BpmDiagram {
- BpmElement start
- List<BpmEvent> events
- Deque<BpmBranch> branches
- Coord current
- Cell last
- void cleanGrid(Grid)
+ DiagramDescription getDescription()
+ ImageBuilder createImageBuilder(FileFormatOption)
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
- UDrawable getUDrawable()
+ CommandExecutionResult addEvent(BpmEvent)
- Grid createGrid()
- void addInGrid(Grid,BpmElement)
+ CommandExecutionResult newBranch()
+ CommandExecutionResult elseBranch()
+ CommandExecutionResult endBranch()
}
abstract class net.sourceforge.plantuml.svek.extremity.Extremity {
# double manageround(double)
- boolean isCloseTo(double,double)
+ {abstract}Point2D somePoint()
+ Point2D isTooSmallSoGiveThePointCloserToThisOne(Point2D)
}
class net.sourceforge.plantuml.sprite.ColorPalette4096 {
- {static} String colorValue
+ String getStringFor(Color)
+ String getStringFor(HColor)
# String encodeInt(int)
- HColorSimple getHtmlColorSimpleFor(int)
+ Color getColorFor(String)
# Color getColorFor(int)
- int dup(int)
}
class net.sourceforge.plantuml.zopfli.Hash {
- {static} int[] seq
~ int[] head
~ int[] prev
- int[] hashVal
~ int[] same
~ int val
- int[] head2
~ int[] prev2
~ int[] hashVal2
+ void init(byte[],int,int,int)
+ void updateHash(byte[],int,int)
}
class net.sourceforge.plantuml.code.Upf9Encoder {
+ {static} byte[] encodeChar(char)
- {static} boolean checkBack(char,byte[])
- {static} byte[] encodeCharInternal(char)
- {static} byte lowByte(char)
- {static} byte highByte(char)
+ {static} byte[] getBytes(String)
}
abstract class net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator {
# CodeIterator source
+ void next()
+ CodePosition getCodePosition()
+ void jumpToCodePosition(CodePosition)
}
class net.sourceforge.plantuml.command.CommandEndPackage {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(AbstractEntityDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.posimo.PathDrawer {
+ void drawPathBefore(UGraphic,Positionable,Positionable,Path)
+ void drawPathAfter(UGraphic,Positionable,Positionable,Path)
}
class net.sourceforge.plantuml.brotli.BitReader {
- {static} boolean CHECK_UNUSED_BYTES_AFTER_END
- {static} int LOG_BITNESS
- {static} int BITNESS
- {static} int BYTENESS
- {static} int CAPACITY
- {static} int SLACK
- {static} int BUFFER_SIZE
- {static} int SAFEGUARD
- {static} int WATERLINE
- {static} int HALF_BITNESS
- {static} int HALF_SIZE
- {static} int HALVES_CAPACITY
- {static} int HALF_BUFFER_SIZE
- {static} int HALF_WATERLINE
- {static} int LOG_HALF_SIZE
~ {static} void readMoreInput(State)
~ {static} void doReadMoreInput(State)
~ {static} void checkHealth(State,int)
~ {static} void fillBitWindow(State)
- {static} void doFillBitWindow(State)
~ {static} int peekBits(State)
~ {static} int readFewBits(State,int)
~ {static} int readBits(State,int)
- {static} int readManyBits(State,int)
~ {static} void initBitReader(State)
- {static} void prepare(State)
~ {static} void reload(State)
~ {static} void jumpToByteBoundary(State)
~ {static} int halfAvailable(State)
~ {static} void copyBytes(State,byte[],int,int)
~ {static} void bytesToNibbles(State,int)
}
class net.sourceforge.plantuml.posimo.RacorderFollowTangeante {
+ DotPath getRacordIn(Rectangle2D,Line2D)
}
class net.sourceforge.plantuml.project.Completion {
- int completion
+ int getCompletion()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks {
- ConditionEndStyle conditionEndStyle
- Rainbow arrowColor
+ Ftile addLinks(Branch,Branch,StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionHorizontalThenVertical {
- Rainbow color
- UPolygon usingArrow
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
- UTranslate translate(StringBounder)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionVerticalThenHorizontal {
- Rainbow myArrowColor
- boolean branchEmpty
+ void drawU(UGraphic)
- Point2D getP2(StringBounder)
- UTranslate translate(StringBounder)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionVerticalThenHorizontalDirect {
- Rainbow myArrowColor
- boolean branchEmpty
+ void drawU(UGraphic)
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
- UTranslate translate(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionVerticalOut {
- Rainbow color
- TextBlock out2
+ void drawU(UGraphic)
- UTranslate translate(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionHline {
- Rainbow arrowColor
+ void drawU(UGraphic)
- double[] getMinmax(StringBounder,double,List<Ftile>,Swimlane,List<Swimlane>)
- double[] getMinmaxSimple(StringBounder,double,List<Ftile>)
- int getFirstSwimlane(StringBounder,List<Ftile>,List<Swimlane>)
- int getLastSwimlane(StringBounder,List<Ftile>,List<Swimlane>)
- boolean atLeastOne(StringBounder,Swimlane,List<Ftile>)
- boolean ftileDoesOutcomeInThatSwimlane(Ftile,Swimlane)
}
class net.sourceforge.plantuml.statediagram.command.CommandAddField {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(StateDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.creole.Stripe {
+ Atom getLHeader()
+ List<Atom> getAtoms()
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorAffectation {
- TContext context
- TMemory memory
- List<StringLocated> logs
+ StringLocated peek()
- void doAffectation(StringLocated)
- void executeAffectation(TContext,TMemory,StringLocated)
}
class net.sourceforge.plantuml.real.PositiveForce {
- Real fixedPoint
- RealMoveable movingPoint
- double minimunDistance
- boolean trace
- Throwable creationPoint
+ String toString()
+ boolean apply()
}
class net.sourceforge.plantuml.activitydiagram.command.CommandPartition {
- {static} IRegex getRegexConcat()
- {static} ColorParser color()
# CommandExecutionResult executeArg(ActivityDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.command.note.CommandFactoryNote {
- IRegex getRegexConcatMultiLine()
- IRegex getRegexConcatSingleLine()
+ Command<AbstractEntityDiagram> createSingleLine()
+ Command<AbstractEntityDiagram> createMultiLine(boolean)
- CommandExecutionResult executeInternal(AbstractEntityDiagram,RegexResult,BlocLines)
}
class net.sourceforge.plantuml.cucadiagram.dot.CucaDiagramSimplifierActivity {
- CucaDiagram diagram
- StringBounder stringBounder
- IEntityImage computeImage(IGroup)
}
interface net.sourceforge.plantuml.tim.TMemory {
+ TValue getVariable(String)
+ void putVariable(String,TValue,TVariableScope)
+ void removeVariable(String)
+ boolean isEmpty()
+ Set<String> variablesNames()
+ Trie variablesNames3()
+ TMemory forkFromGlobal(Map<String,TValue>)
+ ExecutionContextIf peekIf()
+ boolean areAllIfOk(TContext,TMemory)
+ void addIf(ExecutionContextIf)
+ void addWhile(ExecutionContextWhile)
+ void addForeach(ExecutionContextForeach)
+ ExecutionContextIf pollIf()
+ ExecutionContextWhile pollWhile()
+ ExecutionContextWhile peekWhile()
+ ExecutionContextForeach pollForeach()
+ ExecutionContextForeach peekForeach()
+ void dumpDebug(String)
}
class net.sourceforge.plantuml.version.IteratorCounter2Impl {
- List<StringLocated> data
- List<StringLocated> trace
- int nb
+ void copyStateFrom(IteratorCounter2)
+ IteratorCounter2 cloneMe()
+ int currentNum()
+ boolean hasNext()
+ StringLocated next()
+ StringLocated peek()
+ StringLocated peekPrevious()
+ void remove()
+ List<StringLocated> getTrace()
}
class net.sourceforge.plantuml.statediagram.StateDiagram {
- {static} String CONCURRENT_PREFIX
- boolean hideEmptyDescription
+ boolean checkConcurrentStateOk(Ident,Code)
- boolean checkConcurrentStateOkInternal(Code)
- boolean checkConcurrentStateOkInternal1972(Ident)
+ IEntity getOrCreateLeaf(Ident,Code,LeafType,USymbol)
+ IEntity getStart()
+ IEntity getEnd()
+ IEntity getHistorical()
+ IEntity getHistorical(String)
+ IEntity getDeepHistory()
+ IEntity getDeepHistory(String)
+ boolean concurrentState(char)
+ void endGroup()
+ void setHideEmptyDescription(boolean)
+ boolean isHideEmptyDescriptionForState()
+ String checkFinalError()
- {static} boolean isCompatible(IGroup,IGroup)
- {static} IGroup getGroupParentIfItIsConcurrentState(IEntity)
}
class net.sourceforge.plantuml.tim.TMemoryLocal {
- TMemoryGlobal memoryGlobal
- TrieImpl overridenVariables00
- Map<String,TValue> overridenVariables01
- TrieImpl localVariables00
- Map<String,TValue> localVariables01
+ void dumpDebug(String)
+ void putVariable(String,TValue,TVariableScope)
+ void removeVariable(String)
+ TValue getVariable(String)
+ Trie variablesNames3()
+ boolean isEmpty()
+ Set<String> variablesNames()
+ TMemory forkFromGlobal(Map<String,TValue>)
}
class net.sourceforge.plantuml.tim.stdlib.Strpos {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.project.core.TaskImpl {
- SortedSet<Day> pausedDay
- Set<DayOfWeek> pausedDayOfWeek
- Solver solver
- Map<Resource,Integer> resources
- LoadPlanable defaultPlan
- boolean diamond
- int completion
- Display note
- Url url
- CenterBorderColor colors
+ void setUrl(Url)
+ int getLoadAt(Day)
- boolean pausedDayOfWeek(Day)
+ int loadForResource(Resource,Day)
+ void addPause(Day)
+ void addPause(DayOfWeek)
- LoadPlanable getRessourcePlan()
+ String getPrettyDisplay()
+ String toString()
+ String debug()
+ Day getStart()
+ Day getEnd()
+ Load getLoad()
+ void setLoad(Load)
+ void setStart(Day)
+ void setEnd(Day)
+ void setColors(CenterBorderColor)
+ void addResource(Resource,int)
+ void setDiamond(boolean)
+ boolean isDiamond()
+ void setCompletion(int)
+ Url getUrl()
+ CenterBorderColor getColors()
+ int getCompletion()
+ Collection<Day> getAllPaused()
- void addAll(SortedSet<Day>,DayOfWeek)
+ void setNote(Display)
+ Display getNote()
}
class net.sourceforge.plantuml.cucadiagram.DisplayPositionned {
- Display display
- HorizontalAlignment horizontalAlignment
- VerticalAlignment verticalAlignment
+ {static} DisplayPositionned single(Display,HorizontalAlignment,VerticalAlignment)
+ {static} DisplayPositionned none(HorizontalAlignment,VerticalAlignment)
+ Display getDisplay()
+ HorizontalAlignment getHorizontalAlignment()
+ VerticalAlignment getVerticalAlignment()
+ boolean isNull()
+ boolean hasUrl()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandFork3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.eps.DriverCenteredCharacterEps {
+ void draw(UShape,double,double,ColorMapper,UParam,EpsGraphics)
}
class net.sourceforge.plantuml.project.lang.CenterBorderColor {
- HColor center
- HColor border
- String style
+ UGraphic apply(UGraphic)
+ boolean isOk()
+ HColor getCenter()
+ String getStyle()
}
class net.sourceforge.plantuml.graphic.USymbolArtifact {
+ SkinParameter getSkinParameter()
- void drawArtifact(UGraphic,double,double,boolean,double)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.ugraphic.color.HColorSimple {
- Color color
- boolean monochrome
+ int hashCode()
+ String toString()
+ String asString()
+ HColor lighten(int)
+ HColor darken(int)
+ HColor reverseHsluv()
+ HColor reverse()
+ boolean isDark()
+ boolean isTransparent()
+ boolean equals(Object)
+ Color getColor999()
+ HColorSimple asMonochrome()
+ HColorSimple opposite()
+ double distance(HColorSimple)
+ boolean isMonochrome()
}
class net.sourceforge.plantuml.creole.rosetta.StripeRow {
- List<Atom> atoms
- {static} Pattern bold
- {static} Pattern unbold
- {static} Pattern italic
- {static} Pattern unitalic
- {static} Pattern strike
- {static} Pattern unstrike
+ Atom getLHeader()
+ List<Atom> getAtoms()
+ void add(Atom)
- {static} Pattern getPattern(String)
+ {static} StripeRow parseUnicode(String,FontConfiguration)
}
class net.sourceforge.plantuml.math.LatexBuilder {
- String tex
- Dimension2D dimension
+ Dimension2D getDimension()
- Icon buildIcon(Color)
+ UImageSvg getSvg(double,Color,Color)
+ MutableImage getImage(Color,Color)
+ String getSource()
}
class net.sourceforge.plantuml.math.LatexBuilder.LatexImage {
- double scale
- Icon icon
- Color foregroundColor
- Color backgroundColor
- BufferedImage cache
+ BufferedImage getImage()
+ MutableImage withScale(double)
+ MutableImage muteColor(Color)
+ MutableImage muteTransparentColor(Color)
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryCheckboxOn {
- DataSource dataSource
- ISkinSimple spriteContainer
+ Terminated<Element> create()
- List<String> extracted(String)
+ boolean ready()
}
class net.sourceforge.plantuml.json.JsonString {
- String string
~ void write(JsonWriter)
+ boolean isString()
+ String asString()
+ int hashCode()
+ boolean equals(Object)
}
abstract class net.sourceforge.plantuml.command.SingleLineCommand2 {
- IRegex pattern
- boolean doTrim
+ boolean syntaxWithFinalBracket()
+ String[] getDescription()
- String myTrim(StringLocated)
- StringLocated myTrim2(StringLocated)
+ CommandControl isValid(BlocLines)
- CommandControl isValidBracket(BlocLines)
# boolean isCommandForbidden()
# void actionIfCommandValid()
+ CommandExecutionResult execute(S,BlocLines)
# boolean isForbidden(CharSequence)
# {abstract}CommandExecutionResult executeArg(S,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.sequencediagram.teoz.MutingLine {
- Rose skin
- ISkinParam skinParam
- boolean useContinueLineBecauseOfDelay
- Map<Double,Double> delays
- StyleBuilder styleBuilder
- Participant participant
- boolean useContinueLineBecauseOfDelay(List<Event>)
+ void drawLine(UGraphic,Context2D,double,double)
- void drawInternal(UGraphic,Context2D,double,double,ComponentType)
+ void delayOn(double,double)
}
abstract class net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram {
- List<Association> associations
+ Ident cleanIdent(Ident)
+ boolean insertBetween(IEntity,IEntity,IEntity)
- Link foundLink(IEntity,IEntity)
+ int getNbOfHozizontalLollipop(IEntity)
+ CommandExecutionResult associationClass(String,String,String,String,LinkType,Display)
- void insertPointBetween(IEntity,IEntity,IEntity)
+ boolean associationClass(int,String,String,IEntity,LinkType,Display)
- List<Association> getExistingAssociatedPoints(IEntity,IEntity)
+ void setLegend(DisplayPositionned)
}
class net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram.Association {
- IEntity entity1
- IEntity entity2
- IEntity associed
- IEntity point
- Link existingLink
- Link entity1ToPoint
- Link pointToEntity2
- Link pointToAssocied
- Association other
+ Association createSecondAssociation(int,IEntity,Display)
~ void createNew(int,LinkType,Display)
~ void createInSecond(LinkType,Display)
~ boolean sameCouple(IEntity,IEntity)
}
class net.sourceforge.plantuml.braille.BrailleChar {
- int id
+ void draw(BrailleGrid,double,double)
- void drawOneSpot(BrailleGrid,int,int,int)
+ {static} BrailleChar fromChar(char)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionStop {
- LinkRendering inlinkRendering
+ boolean containsBreak()
+ Ftile createFtile(FtileFactory)
+ void add(Instruction)
+ boolean kill()
+ LinkRendering getInLinkRendering()
}
interface net.sourceforge.plantuml.code.URLEncoder {
~ String encode(byte[])
~ byte[] decode(String)
}
class net.sourceforge.plantuml.svek.extremity.MiddleFactoryCircleCircled {
- MiddleCircleCircledMode mode
- HColor backColor
- HColor diagramBackColor
+ UDrawable createUDrawable(double)
}
interface net.sourceforge.plantuml.ISkinSimple {
+ String getValue(String)
+ Map<String,String> values()
+ double getPadding()
+ String getMonospacedFamily()
+ int getTabSize()
+ HColorSet getIHtmlColorSet()
+ int getDpi()
+ LineBreakStrategy wrapWidth()
+ ColorMapper getColorMapper()
+ void copyAllFrom(ISkinSimple)
+ double minClassWidth()
}
class net.sourceforge.plantuml.descdiagram.command.Labels {
- String firstLabel
- String secondLabel
- StringWithArrow stringWithArrow
- String init(String)
+ String getFirstLabel()
+ String getSecondLabel()
+ String getLabelLink()
+ LinkArrow getLinkArrow()
+ Display getDisplay()
}
class net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,EpsGraphics)
}
class net.sourceforge.plantuml.swing.SimpleLine2 {
- File file
- GeneratedImage generatedImage
- Future<List<GeneratedImage>> future
+ {static} SimpleLine2 fromFuture(File,Future<List<GeneratedImage>>)
+ {static} SimpleLine2 fromGeneratedImage(File,GeneratedImage)
+ File getFile()
+ boolean pendingAndFinished()
+ String toString()
+ Future<List<GeneratedImage>> getFuture()
+ int compareTo(SimpleLine2)
+ GeneratedImage getGeneratedImage()
}
class net.sourceforge.plantuml.sequencediagram.command.CommandDivider {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull {
+ {static} String ALL_TYPES
- {static} String CODE_CORE
+ {static} String CODE
+ {static} String CODE_WITH_QUOTE
- {static} String DISPLAY_CORE
+ {static} String DISPLAY
+ {static} String DISPLAY_WITHOUT_QUOTE
- {static} IRegex getRegexConcat()
- {static} ColorParser color()
- {static} ColorParser color2()
# boolean isForbidden(CharSequence)
# CommandExecutionResult executeArg(DescriptionDiagram,LineLocation,RegexResult)
+ {static} boolean existsWithBadType3(AbstractEntityDiagram,Code,Ident,LeafType,USymbol)
- char getCharEncoding(String)
}
class net.sourceforge.plantuml.sdot.SmetanaPath {
- Link link
- ST_Agedge_s edge
- YMirror ymirror
- CucaDiagram diagram
- TextBlock label
- TextBlock headLabel
- TextBlock tailLabel
- Rose rose
- ColorParam getArrowColorParam()
+ void drawU(UGraphic)
- void printExtremityAtStart(UGraphic)
- void printExtremityAtEnd(UGraphic)
- void printDebug(UGraphic)
- URectangle getLabelURectangle()
- UTranslate getLabelRectangleTranslate(String)
+ DotPath getDotPath(ST_Agedge_s)
- ST_splines getSplines(ST_Agedge_s)
- DotPath getDotPath(ST_splines)
- Point2D getPoint(ST_splines,int)
}
class net.sourceforge.plantuml.cucadiagram.GroupRoot {
- EntityFactory entityFactory
+ Collection<ILeaf> getLeafsDirect()
+ String toString()
+ boolean isGroup()
+ Display getDisplay()
+ void setDisplay(Display)
+ LeafType getLeafType()
+ String getUid()
+ Url getUrl99()
+ Stereotype getStereotype()
+ void setStereotype(Stereotype)
+ TextBlock getBody(PortionShower,FontParam,ISkinParam)
+ Code getCode()
+ String getCodeGetName()
+ void addUrl(Url)
+ IGroup getParentContainer()
+ boolean containsLeafRecurse(ILeaf)
+ Collection<IGroup> getChildren()
+ void moveEntitiesTo(IGroup)
+ int size()
+ GroupType getGroupType()
+ Code getNamespace()
+ PackageStyle getPackageStyle()
+ void overrideImage(IEntityImage,LeafType)
+ boolean isHidden()
+ USymbol getUSymbol()
+ void setUSymbol(USymbol)
+ SingleStrategy getSingleStrategy()
+ boolean isRemoved()
+ boolean hasUrl()
+ int getHectorLayer()
+ void setHectorLayer(int)
+ int getRawLayout()
+ char getConcurrentSeparator()
+ void setConcurrentSeparator(char)
+ void putTip(String,Display)
+ Map<String,Display> getTips()
+ Bodier getBodier()
+ Colors getColors(ISkinParam)
+ void setColors(Colors)
+ void setSpecificColorTOBEREMOVED(ColorType,HColor)
+ void setSpecificLineStroke(UStroke)
+ FontConfiguration getFontConfigurationForTitle(ISkinParam)
+ void addStereotag(Stereotag)
+ Set<Stereotag> stereotags()
+ void setLegend(DisplayPositionned)
+ DisplayPositionned getLegend()
+ Ident getIdent()
+ boolean isAloneAndUnlinked()
+ void setThisIsTogether()
+ String getCodeLine()
+ void setCodeLine(LineLocation)
}
class net.sourceforge.plantuml.tim.expression.ShuntingYard {
- TokenStack ouputQueue
- Deque<Token> operatorStack
- {static} boolean TRACE
- void traceMe()
- boolean isVariableName(String)
- boolean thereIsAFunctionAtTheTopOfTheOperatorStack(Token)
- boolean thereIsAnOperatorAtTheTopOfTheOperatorStackWithGreaterPrecedence(Token)
- boolean theOperatorAtTheTopOfTheOperatorStackHasEqualPrecedenceAndIsLeftAssociative(Token)
- boolean theOperatorAtTheTopOfTheOperatorStackIsNotALeftParenthesis(Token)
+ TokenStack getQueue()
}
class net.sourceforge.plantuml.posimo.GraphvizSolverB {
+ Dimension2D solve(Cluster,Collection<Path>)
- {static} List<Point2D.Double> extractPointsList(String,int,YDelta)
- {static} double getMaxX(List<Point2D.Double>)
- {static} double getMinX(List<Point2D.Double>)
- {static} double getMaxY(List<Point2D.Double>)
- {static} double getMinY(List<Point2D.Double>)
- void exportPng(String,SFile)
- Path getPath(Collection<Path>,int,int)
}
interface net.sourceforge.plantuml.Hideable {
+ boolean isHidden()
}
class net.sourceforge.plantuml.salt.element.ElementTree {
- List<ElementTreeEntry> entries
- UFont font
- ISkinSimple spriteContainer
- double margin
- TableStrategy strategy
+ void addEntry(String)
+ void addCellToEntry(String)
+ Dimension2D getPreferredDimension(StringBounder,double,double)
- ListWidth getWidthOther(StringBounder)
- double getWidth1(StringBounder)
+ void drawU(UGraphic,int,Dimension2D)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseEntity {
- TextBlock stickman
- boolean head
# void drawInternalU(UGraphic,Area)
- double getTextMiddlePostion(StringBounder)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandAtPlayer {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.tim.stdlib.IntVal {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorSwitch {
+ Ftile createSwitch(Swimlane,List<Branch>,LinkRendering,LinkRendering,Display)
- Ftile createNude(Swimlane,List<Branch>)
- Ftile createWithDiamonds(Swimlane,List<Branch>,Display)
- Ftile createWithLinks(Swimlane,List<Branch>,Display)
- Ftile getDiamond1(Swimlane,Branch,Display)
- Ftile getDiamond2(Swimlane,Branch)
- HColor fontColor(FontParam)
}
class net.sourceforge.plantuml.ugraphic.html5.DriverRectangleHtml5 {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,Html5Drawer)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandAutonumberIncrement {
- {static} RegexConcat getConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.nwdiag.VerticalLine {
- double y1
- double y2
- Set<Double> skip
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.timingdiagram.TimingNote {
- TimeTick when
- Player player
- Display note
- Position position
- ISkinParam skinParam
+ void drawU(UGraphic)
- Opale createOpale()
+ double getHeight(StringBounder)
- double getMarginY()
+ TimeTick getWhen()
+ Position getPosition()
}
class net.sourceforge.plantuml.compositediagram.command.CommandCreatePackageBlock {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(CompositeDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.creole.legacy.StripeTable {
- FontConfiguration fontConfiguration
- ISkinSimple skinParam
- AtomTable table
- Atom marged
- StripeStyle stripeStyle
- {static} String hiddenBar
+ List<Atom> getAtoms()
+ Atom getLHeader()
~ {static} Atom asAtom(List<StripeSimple>,double)
- HColor getBackOrFrontColor(String,int)
- String withouBackColor(String)
- void analyzeAndAddInternal(String)
~ {static} List<String> getWithNewlinesInternal(String)
- FontConfiguration getFontConfiguration(Mode)
+ void analyzeAndAddLine(String)
}
abstract class net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElement {
- InGroupableList inGroupableList
+ double getActualWidth(StringBounder)
+ double getStartingX(StringBounder)
# InGroupableList getInGroupableList()
}
class net.sourceforge.plantuml.windowsdot.WindowsDotArchive {
- {static} WindowsDotArchive singleton
- Boolean isThereArchive
- File exe
+ {static} WindowsDotArchive getInstance()
+ {static} String readString(InputStream)
+ {static} int readNumber(InputStream)
- {static} int readByte(InputStream)
- {static} void extract(File)
+ boolean isThereArchive()
+ File getWindowsExeLite()
}
class net.sourceforge.plantuml.code.AsciiEncoder {
~ {static} char[] encode6bit
~ {static} byte[] decode6bit
+ String encode(byte[])
+ byte[] decode(String)
- int computeSize(int)
- char scharAt(String,int)
+ {static} int decode6bit(char)
+ {static} char encode6bit(byte)
- void append3bytes(StringBuilder,int,int,int)
- void decode3bytes(byte[],int,char,char,char,char)
}
interface net.sourceforge.plantuml.svek.PointListIterator {
+ PointListIterator cloneMe()
}
class net.sourceforge.plantuml.descdiagram.DescriptionDiagramFactory {
+ DescriptionDiagram createEmptyDiagram(UmlSource,ISkinSimple)
# List<Command> createCommands()
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryTextField {
- DataSource dataSource
- ISkinSimple spriteContainer
+ Terminated<Element> create()
+ boolean ready()
}
class net.sourceforge.plantuml.xmi.CucaDiagramXmiMaker {
- CucaDiagram diagram
- FileFormat fileFormat
+ {static} String getModel(UmlDiagram)
+ void createFiles(OutputStream)
}
class net.sourceforge.plantuml.cucadiagram.BodyEnhanced2 {
- Display rawBody
- ISkinSimple skinParam
- LineBreakStrategy lineBreakStrategy
# double getMarginX()
# TextBlock getArea(StringBounder)
- TextBlock getTextBlock(Display)
}
interface net.sourceforge.plantuml.sequencediagram.Event {
~ boolean dealWith(Participant)
~ Url getUrl()
~ boolean hasUrl()
~ boolean isParallel()
}
interface net.sourceforge.plantuml.cucadiagram.ILeaf {
+ EntityPosition getEntityPosition()
+ void setContainer(IGroup)
+ boolean isTop()
+ void setTop(boolean)
+ boolean hasNearDecoration()
+ void setNearDecoration(boolean)
+ int getXposition()
+ void setXposition(int)
+ IEntityImage getSvekImage()
+ String getGeneric()
+ boolean muteToType(LeafType,USymbol)
+ void setGeneric(String)
+ void setSvekImage(IEntityImage)
+ void setNeighborhood(Neighborhood)
+ Neighborhood getNeighborhood()
+ Collection<String> getPortShortNames()
+ void addPortShortName(String)
+ void setVisibilityModifier(VisibilityModifier)
+ VisibilityModifier getVisibilityModifier()
}
class net.sourceforge.plantuml.ugraphic.color.HColorMiddle {
- HColor c1
- HColor c2
+ Color getMappedColor(ColorMapper)
+ HColor getC1()
+ HColor getC2()
}
class net.sourceforge.plantuml.salt.element.ElementText {
- TextBlock block
- boolean show
- String text
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
+ String getText()
}
class net.sourceforge.plantuml.preproc.NumericCompare {
- String operator
+ boolean isCompareOk(int,int)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorAddNote {
+ Ftile addNote(Ftile,Swimlane,Collection<PositionedNote>)
}
class net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference {
- Component comp
- LivingParticipantBox livingParticipantBox1
- LivingParticipantBox livingParticipantBox2
- Url url
# void drawInternalU(UGraphic,double,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getStartingX(StringBounder)
+ double getMaxX(StringBounder)
+ double getMinX(StringBounder)
+ String toString(StringBounder)
}
class net.sourceforge.plantuml.wire.CommandPrint {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(WireDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.eps.DriverLineEps {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,EpsGraphics)
}
class net.sourceforge.plantuml.code.CompressionZopfliZlib {
+ byte[] compress(byte[])
+ ByteArray decompress(byte[])
}
class net.sourceforge.plantuml.creole.command.CommandCreoleSizeChange {
- Pattern2 mypattern
- {static} Pattern2 pattern
- {static} Pattern2 patternEol
+ {static} Command create()
+ {static} Command createEol()
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionLabel {
- String name
+ Ftile createFtile(FtileFactory)
+ void add(Instruction)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ boolean containsBreak()
}
class net.sourceforge.plantuml.preproc.DefineVariable {
- String name
- String defaultValue
+ String getName()
+ String getDefaultValue()
+ DefineVariable removeDefault()
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverUPathTikz {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
class net.sourceforge.plantuml.objectdiagram.command.CommandCreateMap {
- {static} IRegex getRegexConcat()
+ String getPatternEnd()
# CommandExecutionResult executeNow(AbstractClassOrObjectDiagram,BlocLines)
- IEntity executeArg0(AbstractClassOrObjectDiagram,RegexResult)
}
class net.sourceforge.plantuml.logo.LogoScanner {
- Map<String,Integer> keywordTable
- char[] sourceString
- int sourceLength
- int i
+ int getPosition()
+ void setPosition(int)
+ void setSourceString(String)
+ String getSourceString()
+ String getRestAsString()
~ void skipWhitespace()
+ LogoToken getToken()
}
abstract class net.sourceforge.plantuml.creole.rosetta.ReaderAbstractWiki {
# {static} String PNG_OR_GIF
# {static} String BRACKET1
# {static} String BRACKET0
+ List<String> transform(String)
# String rawCode(String,String,String)
# String cleanAndHideBackslashSeparator(String,String,String)
# {abstract}String singleLineFormat(String)
# void exportCodeInternal(List<String>,String,List<String>)
# void exportCodeInternalEnsureStartuml(List<String>,String,List<String>)
- List<String> ensureStartuml(List<String>)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.GotoInterceptor {
- TextBlock swinlanes
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.asciiart.ComponentTextNote {
- ComponentType type
- Display stringsToDisplay
- FileFormat fileFormat
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.hand.URectangleHand {
- UPolygon poly
+ Shadowable getHanddrawn()
}
class net.sourceforge.plantuml.brotli.BrotliInputStream {
+ {static} int DEFAULT_INTERNAL_BUFFER_SIZE
- byte[] buffer
- int remainingBufferBytes
- int bufferOffset
- State state
+ void close()
+ int read()
+ int read(byte[],int,int)
}
class net.sourceforge.plantuml.svek.extremity.ExtremitySquare {
- HColor backgroundColor
- Point2D dest
- double radius
+ Point2D somePoint()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.posimo.LineSegmentIntersection {
- Point2D inter
+ Point2D getIntersection()
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d {
- double dpiFactor
- EnsureVisible visible
+ void draw(UShape,double,double,ColorMapper,UParam,Graphics2D)
+ {static} void drawBorder(UParam,HColor,ColorMapper,UShapeSized,Shape,Graphics2D,double,double)
+ {static} GradientPaint getPaintGradient(double,double,ColorMapper,double,double,HColor)
+ {static} void managePattern(UParam,Graphics2D)
}
class net.sourceforge.plantuml.ugraphic.comp.UGraphicCompressOnXorY {
- CompressionMode mode
- PiecewiseAffineTransform compressionTransform
- UTranslate translate
+ UGraphic apply(UChange)
+ String toString()
+ void draw(UShape)
- UTranslate getTranslate(double,double)
- void drawLine(double,double,ULine)
- double ct(double)
- void drawLine(double,double,double,double)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandBreak {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.svg.DriverTextSvg {
- StringBounder stringBounder
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
class net.sourceforge.plantuml.svek.image.Circle {
- Point2D center
- double radius
+ {static} Circle getCircle(Point2D,Point2D,Point2D)
+ Point2D getCenter()
+ double getRadius()
+ boolean isOutside(Point2D)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionGoto {
- String name
+ Ftile createFtile(FtileFactory)
+ void add(Instruction)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ boolean containsBreak()
}
class net.sourceforge.plantuml.argon2.algorithm.Functions {
~ {static} byte[] initialHash(byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[])
~ {static} byte[] blake2bLong(byte[],int)
- {static} byte[] blake2b(byte[],byte[],int)
~ {static} void roundFunction(Block,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
- {static} void F(Block,int,int,int,int)
- {static} void fBlaMka(Block,int,int)
- {static} void rotr64(Block,int,int,long)
}
abstract class net.sourceforge.plantuml.command.PSystemBasicFactory {
+ {abstract}P executeLine(UmlSource,P,String)
+ {abstract}P initDiagram(UmlSource,String)
- boolean isEmptyLine(StringLocated)
+ Diagram createSystem(UmlSource,ISkinSimple)
}
class net.sourceforge.plantuml.project.solver.Solver3 {
- Histogram workLoad
+ TaskLoad solveForward(long,long)
+ TaskLoad solveBackward(long,long)
# Instant computeEnd()
# Instant computeStart()
}
class net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines {
- {static} String CODE
+ {static} String CODES
+ String getPatternEnd()
- {static} IRegex getRegexConcat()
+ boolean syntaxWithFinalBracket()
- {static} ColorParser color()
# CommandExecutionResult executeNow(ClassDiagram,BlocLines)
+ {static} void addTags(IEntity,String)
+ {static} void manageExtends(String,ClassDiagram,RegexResult,IEntity)
- IEntity executeArg0(ClassDiagram,RegexResult)
}
abstract class net.sourceforge.plantuml.AbstractPSystem {
- UmlSource source
- Scale scale
- String getVersion()
+ String getMetadata()
+ UmlSource getSource()
+ long seed()
+ int getNbImages()
+ DisplayPositionned getTitle()
+ String getWarningOrError()
+ String checkFinalError()
+ void makeDiagramReady()
+ boolean isOk()
+ CommandExecutionResult executeCommand(Command,BlocLines)
+ boolean hasUrl()
+ ImageData exportDiagram(OutputStream,int,FileFormatOption)
+ void setScale(Scale)
+ Scale getScale()
+ ImageBuilder createImageBuilder(FileFormatOption)
# {abstract}ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
+ ClockwiseTopRightBottomLeft getDefaultMargins()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleStart {
- {static} int SIZE
- HColor backColor
- Swimlane swimlane
- double shadowing
+ Collection<Ftile> getMyChildren()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
}
class net.sourceforge.plantuml.graphic.TextLink {
- Url url
+ String getText()
+ Url getUrl()
}
class net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand {
- IRegex getRegexConcatMultiLine()
- IRegex getRegexConcatSingleLine()
- {static} ColorParser color()
+ Command<SequenceDiagram> createSingleLine()
+ Command<SequenceDiagram> createMultiLine(boolean)
- CommandExecutionResult executeInternal(SequenceDiagram,RegexResult,BlocLines)
}
class net.sourceforge.plantuml.SkinParamDelegator {
- ISkinParam skinParam
+ HColor getHyperlinkColor()
+ HColor getBackgroundColor(boolean)
+ int getCircledCharacterRadius()
+ UFont getFont(Stereotype,boolean,FontParam)
+ HColor getFontHtmlColor(Stereotype,FontParam)
+ HColor getHtmlColor(ColorParam,Stereotype,boolean)
+ String getValue(String)
+ int classAttributeIconSize()
+ int getDpi()
+ DotSplines getDotSplines()
+ HorizontalAlignment getHorizontalAlignment(AlignmentParam,ArrowDirection,boolean)
+ ColorMapper getColorMapper()
+ boolean shadowing(Stereotype)
+ boolean shadowing2(Stereotype,SkinParameter)
+ PackageStyle packageStyle()
+ Sprite getSprite(String)
+ ComponentStyle componentStyle()
+ boolean stereotypePositionTop()
+ boolean useSwimlanes(UmlDiagramType)
+ double getNodesep()
+ double getRanksep()
+ double getRoundCorner(CornerParam,Stereotype)
+ double getDiagonalCorner(CornerParam,Stereotype)
+ UStroke getThickness(LineParam,Stereotype)
+ LineBreakStrategy maxMessageSize()
+ LineBreakStrategy wrapWidth()
+ boolean strictUmlStyle()
+ boolean forceSequenceParticipantUnderlined()
+ ConditionStyle getConditionStyle()
+ ConditionEndStyle getConditionEndStyle()
+ double minClassWidth()
+ boolean sameClassWidth()
+ Rankdir getRankdir()
+ boolean useOctagonForActivity(Stereotype)
+ HColorSet getIHtmlColorSet()
+ boolean useUnderlineForHyperlink()
+ HorizontalAlignment getDefaultTextAlignment(HorizontalAlignment)
+ double getPadding()
+ int groupInheritance()
+ Guillemet guillemet()
+ boolean handwritten()
+ String getSvgLinkTarget()
+ String getPreserveAspectRatio()
+ String getMonospacedFamily()
+ Colors getColors(ColorParam,Stereotype)
+ int getTabSize()
+ boolean shadowingForNote(Stereotype)
+ int maxAsciiMessageLength()
+ int colorArrowSeparationSpace()
+ SplitParam getSplitParam()
+ int swimlaneWidth()
+ UmlDiagramType getUmlDiagramType()
+ HColor hoverPathColor()
+ double getPadding(PaddingParam)
+ boolean useRankSame()
+ boolean displayGenericWithOldFashion()
+ TikzFontDistortion getTikzFontDistortion()
+ boolean responseMessageBelowArrow()
+ boolean svgDimensionStyle()
+ char getCircledCharacter(Stereotype)
+ LineBreakStrategy swimlaneWrapTitleWidth()
+ boolean fixCircleLabelOverlapping()
+ void setUseVizJs(boolean)
+ boolean isUseVizJs()
+ void copyAllFrom(ISkinSimple)
+ Map<String,String> values()
+ HorizontalAlignment getStereotypeAlignment()
+ Padder sequenceDiagramPadder()
+ StyleBuilder getCurrentStyleBuilder()
+ void muteStyle(Style)
+ Collection<String> getAllSpriteNames()
+ String getDefaultSkin()
+ void setDefaultSkin(String)
+ ActorStyle actorStyle()
+ void setSvgSize(String,String)
+ String transformStringForSizeHack(String)
+ LengthAdjust getlengthAdjust()
+ void assumeTransparent(ThemeStyle)
+ ThemeStyle getThemeStyle()
}
class net.sourceforge.plantuml.dedication.PSystemDedicationFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.skin.ArrowDressing {
- ArrowHead head
- ArrowPart part
+ String name()
+ String toString()
+ {static} ArrowDressing create()
+ ArrowDressing withHead(ArrowHead)
+ ArrowDressing withPart(ArrowPart)
+ ArrowHead getHead()
+ ArrowPart getPart()
}
class net.sourceforge.plantuml.tim.iterator.CodeIteratorForeach {
- TContext context
- TMemory memory
- List<StringLocated> logs
+ StringLocated peek()
- void executeForeach(TMemory,StringLocated)
- void setLoopVariable(TMemory,ExecutionContextForeach,StringLocated)
}
class net.sourceforge.plantuml.project.Failable {
- O data
- String error
+ {static} Failable<O> ok(O)
+ {static} Failable<O> error(String)
+ O get()
+ boolean isFail()
+ String getError()
}
class net.sourceforge.plantuml.ugraphic.comp.SlotFinder {
- SlotSet slot
- StringBounder stringBounder
- UTranslate translate
- CompressionMode mode
+ boolean matchesProperty(String)
+ double dpiFactor()
+ UGraphic apply(UChange)
+ StringBounder getStringBounder()
+ UParam getParam()
+ void draw(UShape)
- void drawPath(double,double,UPath)
- void drawEmpty(double,double,UEmpty)
- void drawText(double,double,UText)
- void drawEllipse(double,double,UEllipse)
- void drawPolygon(double,double,UPolygon)
- void drawRectangle(double,double,URectangle)
+ ColorMapper getColorMapper()
+ SlotSet getSlotSet()
+ void flushUg()
}
class net.sourceforge.plantuml.creole.command.CommandCreoleSpace {
- {static} Pattern2 pattern
+ {static} Command create()
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.golem.Position {
- int xmin
- int ymin
- int xmax
- int ymax
+ boolean equals(Object)
+ int hashCode()
+ String toString()
+ Position move(TileGeometry,int)
+ int getXmin()
+ int getXmax()
+ int getYmin()
+ int getYmax()
+ int getCenterX()
+ int getCenterY()
}
class net.sourceforge.plantuml.svek.image.EntityImageAssociation {
- {static} int SIZE
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d {
- double dpiFactor
+ void draw(UShape,double,double,ColorMapper,UParam,Graphics2D)
}
class net.sourceforge.plantuml.timingdiagram.Highlight {
- TimeTick tickFrom
- TimeTick tickTo
- Display caption
- Colors colors
- HColor getBackColor()
- HColor getLineColor()
+ TimeTick getTickFrom()
+ TimeTick getTickTo()
+ Display getCaption()
+ TextBlock getCaption(ISkinParam)
+ void drawHighlightsBack(UGraphic,TimingRuler,double)
+ void drawHighlightsLines(UGraphic,TimingRuler,double)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandActivity3 {
+ {static} String endingGroup()
+ {static} void main(String[])
~ {static} IRegex getRegexConcat()
- {static} ColorParser color()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.sprite.ColorPalette {
- {static} String colorValue
+ char getCharFor(Color)
+ char getCharFor(HColor)
- HColorSimple getHtmlColorSimpleFor(char)
+ Color getColorFor(char)
}
class net.sourceforge.plantuml.project.GanttDiagram {
- Map<Task,TaskDraw> draws
- Map<TaskCode,Task> tasks
- Map<String,Task> byShortName
- List<GanttConstraint> constraints
- HColorSet colorSet
- OpenClose openClose
- Map<String,Resource> resources
- Map<Day,HColor> colorDaysToday
- Map<Day,HColor> colorDaysInternal
- Map<DayOfWeek,HColor> colorDaysOfWeek
- Map<Day,String> nameDays
- LabelStrategy labelStrategy
- WeekNumberStrategy weekNumberStrategy
- PrintScale printScale
- double factorScale
- Day today
- double totalHeightWithoutFooter
- Day min
- Day max
- Day printStart
- Day printEnd
- int horizontalPages
- int verticalPages
- boolean showFootbox
+ DiagramDescription getDescription()
+ void setWeekNumberStrategy(DayOfWeek,int)
+ int getHorizontalPages()
+ void setHorizontalPages(int)
+ int getVerticalPages()
+ void setVerticalPages(int)
+ int getNbImages()
+ int getDpi(FileFormatOption)
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
+ void setPrintScale(PrintScale)
+ void setFactorScale(double)
- double getFactorScale()
- boolean isHidden(Task)
- TextBlockBackcolored getTextBlock(StringBounder)
- TimeHeader getTimeHeader()
- Map<Day,HColor> colorDays()
- Style getClosedStyle()
- double getTotalHeight(TimeHeader)
- void drawTasksRect(UGraphic)
- void drawConstraints(UGraphic,TimeScale)
+ StyleSignature getDefaultStyleDefinitionArrow()
- void drawTasksTitle(UGraphic,double,double)
- void drawResources(UGraphic)
+ void closeDayOfWeek(DayOfWeek)
+ void closeDayAsDate(Day)
+ void openDayAsDate(Day)
- void initTaskAndResourceDraws(TimeScale,double,StringBounder)
- Collection<GanttConstraint> getConstraints(Task)
- double lastY(StringBounder)
- boolean magicPushOnce(StringBounder)
- void pushIncluding(TaskDraw,double)
- Day getStart(TaskImpl)
- Day getEnd(TaskImpl)
- void initMinMax()
+ Day getThenDate()
+ Task getExistingTask(String)
+ GanttConstraint forceTaskOrder(Task,Task)
+ Task getOrCreateTask(String,String,boolean)
- Task getLastCreatedTask()
+ void addSeparator(String)
+ void addContraint(GanttConstraint)
+ HColorSet getIHtmlColorSet()
+ void setStartingDate(Day)
+ Day getStartingDate()
+ int daysInWeek()
+ boolean isOpen(Day)
+ boolean affectResource(Task,String)
+ Resource getResource(String)
+ int getLoadForResource(Resource,Day)
+ Moment getExistingMoment(String)
- Day min(Day,Day)
- Day max(Day,Day)
+ void colorDay(Day,HColor)
+ void colorDay(DayOfWeek,HColor)
+ void nameDay(Day,String)
+ void setTodayColors(CenterBorderColor)
+ CommandExecutionResult setToday(Day)
+ CommandExecutionResult deleteTask(Task)
+ void setPrintInterval(Day,Day)
+ TaskDraw getTaskDraw(Task)
+ CommandExecutionResult addNote(Display)
+ LoadPlanable getDefaultPlan()
+ void setShowFootbox(boolean)
+ ClockwiseTopRightBottomLeft getDefaultMargins()
+ void setLabelStrategy(LabelStrategy)
}
interface net.sourceforge.plantuml.openiconic.SvgCommand {
+ String toSvg()
}
class net.sourceforge.plantuml.telnet.TelnetServer {
+ {static} void main(String[])
}
class net.sourceforge.plantuml.argon2.model.Instance {
+ Block[] memory
- int version
- int iterations
- int segmentLength
- int laneLength
- int lanes
- Argon2Type type
- void initMemory(int)
+ void clear()
+ Block[] getMemory()
+ int getVersion()
+ int getIterations()
+ int getSegmentLength()
+ int getLaneLength()
+ int getLanes()
+ Argon2Type getType()
}
abstract class net.sourceforge.plantuml.ugraphic.AbstractPlacementStrategy {
- StringBounder stringBounder
- Map<TextBlock,Dimension2D> dimensions
+ void add(TextBlock)
# Map<TextBlock,Dimension2D> getDimensions()
# double getSumWidth()
# double getSumHeight()
# double getMaxHeight()
# double getMaxWidth()
# double getSumWidth(Iterator<Dimension2D>)
# double getSumHeight(Iterator<Dimension2D>)
# double getMaxWidth(Iterator<Dimension2D>)
# double getMaxHeight(Iterator<Dimension2D>)
# StringBounder getStringBounder()
}
interface net.sourceforge.plantuml.ugraphic.UDriver {
+ void draw(UShape,double,double,ColorMapper,UParam,O)
}
class net.sourceforge.plantuml.timingdiagram.TimeConstraint {
- TimeTick tick1
- TimeTick tick2
- Display label
- ISkinParam skinParam
+ TimeTick getTick1()
+ TimeTick getTick2()
+ Display getLabel()
- TextBlock getTextBlock(Display)
- FontConfiguration getFontConfiguration()
+ void drawU(UGraphic,TimingRuler)
+ double getConstraintHeight(StringBounder)
+ {static} double getTopMargin()
- UPolygon getPolygon(double,Point2D)
+ {static} double getHeightForConstraints(StringBounder,List<TimeConstraint>)
}
class net.sourceforge.plantuml.project.lang.SubjectProject {
+ IRegex toRegex()
+ Failable<GanttDiagram> getMe(GanttDiagram,RegexResult)
+ Collection<? extends SentenceSimple> getSentences()
}
class net.sourceforge.plantuml.project.lang.SubjectProject.Starts {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.mindmap.CommandMindMapOrgmode {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(MindMapDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandIf4 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.gitlog.CursorPosition {
- int x
- int y
- GitTextArea source
- String getCurrentLine()
+ String toString()
+ CursorPosition move(int,int)
+ boolean matches(String)
+ String getCommentInLine()
+ {static} String getCommitNameInLine(String)
+ String getCommitDefinition()
+ Commit getCommit()
+ CursorPosition getDownFromHere()
- {static} CursorPosition getDownFromInternal(CursorPosition)
}
class net.sourceforge.plantuml.tim.EaterLog {
+ void analyze(TContext,TMemory)
}
class net.sourceforge.plantuml.code.AsciiEncoderBase64 {
- {static} char[] encode6bit
- {static} byte[] decode6bit
+ String encode(byte[])
+ byte[] decode(String)
- int computeSize(int)
- char scharAt(String,int)
+ {static} int decode6bit(char)
+ {static} char encode6bit(byte)
- void append3bytes(StringBuilder,int,int,int)
- void decode3bytes(byte[],int,char,char,char,char)
}
class net.sourceforge.plantuml.skin.ActorAwesome {
- double headDiam
- double bodyWidth
- double shoulder
- double collar
- double radius
- double bodyHeight
- SymbolContext symbolContext
+ void drawU(UGraphic)
- double thickness()
+ double getPreferredWidth()
+ double getPreferredHeight()
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.hand.HandJiggle {
- Collection<Point2D> points
- double startX
- double startY
- double defaultVariation
- Random rnd
- double randomMe()
+ void lineTo(Point2D)
+ void arcTo(double,double,double,double,double,double)
- {static} Point2D pointOnCircle(double,double,double,double,double)
+ void lineTo(double,double)
+ void curveTo(CubicCurve2D)
+ UPolygon toUPolygon()
+ UPath toUPath()
+ void appendTo(UPath)
}
class net.sourceforge.plantuml.svek.image.SmallestEnclosingCircle {
- List<Point2D> all
- Circle lastSolution
+ void append(Point2D)
+ Circle getCircle()
- Circle findSec(int,List<Point2D>,int,List<Point2D>)
}
class net.sourceforge.plantuml.classdiagram.command.CommandRemoveRestore {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(CucaDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.command.CommandMultilinesComment {
+ {static} String COMMENT_MULTILINE_START
+ {static} String COMMENT_MULTILINE_END
+ {static} String COMMENT_SINGLE_LINE
+ {static} String INNER_COMMENT
+ String getPatternEnd()
+ CommandExecutionResult execute(Diagram,BlocLines)
}
class net.sourceforge.plantuml.statediagram.command.CommandLinkState {
~ {static} RegexConcat getRegex()
- {static} RegexLeaf getStatePattern(String)
# CommandExecutionResult executeArg(StateDiagram,LineLocation,RegexResult)
- Direction getDirection(RegexResult)
- IEntity getEntityStart(StateDiagram,String)
- IEntity getEntityEnd(StateDiagram,String)
- IEntity getFoo1(StateDiagram,String)
- String removeEquals(String)
}
class net.sourceforge.plantuml.mjpeg.MJPEGGenerator {
~ int width
~ int height
~ double framerate
~ int numFrames
~ SFile aviFile
~ FileOutputStream aviOutput
~ FileChannel aviChannel
~ long riffOffset
~ long aviMovieOffset
~ AVIIndexList indexlist
+ void addImage(Image)
+ void finishAVI()
+ {static} int swapInt(int)
+ {static} short swapShort(short)
+ {static} byte[] intBytes(int)
+ {static} byte[] shortBytes(short)
- byte[] writeImageToBytes(Image)
}
class net.sourceforge.plantuml.mjpeg.MJPEGGenerator.RIFFHeader {
+ byte[] fcc
+ int fileSize
+ byte[] fcc2
+ byte[] fcc3
+ int listSize
+ byte[] fcc4
+ byte[] toBytes()
}
class net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIMainHeader {
+ byte[] fcc
+ int cb
+ int dwMicroSecPerFrame
+ int dwMaxBytesPerSec
+ int dwPaddingGranularity
+ int dwFlags
+ int dwTotalFrames
+ int dwInitialFrames
+ int dwStreams
+ int dwSuggestedBufferSize
+ int dwWidth
+ int dwHeight
+ int[] dwReserved
+ byte[] toBytes()
}
class net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIStreamList {
+ byte[] fcc
+ int size
+ byte[] fcc2
+ byte[] toBytes()
}
class net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIStreamHeader {
+ byte[] fcc
+ int cb
+ byte[] fccType
+ byte[] fccHandler
+ int dwFlags
+ short wPriority
+ short wLanguage
+ int dwInitialFrames
+ int dwScale
+ int dwRate
+ int dwStart
+ int dwLength
+ int dwSuggestedBufferSize
+ int dwQuality
+ int dwSampleSize
+ int left
+ int top
+ int right
+ int bottom
+ byte[] toBytes()
}
class net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIStreamFormat {
+ byte[] fcc
+ int cb
+ int biSize
+ int biWidth
+ int biHeight
+ short biPlanes
+ short biBitCount
+ byte[] biCompression
+ int biSizeImage
+ int biXPelsPerMeter
+ int biYPelsPerMeter
+ int biClrUsed
+ int biClrImportant
+ byte[] toBytes()
}
class net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIMovieList {
+ byte[] fcc
+ int listSize
+ byte[] fcc2
+ byte[] toBytes()
}
class net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIIndexList {
+ byte[] fcc
+ int cb
+ ArrayList ind
+ void addAVIIndex(AVIIndex)
+ void addAVIIndex(int,int)
+ byte[] toBytes()
}
class net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIIndex {
+ byte[] fcc
+ int dwFlags
+ int dwOffset
+ int dwSize
+ byte[] toBytes()
}
class net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIJunk {
+ byte[] fcc
+ int size
+ byte[] data
+ byte[] toBytes()
}
class net.sourceforge.plantuml.svek.CucaDiagramFileMakerSvek {
- CucaDiagram diagram
+ ImageData createFile(OutputStream,List<String>,FileFormatOption)
- GeneralImageBuilder createDotDataImageBuilder(DotMode,StringBounder)
- ImageData createFileInternal(OutputStream,List<String>,FileFormatOption)
- List<Link> getOrderedLinks()
- void addLinkNew(List<Link>,Link)
}
class net.sourceforge.plantuml.tim.EaterElseIf {
- boolean booleanValue
+ void analyze(TContext,TMemory)
+ boolean isTrue()
}
class net.sourceforge.plantuml.svek.image.EntityImageSynchroBar {
+ StyleSignature getDefaultStyleDefinitionBar()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.sequencediagram.graphic.NoteBox {
- NotePosition position
- Url url
- LivingParticipantBox p1
- LivingParticipantBox p2
- Component comp
- double delta
+ double getRightShift(double)
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
# void drawInternalU(UGraphic,double,Context2D)
+ double getStartingX(StringBounder)
- SegmentColored getSegment(StringBounder)
+ void pushToRight(double)
+ double getMaxX(StringBounder)
+ double getMinX(StringBounder)
+ String toString(StringBounder)
+ Url getUrl()
+ NotePosition getNotePosition()
}
class net.sourceforge.plantuml.svek.image.EntityImageClassHeader {
- HeaderLayout headerLayout
- TextBlock getCircledCharacter(ILeaf,ISkinParam)
- ColorParam spotBackground(LeafType)
- ColorParam spotBorder(LeafType)
- char getCircledChar(LeafType)
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ void drawU(UGraphic,double,double)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile {
- LivingSpace livingSpace
- MessageExo message
- Rose skin
- ISkinParam skinParam
- TileArguments tileArguments
+ Event getEvent()
+ double getContactPointRelative()
- ArrowComponent getComponent(StringBounder)
+ void drawU(UGraphic)
- boolean isShortArrow()
+ double getPreferredHeight()
- double getPreferredWidth(StringBounder)
+ void addConstraints()
# void callbackY_internal(double)
- Real getPoint1(StringBounder)
- double getPoint1Value(StringBounder)
- double getPoint2Value(StringBounder)
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.svek.image.EntityImageLollipopInterfaceEye2 {
+ {static} double SIZE
- TextBlock desc
- TextBlock stereo
- SymbolContext ctx
- Url url
- Style getStyle(FontParam)
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.api.CountRate {
- MagicArray lastMinute
- MagicArray lastHour
- MagicArray lastDay
+ void increment()
+ void increment(int)
+ long perMinute()
+ long perHour()
+ long perDay()
+ long perMinuteMax()
+ long perHourMax()
+ long perDayMax()
}
class net.sourceforge.plantuml.creole.atom.AtomImgSvg {
- TileImageSvg tileImageSvg
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.sequencediagram.teoz.NewpageTile {
- Newpage newpage
- TileArguments tileArguments
+ double getContactPointRelative()
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
+ Event getEvent()
}
class net.sourceforge.plantuml.UseStyle {
- {static} ThreadLocal<Boolean> useBeta
+ {static} boolean useBetaStyle()
+ {static} void setBetaStyle(boolean)
}
class net.sourceforge.plantuml.ftp.FtpConnexion {
- String user
- Map<String,String> incoming
- Map<String,byte[]> outgoing
- Set<String> futureOutgoing
- FileFormat fileFormat
+ void addIncoming(String,String)
+ void futureOutgoing(String)
+ Collection<String> getFiles()
+ boolean willExist(String)
+ boolean doesExist(String)
+ byte[] getData(String)
+ int getSize(String)
+ void processImage(String)
+ String getFutureFileName(String)
- FileFormat getFileFormat()
+ void delete(String)
+ void setFileFormat(FileFormat)
}
class net.sourceforge.plantuml.salt.element.Grid2 {
- List<Double> rowsStart
- List<Double> colsStart
- TableStrategy strategy
+ void drawU(UGraphic)
- boolean drawHorizontal()
- boolean drawVertical()
}
class net.sourceforge.plantuml.eggs.EggUtils {
+ {static} String fromByteArrays(byte[])
+ {static} byte[] toByteArrays(String)
+ {static} BigInteger fromSecretSentence(String)
- {static} int convertChar(char)
+ {static} byte[] xor(byte[],byte[])
}
class net.sourceforge.plantuml.salt.factory.ElementFactoryMenu {
+ Terminated<Element> create()
+ boolean ready()
}
class net.sourceforge.plantuml.help.CommandHelpColor {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(Help,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandArrow {
~ {static} String ANCHOR
+ {static} String getColorOrStylePattern()
~ {static} IRegex getRegexConcat()
- List<Participant> getMulticasts(SequenceDiagram,RegexResult)
- Participant getOrCreateParticipant(SequenceDiagram,RegexResult,String)
- boolean contains(String,String)
- String getDressing(RegexResult,String)
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
- CommandExecutionResult manageActivations(String,SequenceDiagram,Participant,Participant,HColor)
- int getLength(RegexResult)
+ {static} ArrowConfiguration applyStyle(ThemeStyle,String,ArrowConfiguration)
}
interface net.sourceforge.plantuml.GeneratedImage {
+ File getPngFile()
+ String getDescription()
+ int lineErrorRaw()
+ int getStatus()
}
class net.sourceforge.plantuml.braille.DriverRectangleBraille {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,BrailleGrid)
}
interface net.sourceforge.plantuml.posimo.Clusterable {
+ Cluster getParent()
}
class net.sourceforge.plantuml.command.CommandMainframe {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.xmi.IXmiClassDiagram {
~ void transformerXml(OutputStream)
}
class net.sourceforge.plantuml.graphic.TileText {
- String text
- FontConfiguration fontConfiguration
- Url url
+ Dimension2D calculateDimension(StringBounder)
+ double getFontSize2D()
~ double getTabSize(StringBounder)
+ void drawU(UGraphic)
~ double getWidth(StringBounder)
}
class net.sourceforge.plantuml.code.CompressionZlibAttic {
- {static} boolean USE_ZOPFLI
- {static} int COMPRESSION_LEVEL
+ byte[] compress(byte[])
- byte[] tryCompress(byte[],int)
+ ByteArray decompress(byte[])
- byte[] tryDecompress(byte[],int)
- byte[] copyArray(byte[],int)
}
class net.sourceforge.plantuml.sudoku.SudokuDLX {
- String[] tab
- long seed
- long rate
+ long getRatting()
+ long getSeed()
+ int getGiven(int,int)
+ void print()
+ {static} void main(String[])
}
class net.sourceforge.plantuml.acearth.PSystemXearth {
- int width
- int height
- Map<String,String> config
- List<Marker> markers
- Collection<String> enums
- Collection<String> doubles
- Collection<String> integers
- Collection<String> booleans
# ImageData exportDiagramNow(OutputStream,int,FileFormatOption)
- Date extractGmt(String)
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.FileSystem {
- {static} FileSystem singleton
- ThreadLocal<String> currentDir
+ {static} FileSystem getInstance()
+ void setCurrentDir(SFile)
+ SFile getCurrentDir()
+ SFile getFile(String)
- boolean isAbsolute(String)
+ void reset()
}
class net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox {
- Arrow arrow
- List<NoteBox> noteBoxes
+ double getArrowOnlyWidth(StringBounder)
+ void setMaxX(double)
# void drawInternalU(UGraphic,double,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getActualWidth(StringBounder)
+ double getStartingX(StringBounder)
+ int getDirection(StringBounder)
+ double getArrowYStartLevel(StringBounder)
+ double getArrowYEndLevel(StringBounder)
+ double getMaxX(StringBounder)
+ double getMinX(StringBounder)
+ String toString(StringBounder)
+ LivingParticipantBox getParticipantAt(StringBounder,NotePosition)
}
class net.sourceforge.plantuml.sequencediagram.teoz.TileBuilder {
+ {static} List<Tile> buildSeveral(Iterator<Event>,TileArguments,Tile)
+ {static} List<Tile> buildOne(Iterator<Event>,TileArguments,Event,Tile)
}
class net.sourceforge.plantuml.svek.PortGeometry {
- double position
- double height
+ PortGeometry translateY(double)
+ String toString()
+ double getHeight()
+ double getPosition()
+ double getLastY()
}
class net.sourceforge.plantuml.xmi.XmiDescriptionDiagram {
- DescriptionDiagram diagram
- Document document
- Element ownedElement
- void addState(IEntity,Element)
+ {static} String forXMI(String)
+ {static} String forXMI(Display)
- void addLink(Link)
- Element createEntityNode(IEntity)
+ void transformerXml(OutputStream)
}
class net.sourceforge.plantuml.swing.ImageWindow2 {
- {static} Preferences prefs
- {static} String KEY_ZOOM_FIT
- {static} String KEY_WIDTH_FIT
- SimpleLine2 simpleLine2
- JScrollPane scrollPane
- JButton next
- JButton copy
- JButton previous
- JCheckBox zoomFitButt
- JCheckBox widthFitButt
- JButton zoomMore
- JButton zoomLess
- MainWindow2 main
- ListModel listModel
- int index
- int zoomFactor
- SizeMode sizeMode
- int startX
- int v1
- int v2
- void next()
- void previous()
- void imageDown()
- void imageUp()
- void imageLeft()
- void imageRight()
- void zoomFit()
- void updateSimpleLine()
- void refreshSimpleLine()
- ScrollablePicture buildScrollablePicture()
- RenderingHints getHints()
- double getZoom()
- void copy()
+ SimpleLine2 getSimpleLine()
+ void refreshImage(boolean)
- boolean isError()
- void force()
}
class net.sourceforge.plantuml.math.PSystemLatexFactory {
+ PSystemLatex initDiagram(UmlSource,String)
+ PSystemLatex executeLine(UmlSource,PSystemLatex,String)
}
class net.sourceforge.plantuml.sequencediagram.puma.SegmentPosition {
- PSegment segment
- double position
+ double getPosition()
+ PSegment getSegment()
}
interface net.sourceforge.plantuml.skin.Context2D {
~ boolean isBackground()
}
class net.sourceforge.plantuml.timingdiagram.command.CommandTimeMessage {
+ {static} String PLAYER_CODE
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.eggs.PSystemWelcomeFactory {
+ Diagram createSystem(UmlSource,ISkinSimple)
+ DiagramType getDiagramType()
}
interface net.sourceforge.plantuml.ugraphic.UShapeSized {
+ double getWidth()
+ double getHeight()
}
interface net.sourceforge.plantuml.project.core.Task {
+ TaskCode getCode()
+ Load getLoad()
+ void setLoad(Load)
+ void setStart(Day)
+ void setEnd(Day)
+ void setColors(CenterBorderColor)
+ void addResource(Resource,int)
+ void setDiamond(boolean)
+ boolean isDiamond()
+ void setCompletion(int)
+ void setUrl(Url)
+ void putInSameRowAs(Task)
+ Task getRow()
+ void addPause(Day)
+ void addPause(DayOfWeek)
+ void setNote(Display)
+ StyleBuilder getStyleBuilder()
}
class net.sourceforge.plantuml.zopfli.LzStore {
~ char[] litLens
~ char[] dists
~ int size
~ void append(char,char)
~ void reset()
~ void copy(LzStore)
}
abstract class net.sourceforge.plantuml.svek.AbstractEntityImage {
- IEntity entity
- ISkinParam skinParam
+ boolean isHidden()
# IEntity getEntity()
# ISkinParam getSkinParam()
+ HColor getBackcolor()
# Stereotype getStereo()
+ Margins getShield(StringBounder)
+ double getOverscanX(StringBounder)
}
interface net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform {
+ double transform(double)
}
class net.sourceforge.plantuml.wire.WPrint {
- UTranslate position
- HColor color
- Display label
- ISkinParam skinParam
- TextBlock getTextBlock()
+ UChange getPosition()
+ void drawMe(UGraphic)
+ double getHeight(StringBounder)
}
class net.sourceforge.plantuml.font.PSystemListFontsFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.graphic.CoordinateChange {
- double x1
- double y1
- double x2
- double y2
- double vect_u_x
- double vect_u_y
- double vect_v_x
- double vect_v_y
- double len
+ Point2D getTrueCoordinate(double,double)
+ double getLength()
}
class net.sourceforge.plantuml.creole.atom.AtomImg {
- {static} String DATA_IMAGE_PNG_BASE64
- {static} String DATA_IMAGE_SVG_BASE64
- BufferedImage image
- double scale
- Url url
- String rawFileName
+ {static} Atom createQrcode(String,double)
+ {static} Atom create(String,ImgValign,int,double,Url)
- {static} Atom buildRasterFromData(String,FontConfiguration,byte[],double,Url)
- {static} Atom buildRasterFromUrl(String,FontConfiguration,SURL,double,Url)
- {static} Atom buildSvgFromUrl(String,FontConfiguration,SURL,double,Url)
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.cucadiagram.TextBlockMap {
- FontParam fontParam
- ISkinParam skinParam
- Map<TextBlock,TextBlock> blocksMap
- List<String> keys
- double totalWidth
+ Ports getPorts(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
- double getWidthColA(StringBounder)
- double getWidthColB(StringBounder)
- double getMaxWidth(StringBounder,Collection<TextBlock>)
+ void drawU(UGraphic)
- double getTotalHeight(StringBounder)
- double getHeightOfRow(StringBounder,TextBlock,TextBlock)
- TextBlock getTextBlock(String)
- FontConfiguration getFontConfiguration()
+ void setTotalWidth(double)
}
class net.sourceforge.plantuml.cucadiagram.TextBlockMap.Point {
- HColor color
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- double getDiameter()
}
abstract class net.sourceforge.plantuml.cucadiagram.dot.AbstractGraphviz {
- File dotExe
- String dotString
- String[] type
~ {static} boolean isWindows()
- {static} String findExecutableOnPath(String)
# boolean findExecutableOnPath()
# File searchDotExe()
# {abstract}File specificDotExe()
# {abstract}String getExeName()
+ ProcessState createFile3(OutputStream)
+ ExeState getExeState()
+ String dotVersion()
- String executeCmd(String[])
~ String[] getCommandLine()
~ String[] getCommandLineVersion()
+ File getDotExe()
+ String getDotString()
+ List<String> getType()
}
class net.sourceforge.plantuml.code.deflate.CanonicalCode {
- int[] symbolCodeBits
- int[] symbolValues
- {static} int MAX_CODE_LENGTH
+ int decodeNextSymbol(BitInputStream)
+ String toString()
}
abstract class net.sourceforge.plantuml.skin.AbstractTextualComponent {
- Display display
- int marginX1
- int marginX2
- int marginY
- TextBlock textBlock
- ISkinSimple spriteContainer
- UFont font
- HColor fontColor
# HColorSet getIHtmlColorSet()
# TextBlock getTextBlock()
# double getPureTextWidth(StringBounder)
+ double getTextWidth(StringBounder)
# double getTextHeight(StringBounder)
# int getMarginX1()
# int getMarginX2()
# int getMarginY()
# UFont getFont()
# HColor getFontColor()
# ISkinSimple getISkinSimple()
}
class net.sourceforge.plantuml.ugraphic.color.ColorMapperMonochrome {
- boolean reverse
+ Color toColor(HColor)
}
interface net.sourceforge.plantuml.skin.ArrowComponent {
~ Point2D getStartPoint(StringBounder,Dimension2D)
~ Point2D getEndPoint(StringBounder,Dimension2D)
~ double getPaddingY()
+ double getYPoint(StringBounder)
+ double getPosArrow(StringBounder)
}
class net.sourceforge.plantuml.project.solver.SolverImpl {
- LoadPlanable loadPlanable
# Day computeEnd()
# Day computeStart()
}
class net.sourceforge.plantuml.math.ConverterSvg {
- Icon icon
- Dimension dimension
+ String getSvg(double,boolean,Color)
+ Dimension2D getDimension()
}
class net.sourceforge.plantuml.sprite.ListSpriteDiagram {
+ DiagramDescription getDescription()
+ ImageBuilder createImageBuilder(FileFormatOption)
# ImageData exportDiagramInternal(OutputStream,int,FileFormatOption)
- TextBlock getTable()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandElseIf2 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty {
+ Object obj
+ int hashCode()
+ boolean equals(Object)
+ void setProperty(Object,Object)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.Zad {
- List<MinMax> rectangles
+ void add(MinMax)
+ void drawDebug(UGraphic)
+ boolean doesHorizontalCross(Snake)
}
abstract class net.sourceforge.plantuml.svek.AbstractExtremityFactory {
+ UDrawable createUDrawable(Point2D,double,Side)
# double atan2(Point2D,Point2D)
}
abstract class net.sourceforge.plantuml.graphic.USymbolSimpleAbstract {
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
# {abstract}TextBlock getDrawing(SymbolContext)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.sequencediagram.puma.PSegment {
- double minsize
- double startx
- double endx
+ double getMinsize()
+ void push(double)
+ String getDebugPosition()
+ double getPosition(double)
}
class net.sourceforge.plantuml.ugraphic.UMotif {
- List<Point2D> points
~ double getLength()
~ List<Point2D> getPoints()
+ DotPath getRectangle(double,double)
~ {static} Point2D convertPoint(char)
~ {static} int convertFromChar(char)
+ void drawHorizontal(UGraphic,double,double,int)
+ void drawVertical(UGraphic,double,double,int)
~ DotPath drawHorizontal(double,double,int)
~ DotPath drawVertical(double,double,int)
- DotPath addHorizontal(double,double,DotPath)
- DotPath addVertical(double,double,DotPath)
}
class net.sourceforge.plantuml.brotli.Decode {
- {static} int UNINITIALIZED
- {static} int BLOCK_START
- {static} int COMPRESSED_BLOCK_START
- {static} int MAIN_LOOP
- {static} int READ_METADATA
- {static} int COPY_UNCOMPRESSED
- {static} int INSERT_LOOP
- {static} int COPY_LOOP
- {static} int COPY_WRAP_BUFFER
- {static} int TRANSFORM
- {static} int FINISHED
- {static} int CLOSED
- {static} int WRITE
- {static} int DEFAULT_CODE_LENGTH
- {static} int CODE_LENGTH_REPEAT_CODE
- {static} int NUM_LITERAL_CODES
- {static} int NUM_INSERT_AND_COPY_CODES
- {static} int NUM_BLOCK_LENGTH_CODES
- {static} int LITERAL_CONTEXT_BITS
- {static} int DISTANCE_CONTEXT_BITS
- {static} int HUFFMAN_TABLE_BITS
- {static} int HUFFMAN_TABLE_MASK
~ {static} int HUFFMAN_TABLE_SIZE
- {static} int CODE_LENGTH_CODES
- {static} int[] CODE_LENGTH_CODE_ORDER
- {static} int NUM_DISTANCE_SHORT_CODES
- {static} int[] DISTANCE_SHORT_CODE_INDEX_OFFSET
- {static} int[] DISTANCE_SHORT_CODE_VALUE_OFFSET
- {static} int[] FIXED_TABLE
~ {static} int[] DICTIONARY_OFFSETS_BY_LENGTH
~ {static} int[] DICTIONARY_SIZE_BITS_BY_LENGTH
~ {static} int MIN_WORD_LENGTH
~ {static} int MAX_WORD_LENGTH
~ {static} int MAX_TRANSFORMED_WORD_LENGTH
~ {static} int[] BLOCK_LENGTH_OFFSET
~ {static} int[] BLOCK_LENGTH_N_BITS
~ {static} int[] INSERT_LENGTH_OFFSET
~ {static} int[] INSERT_LENGTH_N_BITS
~ {static} int[] COPY_LENGTH_OFFSET
~ {static} int[] COPY_LENGTH_N_BITS
~ {static} int[] INSERT_RANGE_LUT
~ {static} int[] COPY_RANGE_LUT
- {static} int decodeWindowBits(State)
~ {static} void initState(State,InputStream)
~ {static} void close(State)
- {static} int decodeVarLenUnsignedByte(State)
- {static} void decodeMetaBlockLength(State)
- {static} int readSymbol(int[],int,State)
- {static} int readBlockLength(int[],int,State)
- {static} int translateShortCodes(int,int[],int)
- {static} void moveToFront(int[],int)
- {static} void inverseMoveToFrontTransform(byte[],int)
- {static} void readHuffmanCodeLengths(int[],int,int[],State)
~ {static} int checkDupes(int[],int)
~ {static} void readHuffmanCode(int,int[],int,State)
- {static} int decodeContextMap(int,byte[],State)
- {static} int decodeBlockTypeAndLength(State,int,int)
- {static} void decodeLiteralBlockSwitch(State)
- {static} void decodeCommandBlockSwitch(State)
- {static} void decodeDistanceBlockSwitch(State)
- {static} void maybeReallocateRingBuffer(State)
- {static} void readNextMetablockHeader(State)
- {static} int readMetablockPartition(State,int,int)
- {static} void readMetablockHuffmanCodesAndContextMaps(State)
- {static} void copyUncompressedData(State)
- {static} int writeRingBuffer(State)
- {static} int[] decodeHuffmanTreeGroup(int,int,State)
~ {static} void decompress(State)
}
class net.sourceforge.plantuml.svek.UGraphicForSnake {
- double dx
- double dy
- List<PendingSnake> snakes
+ String toString()
+ UTranslate getTranslation()
+ void draw(UShape)
- void addPendingSnake(Snake)
+ void flushUg()
+ UGraphic apply(UChange)
}
class net.sourceforge.plantuml.svek.UGraphicForSnake.PendingSnake {
- Snake snake
- UGraphic ug
- double dx
- double dy
~ void drawInternal()
~ void removeEndDecorationIfTouches(List<PendingSnake>)
- Snake moved()
+ String toString()
+ PendingSnake merge(PendingSnake)
}
class net.sourceforge.plantuml.tim.stdlib.InvokeProcedure {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TFunctionType getFunctionType()
+ void executeProcedure(TContext,TMemory,LineLocation,String)
+ void executeProcedureInternal(TContext,TMemory,List<TValue>,Map<String,TValue>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
+ boolean isUnquoted()
}
class net.sourceforge.plantuml.gitlog.GNode {
- List<GNode> up
- List<GNode> down
- List<String> texts
- String comment
+ void addText(String)
+ boolean isTop()
+ String getComment()
+ void setComment(String)
+ {static} void link(GNode,GNode)
+ String toString()
+ Display getDisplay()
+ Collection<GNode> getDowns()
+ boolean canEatTheNextOne()
+ GNode eatTheNextOne()
}
class net.sourceforge.plantuml.command.CommandMultilinesCaption {
+ String getPatternEnd()
+ CommandExecutionResult execute(TitledDiagram,BlocLines)
}
interface net.sourceforge.plantuml.activitydiagram3.Instruction {
+ Ftile createFtile(FtileFactory)
+ void add(Instruction)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ boolean addNote(Display,NotePosition,NoteType,Colors,Swimlane)
+ boolean containsBreak()
}
class net.sourceforge.plantuml.png.PngSizer {
+ {static} BufferedImage process(BufferedImage,int)
- {static} BufferedImage resize(BufferedImage,int)
}
class net.sourceforge.plantuml.stats.StatsUtils {
~ {static} Preferences prefs
~ {static} ParsedGenerated fullEver
~ {static} ConcurrentMap<String,ParsedGenerated> byTypeEver
~ {static} ConcurrentMap<String,ParsedGenerated> byTypeCurrent
~ {static} FormatCounter formatCounterCurrent
~ {static} FormatCounter formatCounterEver
~ {static} HistoricalData historicalData
~ {static} boolean xmlStats
~ {static} boolean htmlStats
~ {static} boolean realTimeStats
- {static} int VERSION
+ {static} Stats getStats()
- {static} void restoreNow()
- {static} void reload()
~ {static} String removeDotPSaved(String)
- {static} void endingHook()
~ {static} Stats getStatsLazzy()
~ {static} void htmlOutput(Stats)
~ {static} void xmlOutput(Stats)
+ {static} void setXmlStats(boolean)
+ {static} void setHtmlStats(boolean)
+ {static} void setRealTimeStats(boolean)
+ {static} void outHtml()
+ {static} void dumpStats()
+ {static} void loopStats()
- {static} void clearScreen(PrintStream,int)
}
class net.sourceforge.plantuml.ugraphic.color.ColorUtils {
+ {static} int getGrayScale(Color)
+ {static} int getGrayScale(int,int,int)
+ {static} int getGrayScale(int)
+ {static} Color getGrayScaleColor(Color)
+ {static} Color getGrayScaleColorReverse(Color)
+ {static} Color reverseHsluv(Color)
+ {static} Color getReversed(Color)
- {static} int to255(double)
}
class net.sourceforge.plantuml.command.CommandRotate {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(UmlDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.sequencediagram.teoz.TileArguments {
- StringBounder stringBounder
- Real origin
- LivingSpaces livingSpaces
- Rose skin
- ISkinParam skinParam
- Bordered bordered
+ TileArguments withBackColorGeneral(HColor,HColor)
+ TileArguments withBackColor(Reference)
+ StringBounder getStringBounder()
+ Real getOrigin()
+ LivingSpaces getLivingSpaces()
+ Rose getSkin()
+ ISkinParam getSkinParam()
+ LivingSpace getLivingSpace(Participant)
+ LivingSpace getFirstLivingSpace()
+ LivingSpace getLastLivingSpace()
+ void setBordered(Bordered)
+ double getBorder1()
+ double getBorder2()
}
class net.sourceforge.plantuml.braille.UGraphicBraille {
+ {static} int QUANTA
- BrailleGrid grid
# AbstractCommonUGraphic copyUGraphic()
- void register()
+ StringBounder getStringBounder()
+ void writeImageTOBEMOVED(OutputStream,String,int)
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverCenteredCharacterTikz2 {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
class net.sourceforge.plantuml.stats.HistoricalData {
- Preferences prefs
- ParsedGenerated current
- List<ParsedGenerated> historical
+ void reset()
- long getMaxId()
- Comparator<? super ParsedGenerated> getIdComparator()
- List<ParsedGenerated> reload()
+ ParsedGenerated current()
+ List<ParsedGenerated> getHistorical()
}
class net.sourceforge.plantuml.swing.LicenseWindow {
- JComponent getNorthLabel()
- JComponent getSouthLabel()
- JComponent getJComponent(List<String>)
+ {static} void main(String[])
}
class net.sourceforge.plantuml.salt.element.ElementPyramid {
- int rows
- int cols
- TextBlock title
- TableStrategy tableStrategy
- Map<Element,Cell> positions1
- Map<Cell,Element> positions2
- double[] rowsStart
- double[] colsStart
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
- void init(StringBounder)
- void ensureColWidth(int,int,double)
- void ensureRowHeight(int,int,double)
+ int getNbRows()
+ int getNbCols()
}
class net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk {
- CucaDiagram diagram
- StringBounder stringBounder
- DotStringFactory dotStringFactory
- Map<ILeaf,ElkNode> nodes
- Map<IGroup,ElkNode> clusters
- Map<Link,ElkEdge> edges
- TextBlock getLabel(Link)
- TextBlock getQualifier(Link,int)
- Point2D getPosition(ElkNode)
- Collection<ILeaf> getUnpackagedEntities()
- ElkNode getElkNode(IEntity)
+ ImageData createFile(OutputStream,List<String>,FileFormatOption)
- void printAllSubgroups(ElkNode,IGroup)
- void printSingleGroup(IGroup)
- void printEntities(ElkNode,Collection<ILeaf>)
- void manageAllEdges()
- void manageSingleNode(ElkNode,ILeaf)
- void manageSingleEdge(Link)
- {static} List<String> getFailureText3(Throwable)
- Bibliotekon getBibliotekon()
- IEntityImage printEntityInternal(ILeaf)
}
class net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk.Drawing {
- MinMax minMax
+ void drawU(UGraphic)
- void drawAllClusters(UGraphic)
- void drawAllNodes(UGraphic)
- void drawAllEdges(UGraphic)
- void drawSingleCluster(UGraphic,IGroup,ElkNode)
- TextBlock getTitleBlock(IGroup)
- HColor getBackColor(UmlDiagramType)
- void drawSingleNode(UGraphic,ILeaf,ElkNode)
- void drawSingleEdge(UGraphic,Link,ElkEdge)
+ Dimension2D calculateDimension(StringBounder)
+ HColor getBackcolor()
}
class net.sourceforge.plantuml.creole.legacy.StripeCode {
- FontConfiguration fontConfiguration
- List<String> raw
- boolean terminated
+ List<Atom> getAtoms()
+ Atom getLHeader()
+ boolean addAndCheckTermination(String)
+ boolean isTerminated()
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingAltitude(StringBounder)
+ void drawU(UGraphic)
+ List<Atom> splitInTwo(StringBounder,double)
}
class net.sourceforge.plantuml.ugraphic.svg.DriverEllipseSvg {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,SvgGraphics)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorRepeat {
+ Ftile repeat(BoxStyle,Swimlane,Swimlane,Display,Ftile,Display,Display,Display,Colors,Ftile,boolean,LinkRendering,LinkRendering)
- Ftile getEntry(Swimlane,Display,Colors,BoxStyle)
}
class net.sourceforge.plantuml.api.mda.option2.MDAUtils {
+ {static} MDADiagram getMDADiagram(String)
}
interface net.sourceforge.plantuml.core.ImageData {
+ int getWidth()
+ int getHeight()
+ boolean containsCMapData()
+ String getCMapData(String)
+ String getWarningOrError()
+ int getStatus()
}
interface net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactory {
+ StringBounder getStringBounder()
+ ISkinParam skinParam()
+ Ftile start(Swimlane)
+ Ftile stop(Swimlane)
+ Ftile end(Swimlane)
+ Ftile spot(Swimlane,String,HColor)
+ Ftile activity(Display,Swimlane,BoxStyle,Colors,Stereotype)
+ Ftile addNote(Ftile,Swimlane,Collection<PositionedNote>)
+ Ftile addUrl(Ftile,Url)
+ Ftile decorateIn(Ftile,LinkRendering)
+ Ftile decorateOut(Ftile,LinkRendering)
+ Ftile assembly(Ftile,Ftile)
+ Ftile repeat(BoxStyle,Swimlane,Swimlane,Display,Ftile,Display,Display,Display,Colors,Ftile,boolean,LinkRendering,LinkRendering)
+ Ftile createWhile(LinkRendering,Swimlane,Ftile,Display,Display,HColor,Instruction,Ftile,LinkRendering,LinkRendering)
+ Ftile createIf(Swimlane,List<Branch>,Branch,LinkRendering,LinkRendering,Url)
+ Ftile createSwitch(Swimlane,List<Branch>,LinkRendering,LinkRendering,Display)
+ Ftile createParallel(List<Ftile>,ForkStyle,String,Swimlane,Swimlane)
+ Ftile createGroup(Ftile,Display,HColor,HColor,PositionedNote,HColor,USymbol,double)
}
class net.sourceforge.plantuml.skin.rose.Rose {
- double paddingX
+ {static} double paddingY
+ HColor getFontColor(ISkinParam,FontParam)
+ HColor getHtmlColor(ISkinParam,ColorParam)
+ HColor getHtmlColor(ISkinParam,Stereotype,ColorParam)
- FontConfiguration getUFont2(ISkinParam,FontParam)
+ Component createComponent(Style[],ComponentType,ArrowConfiguration,ISkinParam,Display)
+ ComponentRoseNewpage createComponentNewPage(ISkinParam)
+ ArrowComponent createComponentArrow(Style[],ArrowConfiguration,ISkinParam,Display)
- double deltaShadow(ISkinParam,ColorParam)
- SymbolContext getSymbolContext(Stereotype,ISkinParam,ColorParam)
+ {static} UStroke getStroke(ISkinParam,LineParam,double)
}
class net.sourceforge.plantuml.project.lang.ComplementNamed {
+ IRegex toRegex(String)
+ Failable<String> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.classdiagram.command.CommandDiamondAssociation {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ClassDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.ULine {
- double dx
- double dy
+ UShape getScaled(double)
+ {static} ULine hline(double)
+ {static} ULine vline(double)
+ String toString()
+ double getDX()
+ double getDY()
+ double getLength()
+ double getWidth()
+ double getHeight()
}
class net.sourceforge.plantuml.ugraphic.ImageBuilder {
- Animation animation
- boolean annotations
- HColor backcolor
- ColorMapper colorMapper
- Dimension2D dimension
- FileFormatOption fileFormatOption
- UDrawable udrawable
- ClockwiseTopRightBottomLeft margin
- String metadata
- long seed
- ISkinParam skinParam
- int status
- TitledDiagram titledDiagram
- boolean randomPixel
- String warningOrError
+ {static} ImageBuilder imageBuilder(FileFormatOption)
+ {static} ImageBuilder plainImageBuilder(UDrawable,FileFormatOption)
+ {static} ImageBuilder plainPngBuilder(UDrawable)
+ ImageBuilder annotations(boolean)
+ ImageBuilder backcolor(HColor)
+ ImageBuilder blackBackcolor()
+ ImageBuilder dimension(Dimension2D)
- int getDpi()
+ ImageBuilder drawable(UDrawable)
+ ImageBuilder margin(ClockwiseTopRightBottomLeft)
+ ImageBuilder metadata(String)
+ ImageBuilder randomPixel()
+ ImageBuilder seed(long)
+ ImageBuilder status(int)
- SvgCharSizeHack getSvgCharSizeHack()
- String getSvgLinkTarget()
+ ImageBuilder warningOrError(String)
+ ImageBuilder styled(TitledDiagram)
+ ImageData write(OutputStream)
+ byte[] writeByteArray()
- ImageData writeImageInternal(FileFormatOption,OutputStream,Animation)
- void maybeDrawBorder(UGraphic,Dimension2D)
- void drawRandomPoint(UGraphic)
- Dimension2D getFinalDimension()
- UGraphic handwritten(UGraphic)
- ImageData writeImageMjpeg(OutputStream)
- ImageData writeImageAnimatedGif(OutputStream)
- Image getAviImage(AffineTransformation)
- UGraphic2 createUGraphic(FileFormatOption,Dimension2D,Animation,double,double,double)
- UGraphic2 createUGraphicSVG(double,Dimension2D)
- UGraphic2 createUGraphicPNG(double,Dimension2D,Animation,double,double,String)
- String getHoverPathColorRGB()
- {static} ClockwiseTopRightBottomLeft calculateMargin(TitledDiagram)
+ String getPreserveAspectRatio()
- ImageDataSimple createImageData(Dimension2D)
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverNoneTikz {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
class net.sourceforge.plantuml.project.lang.ComplementUrl {
+ IRegex toRegex(String)
+ Failable<Url> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.theme.ThemeUtils {
- {static} String THEME_FILE_PREFIX
- {static} String THEME_FILE_SUFFIX
- {static} String THEME_PATH
+ {static} List<String> getAllThemeNames()
+ {static} ReadLine getReaderTheme(String)
+ {static} String getFullPath(String,String)
}
class net.sourceforge.plantuml.asciiart.ComponentTextSelfArrow {
- ComponentType type
- Display stringsToDisplay
- FileFormat fileFormat
- ArrowConfiguration config
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ Point2D getStartPoint(StringBounder,Dimension2D)
+ Point2D getEndPoint(StringBounder,Dimension2D)
+ double getPaddingY()
+ double getYPoint(StringBounder)
+ double getPosArrow(StringBounder)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseControl {
- TextBlock stickman
- boolean head
# void drawInternalU(UGraphic,Area)
- double getTextMiddlePostion(StringBounder)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.salt.element.ElementPyramidScrolled {
- double v1
- double v2
- ScrollStrategy scrollStrategy
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
- UPath getTr0()
- UPath getTr180()
- UPath getTr90()
- UPath getTr270()
- void drawV(UGraphic,double,double)
- void drawH(UGraphic,double,double)
}
class net.sourceforge.plantuml.sequencediagram.Englober {
- ParticipantEnglober participantEnglober
- List<Participant> participants
- TileArguments tileArguments
- StyleBuilder styleBuilder
- Real core1
- Real core2
- boolean isTeoz
- double marginX
+ StyleSignature getDefaultStyleDefinition()
+ Style[] getUsedStyles()
+ {static} Englober createPuma(ParticipantEnglober,Participant,ISkinParam,Rose,StringBounder,StyleBuilder)
+ {static} Englober createTeoz(ParticipantEnglober,Participant,TileArguments,StyleBuilder)
- {static} TileArguments convertFunctionToBeRemoved(ISkinParam,Rose,StringBounder)
+ Participant getFirst2TOBEPRIVATE()
+ Participant getLast2TOBEPRIVATE()
- Real getMiddle()
- Real getPosB()
- Real getPosD()
- Real getPosAA()
- Real getPosZZ()
- LivingSpace getFirstLivingSpace()
- LivingSpace getLastLivingSpace()
- Component getComponent()
+ ParticipantEnglober getParticipantEnglober()
+ boolean contains(Participant)
+ void add(Participant)
+ String toString()
- double getPreferredWidth()
- double getTitleWidth()
+ double getPreferredHeight()
+ void drawEnglober(UGraphic,double,Context2D)
- Real getX2()
- Real getX1()
+ void addInternalConstraints()
- double padding()
+ void addConstraintAfter(Englober)
+ Real getMinX(StringBounder)
+ Real getMaxX(StringBounder)
}
class net.sourceforge.plantuml.svek.EntityImageDegenerated {
- IEntityImage orig
- double delta
- HColor backcolor
+ boolean isHidden()
+ HColor getBackcolor()
+ Dimension2D calculateDimension(StringBounder)
+ MinMax getMinMax(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
+ Margins getShield(StringBounder)
+ double getOverscanX(StringBounder)
}
class net.sourceforge.plantuml.asciiart.Wcwidth {
- {static} int[][] COMBINING
~ {static} boolean bisearch(int)
+ {static} int of(int)
+ {static} int length(CharSequence)
}
interface net.sourceforge.plantuml.style.Value {
+ String asString()
+ HColor asColor(ThemeStyle,HColorSet)
+ int asInt()
+ double asDouble()
+ boolean asBoolean()
+ int asFontStyle()
+ HorizontalAlignment asHorizontalAlignment()
+ int getPriority()
}
class net.sourceforge.plantuml.sprite.SpriteColorBuilder4096 {
- {static} ColorPalette4096 COLOR_PALETTE
+ {static} Sprite buildSprite(List<String>)
+ {static} List<String> encodeColor(BufferedImage)
}
class net.sourceforge.plantuml.tim.stdlib.ReverseHsluvColor {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.timingdiagram.graphic.PlayerFrame {
- TextBlock title
+ void drawFrameTitle(UGraphic)
- void drawLine(UGraphic,double)
}
class net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis {
- {static} IRegex getRegexConcat()
- {static} ColorParser color()
- {static} ColorParser color2()
# boolean isForbidden(CharSequence)
# CommandExecutionResult executeArg(ClassDiagram,LineLocation,RegexResult)
+ {static} boolean existsWithBadType3(AbstractEntityDiagram,Code,Ident,LeafType,USymbol)
- char getCharEncoding(String)
}
abstract class net.sourceforge.plantuml.salt.element.AbstractElementText {
- TextBlock block
- FontConfiguration config
- int charLength
- int getCharNumber(String)
# void drawText(UGraphic,double,double)
# Dimension2D getPureTextDimension(StringBounder)
# Dimension2D getTextDimensionAt(StringBounder,double)
- double getSingleSpace(StringBounder)
# FontConfiguration getConfig()
}
interface net.sourceforge.plantuml.activitydiagram3.InstructionCollection {
+ Instruction getLast()
}
class net.sourceforge.plantuml.preproc.EvalMath {
- String str
- int pos
- char ch
- void nextChar()
- boolean eat(int)
- double parseExpression()
- double parseTerm()
- double parseFactor()
+ double eval()
+ {static} void main(String[])
}
class net.sourceforge.plantuml.graphic.USymbolTogether {
+ SkinParameter getSkinParameter()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.picoweb.ReceivedHTTPRequest {
- {static} String CONTENT_LENGTH_HEADER
- String method
- String path
- byte[] body
+ String getMethod()
+ String getPath()
+ byte[] getBody()
+ {static} ReceivedHTTPRequest fromStream(InputStream)
- {static} int parseContentLengthHeader(String)
- {static} byte[] readBody(InputStream,int)
- {static} String readLine(InputStream)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandStart3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.creole.UCreole {
}
class net.sourceforge.plantuml.graphic.SpriteCommand {
- String sprite
+ String getSprite()
}
class net.sourceforge.plantuml.graphic.Splitter {
~ {static} String endFontPattern
~ {static} String endSupSub
+ {static} String fontPattern
+ {static} String fontColorPattern2
+ {static} String fontSizePattern2
~ {static} String fontSup
~ {static} String fontSub
+ {static} String qrcodePattern
~ {static} String imgPattern
+ {static} String imgPatternNoSrcColon
+ {static} String fontFamilyPattern
+ {static} String svgAttributePattern
- {static} String scale2
- {static} String scale
+ {static} String openiconPattern
+ {static} String spritePattern2
+ {static} String spritePatternForMatch
~ {static} String htmlTag
~ {static} String linkPattern
+ {static} String mathPattern
+ {static} String latexPattern
- {static} Pattern2 tagOrText
- List<String> splitted
~ List<String> getSplittedInternal()
+ {static} String purgeAllTag(String)
+ List<HtmlCommand> getHtmlCommands(ThemeStyle,boolean)
- Collection<Text> splitText(Text)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandDefineStateLong {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.eps.DriverImageEps {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,EpsGraphics)
}
class net.sourceforge.plantuml.sprite.CommandStdlib {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(StdlibDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.svek.WithPorts {
~ Ports getPorts(StringBounder)
}
class net.sourceforge.plantuml.command.CommandMultilinesTitle {
+ String getPatternEnd()
+ CommandExecutionResult execute(TitledDiagram,BlocLines)
}
interface net.sourceforge.plantuml.sprite.Sprite {
+ TextBlock asTextBlock(HColor,double)
}
class net.sourceforge.plantuml.ditaa.PSystemDitaaFactory {
+ PSystemDitaa initDiagram(UmlSource,String)
+ PSystemDitaa executeLine(UmlSource,PSystemDitaa,String)
- float extractScale(String)
}
class net.sourceforge.plantuml.ugraphic.UEllipse {
- double width
- double height
- double start
- double extend
+ UShape getScaled(double)
+ double getWidth()
+ double getHeight()
+ double getStart()
+ double getExtend()
+ Dimension2D getDimension()
+ UEllipse bigger(double)
+ UEllipse scale(double)
+ double getStartingX(double)
+ double getEndingX(double)
+ Point2D getPointAtAngle(double)
}
class net.sourceforge.plantuml.ugraphic.TextBlockInEllipse {
- TextBlock text
- ContainingEllipse ellipse
+ UEllipse getUEllipse()
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
+ void setDeltaShadow(double)
}
class net.sourceforge.plantuml.code.Base64Coder {
- {static} String systemLineSeparator
- {static} char[] map1
- {static} byte[] map2
+ {static} String encodeString(String)
+ {static} String encodeLines(byte[])
+ {static} String encodeLines(byte[],int,int,int,String)
+ {static} char[] encode(byte[])
+ {static} char[] encode(byte[],int)
+ {static} char[] encode(byte[],int,int)
+ {static} String decodeString(String)
+ {static} byte[] decodeLines(String)
+ {static} byte[] decode(String)
+ {static} byte[] decode(char[])
+ {static} byte[] decode(char[],int,int)
}
class net.sourceforge.plantuml.command.CommandNamespaceEmpty {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ClassDiagram,LineLocation,RegexResult)
}
interface net.sourceforge.plantuml.ugraphic.visio.VisioShape {
+ void print(OutputStream)
+ VisioShape yReverse(double)
}
class net.sourceforge.plantuml.elk.proxy.graph.ElkEdgeSection {
+ Object obj
+ int hashCode()
+ boolean equals(Object)
+ double getStartX()
+ double getStartY()
+ double getEndX()
+ double getEndY()
+ Collection<ElkBendPoint> getBendPoints()
}
abstract class net.sourceforge.plantuml.project.solver.AbstractSolver {
# Map<TaskAttribute,Value> values
+ void setData(TaskAttribute,Value)
- void removeFirstElement()
+ Value getData(TaskAttribute)
# {abstract}Value computeEnd()
# {abstract}Value computeStart()
}
class net.sourceforge.plantuml.sequencediagram.Delay {
- Display text
- Style style
+ StyleSignature getDefaultStyleDefinition()
+ Style[] getUsedStyles()
+ Display getText()
+ boolean dealWith(Participant)
}
interface net.sourceforge.plantuml.tim.Trie {
+ void add(String)
+ String getLonguestMatchStartingIn(String)
}
class net.sourceforge.plantuml.elk.proxy.Reflect {
+ {static} Class clazz(String)
+ {static} Enum getEnum(String,String)
+ {static} Object opt(String,String)
+ {static} Object newInstance(String)
+ {static} Object newInstance(String,Object)
+ {static} Object newInstance(String,double,double,double,double)
+ {static} Object field(String,String)
+ {static} Object callStatic(String,String)
+ {static} Object callStatic(String,String,Object)
+ {static} Object callStatic(String,String,Object,Object)
+ {static} Object callStatic2(String,String,Object)
+ {static} Object callStatic2(String,String,Object,Object)
+ {static} Method getStaticMethod(Class<?>,String,int)
+ {static} Object call(Object,String)
+ {static} Object call(Object,String,Object)
+ {static} Object call(Object,String,Object,Object)
+ {static} Object call2(Object,String,Object,Object)
+ {static} Method getMethod(Object,String,int)
}
class net.sourceforge.plantuml.sequencediagram.teoz.TileUtils {
+ {static} Tile withMargin(Tile,double,double,double,double)
}
class net.sourceforge.plantuml.code.TranscoderSmartProtected {
- Transcoder oldOne
- Transcoder zlib
- Transcoder hexOnly
+ String decode(String)
- String decodeZlib(String)
- String decodeHuffman(String)
- String textProtectedHuffman(String)
- String textProtectedDeflate2(String)
- void appendURL(StringBuilder,String)
- void appendLine(StringBuilder,String)
+ String encode(String)
}
class net.sourceforge.plantuml.ugraphic.visio.VisioLine {
- int id
- double x1
- double y1
- double x2
- double y2
+ {static} VisioLine createInches(int,double,double,double,double)
+ VisioShape yReverse(double)
- {static} double toInches(double)
+ void print(OutputStream)
- void out(OutputStream,String)
}
abstract class net.sourceforge.plantuml.sequencediagram.AbstractMessage {
- Display label
- ArrowConfiguration arrowConfiguration
- Set<LifeEventType> lifeEventsType
- Url url
- String messageNumber
- boolean parallel
- StyleBuilder styleBuilder
- List<Note> noteOnMessages
- boolean firstIsActivate
- Set<Participant> noActivationAuthorized2
- double posYendLevel
- double posYstartLevel
- String anchor
- String anchor1
- String anchor2
+ Style[] getUsedStyles()
+ StyleSignature getDefaultStyleDefinition()
+ void setUrl(Url)
+ void goParallel()
+ boolean isParallel()
+ Url getUrl()
+ boolean hasUrl()
+ boolean addLifeEvent(LifeEvent)
+ boolean isCreate()
+ boolean isActivate()
+ boolean isDeactivate()
+ boolean isDestroy()
- boolean isDeactivateOrDestroy()
+ boolean isActivateAndDeactive()
+ Display getLabel()
+ Display getLabelNumbered()
+ ArrowConfiguration getArrowConfiguration()
+ List<Note> getNoteOnMessages()
+ void setNote(Note)
# NotePosition overideNotePosition(NotePosition)
+ String getMessageNumber()
+ {abstract}boolean compatibleForCreate(Participant)
+ {abstract}boolean isSelfMessage()
+ double getPosYstartLevel()
+ void setPosYstartLevel(double)
+ void setPosYendLevel(double)
+ double getPosYendLevel()
+ void setAnchor(String)
+ void setPart1Anchor(String)
+ void setPart2Anchor(String)
+ String getAnchor()
+ String getPart1Anchor()
+ String getPart2Anchor()
+ {abstract}Participant getParticipant1()
+ {abstract}Participant getParticipant2()
}
class net.sourceforge.plantuml.webp.SegmentQuants {
- int qIndex
- SegmentQuant[] segQuants
- {static} DeltaQ get_delta_q(BoolDecoder,int)
+ int getqIndex()
+ SegmentQuant[] getSegQuants()
+ void parse(BoolDecoder,boolean,boolean)
+ void setSegQuants(SegmentQuant[])
}
class net.sourceforge.plantuml.png.Metadata {
+ {static} void main(String[])
+ void readAndDisplayMetadata(SFile)
- void displayMetadata(Node)
- void indent(int)
- void displayMetadata(Node,int)
}
class net.sourceforge.plantuml.asciiart.ComponentTextGroupingTail {
- ComponentType type
- List<? extends CharSequence> stringsToDisplay
- FileFormat fileFormat
+ void drawU(UGraphic,Area,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
interface net.sourceforge.plantuml.bpm.Chain {
+ Navigator<O> navigator(O)
+ boolean contains(O)
+ List<O> toList()
+ boolean remove(O)
}
class net.sourceforge.plantuml.salt.Position {
- int row
- int col
+ int getRow()
+ int getCol()
+ int hashCode()
+ boolean equals(Object)
}
class net.sourceforge.plantuml.stats.XmlConverter {
- DateFormat formatter
- Stats stats
- Document getDocument()
- void addNode(Element,Document,StatsTable)
- String toXmlName(String)
- String toText(Object)
- Transformer getTransformer()
+ void createXml(OutputStream)
+ String toHtml()
- void printTableHtml(StringBuilder,StatsTable)
- String getCreoleLine(Collection<StatsColumn>,StatsLine,boolean)
- String getHtmlHeader(Collection<StatsColumn>)
}
class net.sourceforge.plantuml.posimo.TwoLinesIntersection {
- Point2D inter
+ Point2D getIntersection()
}
class net.sourceforge.plantuml.nwdiag.Footprint {
- int min
- int max
+ String toString()
+ Footprint intersection(Footprint)
+ int getMin()
+ int getMax()
}
class net.sourceforge.plantuml.posimo.RacorderOrthogonal {
+ DotPath getRacordIn(Rectangle2D,Line2D)
}
class net.sourceforge.plantuml.ugraphic.UParamNull {
+ HColor getColor()
+ HColor getBackcolor()
+ UStroke getStroke()
+ boolean isHidden()
+ UPattern getPattern()
+ double getScale()
}
abstract class net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram {
# List<String> getDotStrings()
+ DiagramDescription getDescription()
}
interface net.sourceforge.plantuml.stats.api.Stats {
+ StatsTable getLastSessions()
+ StatsTable getCurrentSessionByDiagramType()
+ StatsTable getCurrentSessionByFormat()
+ StatsTable getAllByDiagramType()
+ StatsTable getAllByFormat()
}
class net.sourceforge.plantuml.descdiagram.EntityImageRequirement {
- TextBlock desc
- Url url
- UStroke getStroke()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.descdiagram.EntityImageRequirement.MyUGraphicEllipse {
- double startingX
- double yTheoricalPosition
- UEllipse ellipse
# AbstractUGraphicHorizontalLine copy(UGraphic)
- double getNormalized(double)
- double getStartingXInternal(double)
- double getEndingXInternal(double)
- Stencil getStencil2(UTranslate)
# void drawHline(UGraphic,UHorizontalLine,UTranslate)
}
class net.sourceforge.plantuml.elk.proxy.graph.util.ElkGraphUtil {
+ {static} ElkLabel createLabel(ElkEdge)
+ {static} ElkLabel createLabel(ElkNode)
+ {static} ElkNode createNode(ElkNode)
+ {static} ElkEdge createSimpleEdge(ElkNode,ElkNode)
+ {static} ElkNode createGraph()
}
class net.sourceforge.plantuml.graphic.USymbolCard {
- SkinParameter skinParameter
+ SkinParameter getSkinParameter()
- void drawCard(UGraphic,double,double,boolean,double,double)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
class net.sourceforge.plantuml.sequencediagram.graphic.Page {
- double headerHeight
- double newpage1
- double newpage2
- double tailHeight
- double signatureHeight
- Display title
+ String toString()
+ double getHeight()
+ double getHeaderRelativePosition()
+ double getBodyRelativePosition()
+ double getBodyHeight()
+ double getTailRelativePosition()
+ double getSignatureRelativePosition()
+ boolean displaySignature()
+ double getNewpage1()
+ double getNewpage2()
+ double getHeaderHeight()
+ Display getTitle()
}
interface net.sourceforge.plantuml.api.PSystemFactory {
~ Diagram createSystem(UmlSource,ISkinSimple)
~ DiagramType getDiagramType()
}
class net.sourceforge.plantuml.cucadiagram.LinkConstraint {
- Link link1
- Link link2
- Display display
- double x1
- double y1
- double x2
- double y2
+ void setPosition(Link,Point2D)
+ void drawMe(UGraphic,ISkinParam)
}
class net.sourceforge.plantuml.nwdiag.Square {
- USymbol shape
- String name
- String description
- Network mainNetwork
- ISkinSimple spriteContainer
- boolean hasItsOwnColumn
- Square sameCol
- int numCol
+ String toString()
- TextBlock toTextBlock(String)
- FontConfiguration getFontConfiguration()
+ LinkedElement asTextBlock(Map<Network,String>,List<Network>)
+ String getDescription()
+ Network getMainNetwork()
+ void setDescription(String)
+ String getName()
+ void setShape(String)
+ void doNotHaveItsOwnColumn()
+ boolean hasItsOwnColumn()
+ void sameColThan(Square)
+ Square getSameCol()
+ void setNumCol(int)
+ int getNumCol()
}
class net.sourceforge.plantuml.AnnotatedWorker {
- Annotated annotated
- ISkinParam skinParam
- StringBounder stringBounder
+ TextBlockBackcolored addAdd(TextBlock)
+ boolean hasMainFrame()
+ TextBlock addFrame(TextBlock)
- HColor getBackgroundColor()
- TextBlock addLegend(TextBlock)
- ISkinParam getSkinParam()
- TextBlock addCaption(TextBlock)
+ TextBlock getCaption()
- TextBlock addTitle(TextBlock)
- TextBlock addHeaderAndFooter(TextBlock)
}
class net.sourceforge.plantuml.graphic.TextBlockLineBefore {
- TextBlock textBlock
- char separator
- TextBlock title
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
+ Ports getPorts(StringBounder)
}
class net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl {
- List<Stack> all
- FrontierComplex getLast()
+ double getFreeY(ParticipantRange)
+ FrontierStackImpl add(double,ParticipantRange)
+ FrontierStack openBar()
+ FrontierStack restore()
+ FrontierStack closeBar()
+ FrontierStackImpl copy()
+ String toString()
}
class net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl.Stack {
- FrontierComplex current
- FrontierComplex envelop
~ Stack addEnvelop(FrontierComplex)
}
class net.sourceforge.plantuml.project.lang.SentenceTaskStarts {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.ErrorUml {
- String error
- ErrorUmlType type
- LineLocation lineLocation
- int score
+ int score()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
+ String getError()
+ ErrorUmlType getType()
+ int getPosition()
+ LineLocation getLineLocation()
}
abstract class net.sourceforge.plantuml.ugraphic.AbstractShadowable {
- double deltaShadow
+ double getDeltaShadow()
+ void setDeltaShadow(double)
}
class net.sourceforge.plantuml.code.ArobaseStringCompressor2 {
+ String compress(String)
+ String decompress(String)
- String clean2(String)
}
class net.sourceforge.plantuml.ftp.FtpServer {
- Map<String,FtpConnexion> datas
- ExecutorService exeImage
- String charset
- int listenPort
- int portFree
- String ip
- FileFormat defaultfileFormat
+ int getFreePort()
+ void go()
+ String getIpServer()
+ FtpConnexion getFtpConnexion(String)
+ {static} void main(String[])
+ void processImage(FtpConnexion,String)
+ String getCharset()
}
class net.sourceforge.plantuml.skin.SimpleContext2D {
- boolean isBackground
+ boolean isBackground()
}
class net.sourceforge.plantuml.webp.Segment {
~ int P0
~ int Q0
+ String toString()
}
class net.sourceforge.plantuml.donors.PSystemDonors {
- {static} int COLS
- {static} int FREE_LINES
+ {static} String DONORS
# UDrawable getRootDrawable(FileFormatOption)
+ {static} List<TextBlock> getCols(List<String>,int,int)
- List<String> getDonors()
+ DiagramDescription getDescription()
+ {static} PSystemDonors create(UmlSource)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA3 {
~ {static} IRegex getRegexConcat()
}
class net.sourceforge.plantuml.ugraphic.PixelImage {
- BufferedImage bufferedImageScale1
- double scale
- AffineTransformType type
- BufferedImage cache
- {static} int mask_a__
- {static} int mask_rgb
+ MutableImage withScale(double)
+ BufferedImage getImage()
+ MutableImage muteColor(Color)
+ MutableImage muteTransparentColor(Color)
- int getDarkerRgb()
- int getRgb(int)
- int getA(int)
- BufferedImage deepCopy()
}
class net.sourceforge.plantuml.vizjs.GraphvizJs {
- {static} ExecutorService executorService
- String dotString
+ ProcessState createFile3(OutputStream)
- Future<String> submitJob()
+ File getDotExe()
+ String dotVersion()
+ ExeState getExeState()
+ {static} GraphvizVersion getGraphvizVersion(boolean)
+ boolean graphviz244onWindows()
}
class net.sourceforge.plantuml.vizjs.GraphvizJs.JsThread {
- Runnable runnable
- VizJsEngine engine
+ void run()
}
class net.sourceforge.plantuml.salt.Terminated {
- O element
- Terminator terminator
+ O getElement()
+ Terminator getTerminator()
+ String toString()
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseNewpage {
- HColor foregroundColor
# void drawInternalU(UGraphic,Area)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.ugraphic.visio.DriverDotPathVdx {
+ void draw(UShape,double,double,ColorMapper,UParam,VisioGraphics)
}
class net.sourceforge.plantuml.salt.element.ElementRadioCheckbox {
- {static} int RECTANGLE
- {static} int ELLIPSE
- {static} int ELLIPSE2
- TextBlock block
- int margin
- double stroke
- boolean radio
- boolean checked
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
- void drawOther(UGraphic,double)
- void drawRadio(UGraphic,double)
}
class net.sourceforge.plantuml.classdiagram.command.CommandCreateClass {
+ {static} String DISPLAY_WITH_GENERIC
+ {static} String CODE
+ {static} String CODE_NO_DOTDOT
- {static} IRegex getRegexConcat()
- {static} ColorParser color()
# CommandExecutionResult executeArg(ClassDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandExoArrowLeft {
~ {static} IRegex getRegexConcat()
~ MessageExoType getMessageExoType(RegexResult)
}
class net.sourceforge.plantuml.stats.HtmlConverter {
- DateFormat formatter
- Stats stats
+ String toHtml()
- void printTableHtml(StringBuilder,StatsTable)
- String getCreoleLine(Collection<StatsColumn>,StatsLine,boolean)
- String getHtmlHeader(Collection<StatsColumn>)
}
class net.sourceforge.plantuml.tim.EaterStartsub {
- String subname
+ void analyze(TContext,TMemory)
+ String getSubname()
}
class net.sourceforge.plantuml.stats.PSystemStats {
+ {static} PSystemStats create(UmlSource)
+ DiagramDescription getDescription()
}
class net.sourceforge.plantuml.sequencediagram.GroupingStart {
- List<GroupingLeaf> children
- HColor backColorGeneral
- GroupingStart parent
- boolean parallel
+ Style[] getUsedStyles()
~ List<GroupingLeaf> getChildren()
+ void addChildren(GroupingLeaf)
+ int getLevel()
+ HColor getBackColorGeneral()
+ boolean dealWith(Participant)
+ Url getUrl()
+ boolean hasUrl()
+ boolean isParallel()
+ void goParallel()
}
class net.sourceforge.plantuml.asciiart.ComponentTextActor {
- ComponentType type
- Display stringsToDisplay
- FileFormat fileFormat
- AsciiShape shape
+ void drawU(UGraphic,Area,Context2D)
- int getHeight()
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
class net.sourceforge.plantuml.golem.TilesField {
- int size
- Tile root
- Map<Tile,Position> positions
- List<Path> paths
+ Tile getRoot()
+ Tile createTile(Tile,TileGeometry)
+ void addPath(Tile,Tile,TileGeometry)
- Path buildPath(TileArea,TileArea)
- boolean isAdjoining(TileArea,TileArea)
- Tile getTileAt(Position)
- Position getFreePosition(Tile,TileGeometry)
- void moveAllToEast(Position)
- boolean isOccuped(Position)
+ Position getPosition(Tile)
- int getXmin()
- int getYmin()
- int getXmax()
- int getYmax()
+ List<Path> getPaths()
+ void drawU(UGraphic)
- Point2D getPoint2D(Dimension2D,TileArea)
+ Dimension2D calculateDimension(StringBounder)
}
interface net.sourceforge.plantuml.skin.Component {
~ Dimension2D getPreferredDimension(StringBounder)
~ double getPreferredWidth(StringBounder)
~ double getPreferredHeight(StringBounder)
~ void drawU(UGraphic,Area,Context2D)
}
class net.sourceforge.plantuml.openiconic.StringDecipher {
+ {static} String decipher(String)
}
interface net.sourceforge.plantuml.cucadiagram.IGroup {
+ boolean containsLeafRecurse(ILeaf)
+ Collection<ILeaf> getLeafsDirect()
+ Collection<IGroup> getChildren()
+ void moveEntitiesTo(IGroup)
+ int size()
+ GroupType getGroupType()
+ Code getNamespace()
+ PackageStyle getPackageStyle()
+ void overrideImage(IEntityImage,LeafType)
+ SingleStrategy getSingleStrategy()
+ FontConfiguration getFontConfigurationForTitle(ISkinParam)
+ char getConcurrentSeparator()
+ void setConcurrentSeparator(char)
+ void setLegend(DisplayPositionned)
+ DisplayPositionned getLegend()
}
class net.sourceforge.plantuml.project.command.CommandLabelOnColumn {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(GanttDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.html.CucaDiagramHtmlMaker {
- CucaDiagram diagram
- SFile dir
+ List<FileImageData> create()
- void printAllType(PrintWriter,LeafType)
- boolean hasSome(LeafType)
- void export(IEntity)
- void htmlClose(PrintWriter)
- Collection<IEntity> getNotes(IEntity)
- Collection<Link> getLinksButNotes(IEntity)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryExtends {
- HColor backgroundColor
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.graphic.Img {
- {static} Pattern2 srcPattern
- {static} Pattern2 vspacePattern
- {static} Pattern2 valignPattern
- {static} Pattern2 noSrcColonPattern
- TextBlock tileImage
~ {static} int getVspace(String)
~ {static} ImgValign getValign(String)
~ {static} HtmlCommand getInstance(String,boolean)
- {static} HtmlCommand build(Matcher2,ImgValign,int)
+ TextBlock createMonoImage()
}
class net.sourceforge.plantuml.posimo.SimpleDrawer {
- Cluster root
- Collection<Path> paths
+ void draw(Graphics2D)
- void drawRectCentered(Graphics2D,Point2D,Dimension2D)
- void drawRect(Graphics2D,Point2D,Dimension2D)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryPlus {
- HColor backgroundColor
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseActor {
- TextBlock stickman
- boolean head
# void drawInternalU(UGraphic,Area)
- double getTextMiddlePostion(StringBounder)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
interface net.sourceforge.plantuml.Annotated {
+ DisplayPositionned getTitle()
+ DisplayPositionned getCaption()
+ DisplayPositionned getLegend()
+ DisplaySection getHeader()
+ DisplaySection getFooter()
+ Display getMainFrame()
}
class net.sourceforge.plantuml.project.lang.TwoNames {
- String name1
- String name2
+ String getName1()
+ String getName2()
}
class net.sourceforge.plantuml.svek.ArithmeticStrategyMax {
- double max
+ void eat(double)
+ double getResult()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandIf2 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.graphic.USymbolInterface {
+ SkinParameter getSkinParameter()
# TextBlock getDrawing(SymbolContext)
}
class net.sourceforge.plantuml.classdiagram.command.CommandAddMethod {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ClassDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverAtomTextTikz {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
class net.sourceforge.plantuml.timingdiagram.graphic.IntricatedPoint {
- Point2D pta
- Point2D ptb
+ Point2D getPointA()
+ Point2D getPointB()
+ IntricatedPoint translated(UTranslate)
}
class net.sourceforge.plantuml.real.RealUtils {
+ {static} RealOrigin createOrigin()
+ {static} Real middle(Real,Real)
+ {static} Real max(Real)
+ {static} Real max(Collection<Real>)
+ {static} Real min(Real)
+ {static} Real min(Collection<Real>)
}
class net.sourceforge.plantuml.salt.CommandSalt {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(PSystemSalt,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.AFileRegular {
- SFile file
+ String toString()
+ InputStream openFile()
+ boolean isOk()
+ int hashCode()
+ boolean equals(Object)
+ AParentFolder getParentFile()
+ SFile getUnderlyingFile()
+ SFile getSystemFolder()
}
class net.sourceforge.plantuml.timingdiagram.PlayerAnalog {
- SortedMap<TimeTick,Double> values
- double ymargin
- Double initialState
- Double start
- Double end
- Integer ticksEvery
- double getMin()
- double getMax()
+ double getFullHeight(StringBounder)
+ void drawFrameTitle(UGraphic)
- SymbolContext getContext()
+ IntricatedPoint getTimeProjection(StringBounder,TimeTick)
- double getValueAt(TimeTick)
+ void addNote(TimeTick,Display,Position)
+ void defineState(String,String)
+ void setState(TimeTick,String,Colors,String)
- double getState(String)
+ void createConstraint(TimeTick,TimeTick,String)
- double getYpos(double)
+ TextBlock getPart1(double,double)
- double getMaxWidthForTicks(StringBounder)
- void drawPart1(UGraphic,double,double)
- double getWidthLabel(StringBounder,double)
- void drawScaleLabel(UGraphic,double,double)
- TextBlock getTextBlock(double)
- void drawTickHlines(UGraphic)
+ UDrawable getPart2()
+ void setStartEnd(double,double)
+ void setTicks(int)
}
class net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse {
- Component compElse
- Lazy afterY
- boolean parallel
# void drawInternalU(UGraphic,double,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getMinX(StringBounder)
+ double getMaxX(StringBounder)
+ String toString(StringBounder)
}
class net.sourceforge.plantuml.svek.image.EntityImageBranch {
- {static} int SIZE
+ StyleSignature getDefaultStyleDefinition()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ ShapeType getShapeType()
}
class net.sourceforge.plantuml.elk.ElkPath {
- Link link
- ElkEdge edge
- CucaDiagram diagram
- TextBlock centerLabel
- TextBlock headLabel
- TextBlock tailLabel
- Rose rose
- SName styleName
- ColorParam getArrowColorParam()
+ void drawU(UGraphic)
- UDrawable getDecors(LinkDecor,double,HColor)
- void drawLabels(UGraphic)
- void drawSections(UGraphic,Collection<ElkEdgeSection>)
- void drawLine(UGraphic,double,double,double,double)
}
class net.sourceforge.plantuml.cucadiagram.GroupPrinter {
- PrintWriter pw
- void printGroup(IGroup)
- void printLeaf(ILeaf)
+ {static} void print(SFile,IGroup)
}
class net.sourceforge.plantuml.statediagram.command.CommandCreatePackageState {
- {static} IRegex getRegexConcat()
- {static} ColorParser color()
- String getNotNull(RegexResult,String,String)
# CommandExecutionResult executeArg(StateDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.command.regex.RegexConcat {
- {static} ConcurrentMap<Object,RegexConcat> cache
- AtomicLong foxRegex
+ {static} void printCacheInfo()
- long foxRegex()
+ {static} RegexConcat build(String,IRegex)
- {static} RegexConcat buildInternal(IRegex)
- boolean invoked()
+ boolean match(StringLocated)
# String getFullSlow()
}
class net.sourceforge.plantuml.cucadiagram.Member {
- String display
- CharSequence raw
- boolean staticModifier
- boolean abstractModifier
- Url url
- boolean hasUrl
- VisibilityModifier visibilityModifier
+ String toString()
+ char charAt(int)
+ int length()
+ CharSequence subSequence(int,int)
+ {static} Member method(CharSequence)
+ {static} Member field(CharSequence)
+ {static} Member method(CharSequence,boolean)
+ {static} Member field(CharSequence,boolean)
+ String getDisplay(boolean)
- String getDisplayWithoutVisibilityChar()
- String getDisplayWithVisibilityChar()
+ boolean equals(Object)
+ int hashCode()
+ boolean isStatic()
+ boolean isAbstract()
- boolean isPrivate()
- boolean isProtected()
- boolean isPublic()
- boolean isPackagePrivate()
- boolean isIEMandatory()
+ VisibilityModifier getVisibilityModifier()
+ Url getUrl()
+ boolean hasUrl()
}
class net.sourceforge.plantuml.wire.Spot {
- WBlock block
- HColor color
- String x
- String y
+ void drawMe(UGraphic)
}
class net.sourceforge.plantuml.creole.Sheet {
- List<Stripe> stripes
- HorizontalAlignment horizontalAlignment
+ String toString()
+ void add(Stripe)
+ Iterator<Stripe> iterator()
+ Stripe getLastStripe()
+ HorizontalAlignment getHorizontalAlignment()
}
class net.sourceforge.plantuml.SuggestedFile {
- FileFormat fileFormat
- int initialCpt
- SFile outputFile
+ SuggestedFile withPreprocFormat()
+ String toString()
+ {static} SuggestedFile fromOutputFile(SFile,FileFormat)
+ {static} SuggestedFile fromOutputFile(java.io.File,FileFormat)
+ SFile getParentFile()
+ String getName()
+ SFile getFile(int)
+ {static} SuggestedFile fromOutputFile(SFile,FileFormat,int)
+ {static} SuggestedFile fromOutputFile(java.io.File,FileFormat,int)
+ SFile getTmpFile()
}
class net.sourceforge.plantuml.nwdiag.CommandProperty {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(NwDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.skin.ArrowConfiguration {
- ArrowBody body
- ArrowDressing dressing1
- ArrowDressing dressing2
- ArrowDecoration decoration1
- ArrowDecoration decoration2
- HColor color
- boolean isSelf
- double thickness
- boolean reverseDefine
+ String toString()
+ String name()
+ {static} ArrowConfiguration withDirectionNormal()
+ {static} ArrowConfiguration withDirectionBoth()
+ {static} ArrowConfiguration withDirectionSelf(boolean)
+ {static} ArrowConfiguration withDirectionReverse()
+ ArrowConfiguration reverse()
+ ArrowConfiguration self()
+ ArrowConfiguration withBody(ArrowBody)
+ ArrowConfiguration withHead(ArrowHead)
- {static} ArrowDressing addHead(ArrowDressing,ArrowHead)
+ ArrowConfiguration withHead1(ArrowHead)
+ ArrowConfiguration withHead2(ArrowHead)
+ ArrowConfiguration withPart(ArrowPart)
+ ArrowConfiguration withDecoration1(ArrowDecoration)
+ ArrowConfiguration withDecoration2(ArrowDecoration)
+ ArrowConfiguration withColor(HColor)
+ ArrowDecoration getDecoration1()
+ ArrowDecoration getDecoration2()
+ ArrowDirection getArrowDirection()
+ boolean isSelfArrow()
+ boolean isDotted()
+ boolean isHidden()
+ ArrowHead getHead()
+ boolean isAsync()
+ ArrowPart getPart()
+ HColor getColor()
+ ArrowDressing getDressing1()
+ ArrowDressing getDressing2()
+ {static} UGraphic stroke(UGraphic,double,double,double)
+ UGraphic applyStroke(UGraphic)
+ UGraphic applyThicknessOnly(UGraphic)
+ ArrowConfiguration withThickness(double)
+ ArrowConfiguration reverseDefine()
+ boolean isReverseDefine()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandActivityLong3 {
+ String getPatternEnd()
- {static} ColorParser color()
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeNow(ActivityDiagram3,BlocLines)
}
class net.sourceforge.plantuml.tim.stdlib.AlwaysTrue {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.braille.DriverTextBraille {
+ void draw(UShape,double,double,ColorMapper,UParam,BrailleGrid)
}
class net.sourceforge.plantuml.posimo.LineRectIntersection {
- Point2D inter
+ {static} Point2D getCloser(Point2D,Point2D)
+ Point2D getIntersection()
}
class net.sourceforge.plantuml.cucadiagram.Election {
- Map<String,CharSequence> all
+ void addCandidate(String,CharSequence)
- CharSequence getCandidate(String)
- List<CharSequence> getAllCandidateContains(String)
- List<CharSequence> getAllCandidateContainsStrict(String)
+ Map<CharSequence,String> getAllElected(Collection<String>)
}
class net.sourceforge.plantuml.dedication.BlumBlumShub {
- {static} BigInteger two
- BigInteger state
- BigInteger pq
+ int nextRnd(int)
}
class net.sourceforge.plantuml.command.CommandTitle {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TitledDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2 {
- Point2D contact
- Point2D center
- double ortho
- double ang
+ Point2D somePoint()
+ void drawU(UGraphic)
}
interface net.sourceforge.plantuml.ISkinParam {
+ {static} int SWIMLANE_WIDTH_SAME
+ HColor getHyperlinkColor()
+ boolean useUnderlineForHyperlink()
+ HColor getBackgroundColor(boolean)
+ HColor getHtmlColor(ColorParam,Stereotype,boolean)
+ Colors getColors(ColorParam,Stereotype)
+ HColor getFontHtmlColor(Stereotype,FontParam)
+ UStroke getThickness(LineParam,Stereotype)
+ UFont getFont(Stereotype,boolean,FontParam)
+ HorizontalAlignment getHorizontalAlignment(AlignmentParam,ArrowDirection,boolean)
+ HorizontalAlignment getDefaultTextAlignment(HorizontalAlignment)
+ HorizontalAlignment getStereotypeAlignment()
+ int getCircledCharacterRadius()
+ char getCircledCharacter(Stereotype)
+ int classAttributeIconSize()
+ DotSplines getDotSplines()
+ boolean shadowing(Stereotype)
+ boolean shadowingForNote(Stereotype)
+ boolean shadowing2(Stereotype,SkinParameter)
+ PackageStyle packageStyle()
+ ComponentStyle componentStyle()
+ boolean stereotypePositionTop()
+ boolean useSwimlanes(UmlDiagramType)
+ double getNodesep()
+ double getRanksep()
+ double getRoundCorner(CornerParam,Stereotype)
+ double getDiagonalCorner(CornerParam,Stereotype)
+ LineBreakStrategy maxMessageSize()
+ LineBreakStrategy wrapWidth()
+ LineBreakStrategy swimlaneWrapTitleWidth()
+ boolean strictUmlStyle()
+ boolean forceSequenceParticipantUnderlined()
+ ConditionStyle getConditionStyle()
+ ConditionEndStyle getConditionEndStyle()
+ boolean sameClassWidth()
+ Rankdir getRankdir()
+ boolean useOctagonForActivity(Stereotype)
+ int groupInheritance()
+ Guillemet guillemet()
+ boolean handwritten()
+ String getSvgLinkTarget()
+ String getPreserveAspectRatio()
+ int getTabSize()
+ int maxAsciiMessageLength()
+ int colorArrowSeparationSpace()
+ SplitParam getSplitParam()
+ int swimlaneWidth()
+ UmlDiagramType getUmlDiagramType()
+ HColor hoverPathColor()
+ TikzFontDistortion getTikzFontDistortion()
+ double getPadding(PaddingParam)
+ boolean useRankSame()
+ boolean displayGenericWithOldFashion()
+ boolean responseMessageBelowArrow()
+ boolean svgDimensionStyle()
+ boolean fixCircleLabelOverlapping()
+ void setUseVizJs(boolean)
+ boolean isUseVizJs()
+ Padder sequenceDiagramPadder()
+ StyleBuilder getCurrentStyleBuilder()
+ void muteStyle(Style)
+ Collection<String> getAllSpriteNames()
+ String getDefaultSkin()
+ void setDefaultSkin(String)
+ ActorStyle actorStyle()
+ void setSvgSize(String,String)
+ LengthAdjust getlengthAdjust()
+ void assumeTransparent(ThemeStyle)
}
class net.sourceforge.plantuml.project.draw.TimeHeaderYearly {
+ double getTimeHeaderHeight()
+ double getTimeFooterHeight()
+ void drawTimeHeader(UGraphic,double)
+ void drawTimeFooter(UGraphic)
- void drawYears(UGraphic)
- void printYear(UGraphic,MonthYear,double,double)
- void drawVbar(UGraphic,double,double,double)
+ double getFullHeaderHeight()
}
class net.sourceforge.plantuml.graphic.SizeChange {
- {static} Pattern2 sizePattern
- Integer size
~ Integer getSize()
+ FontConfiguration apply(FontConfiguration)
}
interface net.sourceforge.plantuml.stats.api.StatsTable {
+ String getName()
+ Collection<StatsColumn> getColumnHeaders()
+ List<StatsLine> getLines()
}
class net.sourceforge.plantuml.graphic.SymbolContext {
- HColor backColor
- HColor foreColor
- UStroke stroke
- double deltaShadow
- double roundCorner
- double diagonalCorner
+ String toString()
+ UGraphic apply(UGraphic)
+ UGraphic applyColors(UGraphic)
+ UGraphic applyStroke(UGraphic)
+ SymbolContext transparentBackColorToNull()
+ SymbolContext withShadow(double)
+ SymbolContext withDeltaShadow(double)
+ SymbolContext withStroke(UStroke)
+ SymbolContext withBackColor(HColor)
+ SymbolContext withForeColor(HColor)
+ SymbolContext withCorner(double,double)
+ HColor getBackColor()
+ HColor getForeColor()
+ UStroke getStroke()
+ boolean isShadowing()
+ double getDeltaShadow()
+ double getRoundCorner()
+ double getDiagonalCorner()
}
class net.sourceforge.plantuml.braille.DriverLineBraille {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,BrailleGrid)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.TextBlockInterceptorUDrawable {
- TextBlock textBlock
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseSelfArrow {
- double arrowWidth
- boolean niceArrow
# void drawInternalU(UGraphic,Area)
- UPolygon getPolygon()
+ Point2D getStartPoint(StringBounder,Dimension2D)
+ Point2D getEndPoint(StringBounder,Dimension2D)
+ double getYPoint(StringBounder)
+ double getPreferredHeight(StringBounder)
- double getArrowOnlyHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getPosArrow(StringBounder)
}
class net.sourceforge.plantuml.braille.BrailleGrid {
- int minX
- int minY
- int maxX
- int maxY
- double quanta
- Set<Coords> on
+ boolean getState(int,int)
- void setStateDouble(double,double,boolean)
+ void setState(int,int,boolean)
+ int getMinX()
+ int getMinY()
+ int getMaxX()
+ int getMaxY()
+ void rectangle(double,double,double,double)
- void vline(double,double,double)
- void hline(double,double,double)
+ int toInt(double)
+ void line(double,double,double,double)
+ double getQuanta()
+ void drawDotPath(double,double,DotPath)
- void drawCubic(double,double,CubicCurve2D.Double)
- void drawPointInternal(double,double,Point2D)
+ void drawPolygon(List<Point2D>)
- void drawLineInternal(Point2D,Point2D)
}
class net.sourceforge.plantuml.graphic.TileImageSvg {
- UImageSvg svg
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
}
interface net.sourceforge.plantuml.api.MyRunnable {
+ void runJob()
+ void cancelJob()
}
class net.sourceforge.plantuml.stats.ParsedGenerated {
- NumberAnalyzed parsed
- NumberAnalyzed generated
+ void reset()
+ {static} ParsedGenerated createVolatile()
+ {static} ParsedGenerated createVolatileDated()
+ {static} ParsedGenerated loadDated(Preferences,String)
+ NumberAnalyzed parsed()
+ NumberAnalyzed generated()
+ NumberAnalyzedDated parsedDated()
+ NumberAnalyzedDated generatedDated()
+ long getId()
+ String getVersion()
}
class net.sourceforge.plantuml.ugraphic.LimitFinder {
- StringBounder stringBounder
- UTranslate translate
- MinMaxMutable minmax
- UClip clip
- {static} double HACK_X_FOR_POLYGON
+ boolean matchesProperty(String)
+ double dpiFactor()
+ UGraphic apply(UChange)
+ StringBounder getStringBounder()
+ UParam getParam()
- void addPoint(double,double)
+ void draw(UShape)
- void drawEmpty(double,double,UEmpty)
- void drawUPath(double,double,UPath)
- void drawUPolygon(double,double,UPolygon)
- void drawULine(double,double,ULine)
- void drawRectangle(double,double,URectangle)
- void drawDotPath(double,double,DotPath)
- void drawImage(double,double,UImage)
- void drawImageSvg(double,double,UImageSvg)
- void drawEllipse(double,double,UEllipse)
- void drawText(double,double,UText)
+ ColorMapper getColorMapper()
+ double getMaxX()
+ double getMaxY()
+ double getMinX()
+ double getMinY()
+ MinMax getMinMax()
+ void flushUg()
}
interface net.sourceforge.plantuml.project.core3.TaskLoad {
+ long getStart()
+ long getEnd()
+ Histogram getLoad()
}
class net.sourceforge.plantuml.flashcode.FlashCodeFactory {
+ {static} FlashCodeUtils getFlashCodeUtils()
}
class net.sourceforge.plantuml.ugraphic.eps.DriverRectangleEps {
- ClipContainer clipContainer
+ void draw(UShape,double,double,ColorMapper,UParam,EpsGraphics)
}
class net.sourceforge.plantuml.tim.EaterLegacyDefine {
- TFunctionImpl function
+ void analyze(TContext,TMemory)
+ TFunction getFunction()
}
interface net.sourceforge.plantuml.SingleLine {
~ Diagram getSystemFromSingleLine(String)
}
class net.sourceforge.plantuml.eps.PostScriptCommandMacro {
- String name
- PostScriptData data
+ String getName()
+ void add(PostScriptCommand)
+ String toPostString()
+ String getPostStringDefinition()
+ int hashCode()
+ boolean equals(Object)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandStop3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.ugraphic.eps.DriverDotPathEps {
+ void draw(UShape,double,double,ColorMapper,UParam,EpsGraphics)
}
class net.sourceforge.plantuml.json.Location {
+ int offset
+ int line
+ int column
+ String toString()
+ int hashCode()
+ boolean equals(Object)
}
class net.sourceforge.plantuml.braille.BrailleUtils {
+ {static} boolean isBraille(char)
}
interface net.sourceforge.plantuml.posimo.Moveable {
~ void moveSvek(double,double)
}
class net.sourceforge.plantuml.xmlsc.StateDiagramScxmlMaker {
- StateDiagram diagram
+ void createFiles(OutputStream)
}
class net.sourceforge.plantuml.sequencediagram.Message {
- Participant p1
- Participant p2
- List<Participant> multicast
+ String toString()
+ Participant getParticipant1()
+ Participant getParticipant2()
+ boolean dealWith(Participant)
+ boolean compatibleForCreate(Participant)
+ boolean isSelfMessage()
+ void setMulticast(List<Participant>)
+ List<Participant> getMulticast()
}
interface net.sourceforge.plantuml.project.lang.Verb {
+ IRegex toRegex()
}
class net.sourceforge.plantuml.security.SURL {
- URL internal
- {static} ExecutorService exe
- {static} Map<String,Long> badHosts
+ {static} SURL create(String)
+ {static} SURL create(URL)
+ String toString()
- boolean isUrlOk()
- boolean pureIP(String)
- boolean isInAllowList()
- String cleanPath(String)
- List<String> getAllowList()
+ byte[] getBytes()
+ InputStream openStream()
+ BufferedImage readRasterImageFromURL()
}
class net.sourceforge.plantuml.anim.AnimationDecoder {
- List<String> result
+ List<String> decode()
}
class net.sourceforge.plantuml.wbs.CommandWBSItem {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(WBSDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.creole.Fission {
- Stripe stripe
- LineBreakStrategy maxWidth
+ List<Stripe> getSplitted(StringBounder)
- List<Atom> noHeader()
- {static} Atom blank(Atom)
- Collection<? extends Atom> getSplitted(StringBounder,Atom)
}
class net.sourceforge.plantuml.creole.Fission.StripeSimpleInternal {
- List<Atom> atoms
- double totalWidth
+ List<Atom> getAtoms()
- void addAtom(Atom,double)
+ Atom getLHeader()
}
class net.sourceforge.plantuml.classdiagram.FullLayout {
- List<RowLayout> all
+ void addRowLayout(RowLayout)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.svek.PointDirected {
- double x
- double y
- double angle
+ Point2D getPoint2D()
+ double getAngle()
}
abstract class net.sourceforge.plantuml.command.CommandMultilines {
- Pattern2 starting
+ {abstract}String getPatternEnd()
+ String[] getDescription()
+ CommandControl isValid(BlocLines)
# boolean isCommandForbidden()
# void actionIfCommandValid()
# Pattern2 getStartingPattern()
}
class net.sourceforge.plantuml.sequencediagram.teoz.NoteTile {
- LivingSpace livingSpace1
- LivingSpace livingSpace2
- Rose skin
- ISkinParam skinParam
- Note note
+ Event getEvent()
+ double getContactPointRelative()
- Component getComponent(StringBounder)
- ComponentType getNoteComponentType(NoteStyle)
+ void drawU(UGraphic)
- double getUsedWidth(StringBounder)
- Real getX(StringBounder)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
interface net.sourceforge.plantuml.api.INumberAnalyzed {
+ long getNb()
+ long getSum()
+ long getMin()
+ long getMax()
+ long getMean()
+ long getSliddingMean()
}
class net.sourceforge.plantuml.timingdiagram.TickInPlayer {
- Player player
- TimeTick tick
+ Player getPlayer()
+ TimeTick getTick()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandSplitEnd3 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.tim.expression.Expression {
}
class net.sourceforge.plantuml.tim.stdlib.IsDark {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.core.DiagramDescription {
- String description
+ String getDescription()
+ String toString()
}
class net.sourceforge.plantuml.ugraphic.visio.DriverUPathVdx {
+ void draw(UShape,double,double,ColorMapper,UParam,VisioGraphics)
}
class net.sourceforge.plantuml.preproc.ReadLineList {
- Iterator<String> iterator
- LineLocation location
+ void close()
+ StringLocated readLine()
}
class net.sourceforge.plantuml.sequencediagram.graphic.MessageSelfArrow {
- LivingParticipantBox p1
- double deltaX
- double deltaY
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
# void drawInternalU(UGraphic,double,Context2D)
+ double getStartingX(StringBounder)
+ int getDirection(StringBounder)
+ double getArrowYStartLevel(StringBounder)
+ double getArrowYEndLevel(StringBounder)
+ double getMaxX(StringBounder)
+ double getMinX(StringBounder)
+ String toString(StringBounder)
+ LivingParticipantBox getParticipantAt(StringBounder,NotePosition)
+ double getActualWidth(StringBounder)
}
class net.sourceforge.plantuml.code.PairInt {
- int x
- int y
+ PairInt rotate()
+ String toString()
+ int getX()
+ int getY()
+ PairInt plus(PairInt)
}
class net.sourceforge.plantuml.ftp.FtpLoop {
- Socket incoming
- FtpServer ftpServer
- BufferedReader br
- PrintWriter pw
- FtpConnexion connexion
- String ipClient
- int port
- Mode mode
- void runInternal()
- boolean manage(String)
- void localLog(String)
- void retr(String,Socket)
- void retrPassif(String)
- void waitForMe(String)
- void retrActif(String)
- void storActif(String)
- void storPassif(String)
- String removeStartingsSlash(String)
- void stor(String,Socket)
- void listActif()
- void listPassif()
- void list(Socket)
- void myOut(String)
+ void run()
}
class net.sourceforge.plantuml.cucadiagram.dot.ProcessState {
- String name
- IOException cause
- {static} ProcessState INIT
- {static} ProcessState RUNNING
- {static} ProcessState TERMINATED_OK
- {static} ProcessState TIMEOUT
+ String toString()
+ {static} ProcessState INIT()
+ {static} ProcessState RUNNING()
+ {static} ProcessState TERMINATED_OK()
+ {static} ProcessState TIMEOUT()
+ {static} ProcessState IO_EXCEPTION1(IOException)
+ {static} ProcessState IO_EXCEPTION2(IOException)
+ boolean differs(ProcessState)
+ boolean equals(Object)
+ int hashCode()
+ Throwable getCause()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionVerticalDown {
- Point2D p1
- Point2D p2
- Rainbow color
- TextBlock textBlock
+ void drawU(UGraphic)
+ double getMaxX(StringBounder)
- Snake getSimpleSnake()
+ void drawTranslate(UGraphic,UTranslate,UTranslate)
}
abstract class net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile {
+ double getContactPointRelative()
+ double getZZZ()
+ boolean matchAnchor(String)
}
interface net.sourceforge.plantuml.EnsureVisible {
+ void ensureVisible(double,double)
}
class net.sourceforge.plantuml.ugraphic.tikz.DriverImageTikz {
+ void draw(UShape,double,double,ColorMapper,UParam,TikzGraphics)
}
class net.sourceforge.plantuml.creole.rosetta.ReaderDokuwiki {
# String singleLineFormat(String)
+ List<String> transform(List<String>)
- StartEndGroup getStartEndGroup(List<String>,int)
- AutoGroup getAutoGroup(List<String>,int)
- AutoGroup getAutoGroup(List<String>,int,String)
}
class net.sourceforge.plantuml.creole.rosetta.ReaderDokuwiki.AutoGroup {
- List<String> lines
- int skip
- String[] headers
- void addLine(String)
- int getSkipped()
- void exportHtml(List<String>)
- void exportCode(List<String>)
- void exportList(List<String>,String)
- void exportFieldset(List<String>)
- void exportBlockquote(List<String>)
- void exportTable(List<String>)
+ boolean isInTheGroup(String)
}
class net.sourceforge.plantuml.creole.rosetta.ReaderDokuwiki.StartEndGroup {
- List<String> lines
- int skip
- String first
- void exportHtml(List<String>)
- int getSkipped()
}
class net.sourceforge.plantuml.png.PngSplitter {
- List<SFile> files
+ List<SFile> getFiles()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FloatingNote {
- Opale opale
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
+ double getStartingX(StringBounder,double)
+ double getEndingX(StringBounder,double)
}
class net.sourceforge.plantuml.argon2.algorithm.FillBlock {
~ {static} void fillBlock(Block,Block,Block,boolean)
}
class net.sourceforge.plantuml.bpm.CommandResume {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(BpmDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.tim.EaterAffectationDefine {
+ void analyze(TContext,TMemory)
}
class net.sourceforge.plantuml.ScaleWidthAndHeight {
- double maxWidth
- double maxHeight
+ double getScaleInternal(double,double)
}
interface net.sourceforge.plantuml.project.LoadPlanable {
+ int getLoadAt(Day)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped {
- List<Ftile> forks
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Set<Swimlane> getSwimlanes()
+ {static} Set<Swimlane> mergeSwimlanes(List<Ftile>)
+ void drawU(UGraphic)
# FtileGeometry calculateDimensionFtile(StringBounder)
+ UTranslate getTranslateFor(Ftile,StringBounder)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandActivate2 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionIf {
- List<Branch> thens
- Branch elseBranch
- boolean endifCalled
- ISkinParam skinParam
- Url url
- Instruction parent
- Branch current
- LinkRendering topInlinkRendering
- LinkRendering outColor
- Swimlane swimlane
+ boolean containsBreak()
+ void add(Instruction)
+ Ftile createFtile(FtileFactory)
+ Instruction getParent()
+ boolean swithToElse2(LinkRendering,LinkRendering)
+ boolean elseIf(LinkRendering,Display,LinkRendering,LinkRendering,HColor)
+ void endif(LinkRendering)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ boolean addNote(Display,NotePosition,NoteType,Colors,Swimlane)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
+ Instruction getLast()
+ void outColor(LinkRendering)
}
class net.sourceforge.plantuml.classdiagram.command.CommandHideShow2 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(CucaDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.posimo.DecorInterfaceProvider {
- double radius
- double radius2
- LinkStyle style
+ void drawDecor(UGraphic,Point2D,double)
}
class net.sourceforge.plantuml.timingdiagram.command.CommandNoteLong {
+ String getPatternEnd()
# CommandExecutionResult executeNow(TimingDiagram,BlocLines)
- {static} IRegex getRegexConcat()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandNolink {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.svek.image.YTransformer {
- double alpha
+ Point2D getPoint2D(Point2D)
+ Point2D getReversePoint2D(Point2D)
+ double getAlpha()
}
abstract class net.sourceforge.plantuml.command.PSystemAbstractFactory {
+ {static} String EMPTY_DESCRIPTION
- DiagramType type
# PSystemError buildEmptyError(UmlSource,LineLocation,List<StringLocated>)
# PSystemError buildExecutionError(UmlSource,String,LineLocation,List<StringLocated>)
+ DiagramType getDiagramType()
}
class net.sourceforge.plantuml.tim.stdlib.VariableExists {
+ TFunctionSignature getSignature()
+ boolean canCover(int,Set<String>)
+ TValue executeReturnFunction(TContext,TMemory,LineLocation,List<TValue>,Map<String,TValue>)
}
class net.sourceforge.plantuml.wire.Block {
- Map<Block,Pos> children
- Display display
- Dimension2DDouble fixedDim
- ISkinParam skinParam
- List<String> left
- List<String> right
- List<String> top
- List<String> bottom
- double x
- double y
- MinMax minMax
- Block parent
- List<String> getPins(Position)
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- void drawPins(Position,UGraphic)
+ Block componentEnd()
+ Block addNewBlock(String,int,int)
+ Block createContainer(String)
+ void vspace(int)
+ void newColumn()
+ void addPin(Position,String)
}
class net.sourceforge.plantuml.wire.Block.Pos {
~ double x
~ double y
~ UGraphic move(UGraphic)
}
class net.sourceforge.plantuml.golem.Tile {
- {static} double SIZE
- int num
- UFont numberFont
- FontConfiguration fc
- Map<TileGeometry,TileArea> geometries
+ TileArea getArea(TileGeometry)
+ void drawU(UGraphic)
+ Dimension2D calculateDimension(StringBounder)
}
class net.sourceforge.plantuml.graphic.UnusedSpace {
- {static} int HALF_SIZE
- double meanX2
- double meanY2
- List<Point> points
- {static} Map<Object,UnusedSpace> cache
+ {static} UnusedSpace getUnusedSpace(UFont,char)
- double biggestDistSqFromPoint(Point)
- {static} boolean isPoint(BufferedImage,int,int)
+ double getCenterX()
+ double getCenterY()
}
class net.sourceforge.plantuml.graphic.UnusedSpace.Point {
- double x
- double y
+ double getDistSq(Point)
}
class net.sourceforge.plantuml.sudoku.GraphicsSudoku {
- ISudoku sudoku
- UFont numberFont
- UFont font
- int xOffset
- int yOffset
- int cellWidth
- int cellHeight
- int numberxOffset
- int numberyOffset
- int textTotalHeight
- int boldWidth
- int sudoHeight
- int sudoWidth
+ ImageData writeImageEps(OutputStream)
+ ImageData writeImageSvg(OutputStream)
+ ImageData writeImageLatex(OutputStream,FileFormat)
+ ImageData writeImagePng(OutputStream)
- void drawInternal(UGraphic)
}
class net.sourceforge.plantuml.json.WritingBuffer {
- Writer writer
- char[] buffer
- int fill
+ void write(int)
+ void write(char[],int,int)
+ void write(String,int,int)
+ void flush()
+ void close()
}
class net.sourceforge.plantuml.elk.proxy.core.options.HierarchyHandling {
+ {static} Object INCLUDE_CHILDREN
}
class net.sourceforge.plantuml.posimo.Label {
- double width
- double height
- double x
- double y
+ void setCenterX(double)
+ void setCenterY(double)
+ Point2D getPosition()
+ Dimension2D getSize()
+ void setWidth(double)
+ void setHeight(double)
+ void setX(double)
+ void setY(double)
+ void moveSvek(double,double)
}
class net.sourceforge.plantuml.command.regex.Pattern2 {
- Pattern pattern
+ Matcher2 matcher(CharSequence)
+ String pattern()
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileMargedRight {
- Ftile tile
- double maxX
+ LinkRendering getInLinkRendering()
+ LinkRendering getOutLinkRendering()
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
# FtileGeometry calculateDimensionFtile(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.math.ScientificEquationSafe {
- ScientificEquation equation
- String formula
- ImageData dimSvg
+ {static} ScientificEquationSafe fromAsciiMath(String)
+ {static} ScientificEquationSafe fromLatex(String)
+ UImageSvg getSvg(double,Color,Color)
+ MutableImage getImage(Color,Color)
- void printTrace(Exception)
- TextBlockBackcolored getRollback()
+ ImageData export(OutputStream,FileFormatOption,float,Color,Color)
+ String getFormula()
}
class net.sourceforge.plantuml.api.NumberAnalyzed2 {
- {static} int SLIDING_WINDOW
- AtomicLong nb
- AtomicLong sum
- AtomicLong min
- AtomicLong max
- AtomicLong sumOfSquare
- AtomicLong sliddingSum
- String name
+ void reset()
+ void save(Preferences)
# String getSavedString()
# String longToString(AtomicLong)
+ {static} NumberAnalyzed2 load(String,Preferences)
+ String toString()
+ INumberAnalyzed getCopyImmutable()
+ void addValue(long)
+ void add(NumberAnalyzed2)
+ long getNb()
+ long getSum()
+ long getMin()
+ long getMax()
+ long getMean()
+ long getSliddingMean()
+ String getName()
}
abstract class net.sourceforge.plantuml.ScaleProtected {
~ {abstract}double getScaleInternal(double,double)
+ double getScale(double,double)
}
class net.sourceforge.plantuml.braille.DriverDotPathBraille {
+ void draw(UShape,double,double,ColorMapper,UParam,BrailleGrid)
}
class net.sourceforge.plantuml.png.PngFlashcoder {
- List<BufferedImage> flashcodes
+ BufferedImage processImage(BufferedImage,Color)
- BufferedImage addImage(BufferedImage,Color)
+ {static} int getHeight(List<BufferedImage>)
+ {static} int getWidth(List<BufferedImage>)
}
class net.sourceforge.plantuml.project.lang.ComplementFromTo {
+ IRegex toRegex(String)
+ Failable<TwoNames> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.argon2.algorithm.Finalize {
+ {static} void finalize(Instance,Argon2)
}
class net.sourceforge.plantuml.sequencediagram.Notes {
- List<Note> notes
+ void add(Note)
+ boolean dealWith(Participant)
+ Iterator<Note> iterator()
+ Note get(int)
+ List<Note> asList()
}
class net.sourceforge.plantuml.project.OpenClose {
- Collection<DayOfWeek> closedDayOfWeek
- Collection<Day> closedDays
- Collection<Day> openedDays
- Day calendar
+ int daysInWeek()
- boolean isThereSomeChangeAfter(Day)
- boolean isThereSomeChangeBefore(Day)
+ boolean isClosed(Day)
+ void close(DayOfWeek)
+ void close(Day)
+ void open(Day)
+ Day getCalendar()
+ void setCalendar(Day)
+ long getNext(long)
+ long getPrevious(long)
+ long getValueAt(long)
+ int getLoadAt(Day)
- int getLoatAtInternal(Day)
}
class net.sourceforge.plantuml.nwdiag.GridTextBlockSimple {
# NwArray data
# ISkinParam skinparam
# void drawGrid(UGraphic)
+ void drawU(UGraphic)
# double colWidth(StringBounder,int)
+ double lineHeight(StringBounder,int)
+ Dimension2D calculateDimension(StringBounder)
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
+ MinMax getMinMax(StringBounder)
+ void add(int,int,LinkedElement)
+ Footprint getFootprint(NwGroup)
}
class net.sourceforge.plantuml.picoweb.PicoWebServer {
- Socket connect
+ {static} void main(String[])
+ {static} void startServer(int,String)
+ {static} void serverLoop(ServerSocket)
+ void run()
- boolean handleGET(ReceivedHTTPRequest,BufferedOutputStream,FileFormat)
- void handleRenderRequest(ReceivedHTTPRequest,BufferedOutputStream)
+ void handleRenderRequest(RenderRequest,BufferedOutputStream)
- void sendDiagram(BufferedOutputStream,Diagram,FileFormatOption,String,ImageData,byte[])
- void sendError(Throwable,BufferedOutputStream)
- String httpReturnCode(int)
- void write(OutputStream,String)
}
class net.sourceforge.plantuml.tim.EaterTheme {
- String realName
- String name
- String from
- TContext context
+ void analyze(TContext,TMemory)
+ ReadLine getTheme()
+ String getName()
}
class net.sourceforge.plantuml.creole.legacy.PSystemCreole {
- List<String> lines
+ DiagramDescription getDescription()
+ void doCommandLine(String)
# UDrawable getRootDrawable(FileFormatOption)
}
class net.sourceforge.plantuml.project.lang.ComplementDayOfWeek {
+ IRegex toRegex(String)
+ Failable<DayOfWeek> getMe(GanttDiagram,RegexResult,String)
}
class net.sourceforge.plantuml.salt.DataSourceImpl {
- int i
- List<Terminated<String>> data
- void addInternal(String,Terminator)
+ Terminated<String> peek(int)
+ boolean hasNext()
+ Terminated<String> next()
+ void remove()
+ String toString()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryDiamond {
- boolean fill
- HColor backgroundColor
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandDelay {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(SequenceDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorGoto {
+ void draw(UShape)
+ UGraphic apply(UChange)
}
class net.sourceforge.plantuml.cucadiagram.Link {
- IEntity cl1
- IEntity cl2
- String port1
- String port2
- Display label
- int length
- String qualifier1
- String qualifier2
- String uid
- Display note
- Position notePosition
- Colors noteColors
- NoteLinkStrategy noteLinkStrategy
- boolean invis
- double weight
- String labeldistance
- String labelangle
- boolean constraint
- boolean inverted
- LinkArrow linkArrow
- boolean opale
- boolean horizontalSolitary
- String sametail
- VisibilityModifier visibilityModifier
- StyleBuilder styleBuilder
- Stereotype stereotype
- Url url
- UmlDiagramType umlType
- LinkConstraint linkConstraint
- LineLocation codeLine
+ StyleBuilder getStyleBuilder()
+ String idCommentForSvg()
+ UComment commentForSvg()
+ Link getInv()
+ void goNorank()
+ String getLabeldistance()
+ String getLabelangle()
+ String getUid()
+ boolean isInvis()
+ void setInvis(boolean)
+ boolean isBetween(IEntity,IEntity)
+ String toString()
+ IEntity getEntity1()
+ IEntity getEntity2()
+ EntityPort getEntityPort1(Bibliotekon)
+ EntityPort getEntityPort2(Bibliotekon)
+ LinkType getType()
- boolean isReallyGroup(IEntity)
+ LinkType getTypePatchCluster()
- LinkType getTypeSpecialForPrinting()
- boolean isLollipopInterfaceEye(IEntity)
+ Display getLabel()
+ int getLength()
+ void setLength(int)
+ String getQualifier1()
+ String getQualifier2()
+ double getWeight()
+ void setWeight(double)
+ Display getNote()
+ NoteLinkStrategy getNoteLinkStrategy()
+ Colors getNoteColors()
+ Position getNotePosition()
+ void addNote(Display,Position,Colors)
+ void addNoteFrom(Link,NoteLinkStrategy)
+ boolean isAutoLinkOfAGroup()
+ boolean containsType(LeafType)
+ boolean contains(IEntity)
+ IEntity getOther(IEntity)
+ double getMarginDecors1(StringBounder,UFont,ISkinSimple)
+ double getMarginDecors2(StringBounder,UFont,ISkinSimple)
- double getQualifierMargin(StringBounder,UFont,String,ISkinSimple)
+ boolean isConstraint()
+ void setConstraint(boolean)
+ void setOpale(boolean)
+ void setHorizontalSolitary(boolean)
+ boolean isHorizontalSolitary()
+ LinkArrow getLinkArrow()
+ void setLinkArrow(LinkArrow)
+ boolean isInverted()
+ boolean hasEntryPoint()
+ boolean hasTwoEntryPointsSameContainer()
+ Url getUrl()
+ void setUrl(Url)
+ boolean isHidden()
+ boolean sameConnections(Link)
+ boolean doesTouch(Link)
+ boolean isAutolink()
+ boolean isRemoved()
+ boolean hasUrl()
+ String getSametail()
+ void setSametail(String)
+ void setPortMembers(String,String)
+ VisibilityModifier getVisibilityModifier()
+ void setUmlDiagramType(UmlDiagramType)
+ UmlDiagramType getUmlDiagramType()
+ void setLinkConstraint(LinkConstraint)
+ LinkConstraint getLinkConstraint()
+ String getCodeLine()
+ void setCodeLine(LineLocation)
+ void setStereotype(Stereotype)
+ Stereotype getStereotype()
}
class net.sourceforge.plantuml.graphic.Text {
- String text
+ {static} Text TEXT_BS_BS_N
+ String getText()
+ boolean isNewline()
}
class net.sourceforge.plantuml.project.draw.TaskDrawSeparator {
- TimeScale timeScale
- double y
- Day min
- Day max
- String name
- StyleBuilder styleBuilder
- HColorSet colorSet
+ void drawTitle(UGraphic,LabelStrategy,double,double)
+ double getTitleWidth(StringBounder)
- StyleSignature getStyleSignature()
- Style getStyle()
- TextBlock getTitle()
- FontConfiguration getFontConfiguration()
+ void drawU(UGraphic)
+ FingerPrint getFingerPrint(StringBounder)
+ double getFullHeightTask(StringBounder)
- double getTextHeight(StringBounder)
+ double getY(StringBounder)
+ void pushMe(double)
+ TaskDraw getTrueRow()
+ void setColorsAndCompletion(CenterBorderColor,int,Url,Display)
+ Task getTask()
+ double getY(StringBounder,Direction)
+ FingerPrint getFingerPrintNote(StringBounder)
+ double getHeightMax(StringBounder)
+ double getX1(TaskAttribute)
+ double getX2(TaskAttribute)
}
class net.sourceforge.plantuml.ant.PlantUmlTask {
- String dir
- Option option
- List<FileSet> filesets
- List<FileList> filelists
- AtomicInteger nbFiles
- ExecutorService executorService
+ void addFileset(FileSet)
+ void addFilelist(FileList)
+ void execute()
- void eventuallyFailfast(File)
- File manageFileList(FileList)
- File manageFileSet(FileSet)
- boolean processingSingleFile(File)
- boolean doFile(File,SourceFileReader)
- void myLog(String)
- File processingSingleDirectory(File)
- boolean fileToProcess(String)
+ void setDir(String)
+ void setOutput(String)
+ void setCharset(String)
+ void setConfig(String)
+ void setKeepTmpFiles(String)
+ void setDebugSvek(String)
+ void setVerbose(String)
+ void setFormat(String)
+ void setGraphvizDot(String)
+ void setNbThread(String)
+ void setNbThreads(String)
+ void setFailFast(String)
+ void setFailFast2(String)
+ void setCheckOnly(String)
+ void setOverwrite(String)
+ void setFileSeparator(String)
+ void setHtmlStats(String)
+ void setXmlStats(String)
+ void setRealTimeStats(String)
+ void setEnableStats(String)
+ void setSplash(String)
}
interface net.sourceforge.plantuml.activitydiagram3.ftile.FtileOverpassing {
+ FtileGeometry getOverpassDimension(StringBounder)
}
class net.sourceforge.plantuml.error.PSystemErrorV2 {
}
class net.sourceforge.plantuml.json.JsonNumber {
- String string
+ String toString()
~ void write(JsonWriter)
+ boolean isNumber()
+ int asInt()
+ long asLong()
+ float asFloat()
+ double asDouble()
+ int hashCode()
+ boolean equals(Object)
}
class net.sourceforge.plantuml.sequencediagram.Newpage {
- Display title
+ Display getTitle()
+ boolean dealWith(Participant)
}
class net.sourceforge.plantuml.preproc2.Preprocessor {
- ReadLine source
+ StringLocated readLine()
+ void close()
}
class net.sourceforge.plantuml.graphic.USymbolFrame {
+ SkinParameter getSkinParameter()
- void drawFrame(UGraphic,double,double,Dimension2D,boolean,double)
- double getYpos(Dimension2D)
- Margin getMargin()
+ TextBlock asSmall(TextBlock,TextBlock,TextBlock,SymbolContext,HorizontalAlignment)
+ TextBlock asBig(TextBlock,HorizontalAlignment,TextBlock,double,double,SymbolContext,HorizontalAlignment)
}
interface net.sourceforge.plantuml.eps.PostScriptCommand {
~ String toPostString()
}
class net.sourceforge.plantuml.timingdiagram.command.CommandBinary {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.cucadiagram.dot.CucaDiagramTxtMaker {
- FileFormat fileFormat
- UGraphicTxt globalUg
- PortionShower portionShower
- {static} double getXPixelPerChar()
- {static} double getYPixelPerChar()
- boolean showMember(IEntity)
- void printClass(IEntity,UGraphicTxt)
+ List<SFile> createFiles(SFile)
- int getHeight(IEntity)
- int getWidth(IEntity)
+ void createFiles(OutputStream,int)
}
class net.sourceforge.plantuml.creole.StripeStyle {
- StripeStyleType type
- int order
- char style
+ StripeStyleType getType()
+ Atom getHeader(FontConfiguration,CreoleContext)
+ int getOrder()
+ char getStyle()
}
class net.sourceforge.plantuml.command.CommandHideUnlinked {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(UmlDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.zopfli.SymbolStats {
- {static} double INV_LOG_2
- int[] litLens
- int[] dists
~ long[] lLiterals
~ long[] lLengths
~ long[] dSymbols
~ void getFreqs(LzStore)
~ void copy(SymbolStats)
~ void calculate()
~ void calculateLens()
~ void calculateDists()
~ void alloy(SymbolStats)
~ int randomizeFreqs(int)
~ long minCost()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityFactoryTriangle {
- HColor backgroundColor
- int xWing
- int yAperture
+ UDrawable createUDrawable(Point2D,double,Side)
+ UDrawable createUDrawable(Point2D,Point2D,Point2D,Side)
}
class net.sourceforge.plantuml.tim.EaterDumpMemory {
+ void analyze(TContext,TMemory)
}
interface net.sourceforge.plantuml.cucadiagram.GroupHierarchy {
+ IGroup getRootGroup()
+ SuperGroup getRootSuperGroup()
+ Collection<IGroup> getChildrenGroups(IGroup)
+ Set<SuperGroup> getAllSuperGroups()
+ boolean isEmpty(IGroup)
}
class net.sourceforge.plantuml.swing.MainWindow2 {
- {static} Preferences prefs
- {static} String KEY_DIR
- {static} String KEY_PATTERN
- JList jList1
- JScrollPane scrollPane
- JButton changeDirButton
- JTextField extensions
- int period
- List<SimpleLine2> currentDirectoryListing2
- Set<ImageWindow2> openWindows2
- Option option
- DirWatcher2 dirWatcher
- String getExtensions()
- String getDefaultFileExtensions()
- void changeExtensions(String)
- String getRegexpPattern(String)
- {static} File getDirectory(File)
- void startTimer()
- void displayDialogChangeDir()
- void changeDir(File)
- void doubleClick(SimpleLine2,ListModel,int)
- void tick()
- boolean refreshDir()
- void removeAllThatUseThisFile(File)
- void mayRefreshImageWindow(File)
+ void closing(ImageWindow2)
+ List<SimpleLine2> getCurrentDirectoryListing2()
}
class net.sourceforge.plantuml.posimo.MargedBlock {
- Block block
- IEntityImageBlock imageBlock
- double marginDecorator
- Dimension2D imageDimension
- {static} int uid
+ Block getBlock()
+ double getMarginDecorator()
+ IEntityImageBlock getImageBlock()
+ Positionable getImagePosition()
}
class net.sourceforge.plantuml.svek.extremity.ExtremityArrow {
- UPolygon polygon
- ULine line
- Point2D contact
+ Point2D somePoint()
- int buildPolygon()
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.cucadiagram.entity.EntityImpl {
- EntityFactory entityFactory
- Code code
- Ident ident
- Url url
- Bodier bodier
- String uid
- Display display
- DisplayPositionned legend
- LeafType leafType
- Stereotype stereotype
- String generic
- IGroup parentContainer
- boolean top
- Code namespace
- GroupType groupType
- boolean nearDecoration
- Collection<String> portShortNames
- int xposition
- IEntityImage svekImage
- USymbol symbol
- int rawLayout
- char concurrentSeparator
- LineLocation codeLine
- Set<Stereotag> tags
- int layer
- Neighborhood neighborhood
- Map<String,Display> tips
- Colors colors
- VisibilityModifier visibility
- boolean intricated
- IGroup originalGroup
- boolean together
+ void addStereotag(Stereotag)
+ Set<Stereotag> stereotags()
+ boolean isTop()
+ void setTop(boolean)
+ void setContainer(IGroup)
+ LeafType getLeafType()
+ boolean muteToType(LeafType,USymbol)
+ Code getCode()
+ String getCodeGetName()
+ Ident getIdent()
+ Display getDisplay()
+ void setDisplay(Display)
+ String getUid()
+ Stereotype getStereotype()
+ void setStereotype(Stereotype)
+ IGroup getParentContainer()
+ String toString()
+ Url getUrl99()
+ boolean hasUrl()
+ void addUrl(Url)
+ boolean hasNearDecoration()
+ void setNearDecoration(boolean)
+ int getXposition()
+ void setXposition(int)
+ IEntityImage getSvekImage()
+ void setSvekImage(IEntityImage)
+ void setGeneric(String)
+ String getGeneric()
+ Bodier getBodier()
+ EntityPosition getEntityPosition()
- void checkGroup()
- void checkNotGroup()
+ boolean containsLeafRecurse(ILeaf)
+ Collection<ILeaf> getLeafsDirect()
+ Collection<IGroup> getChildren()
+ void moveEntitiesTo(IGroup)
- void moveEntitiesTo1972(IGroup)
+ int size()
+ GroupType getGroupType()
+ Code getNamespace()
+ PackageStyle getPackageStyle()
+ boolean isGroup()
+ void overrideImage(IEntityImage,LeafType)
~ void muteToGroup(Code,GroupType,IGroup)
+ USymbol getUSymbol()
+ void setUSymbol(USymbol)
+ SingleStrategy getSingleStrategy()
+ boolean isHidden()
- boolean isHiddenInternal()
+ boolean isRemoved()
- boolean isRemovedInternal()
+ boolean isAloneAndUnlinked()
+ int getHectorLayer()
+ void setHectorLayer(int)
- FontParam getTitleFontParam()
+ FontConfiguration getFontConfigurationForTitle(ISkinParam)
+ int getRawLayout()
+ char getConcurrentSeparator()
+ void setConcurrentSeparator(char)
+ void setNeighborhood(Neighborhood)
+ Neighborhood getNeighborhood()
+ void putTip(String,Display)
+ Map<String,Display> getTips()
+ Colors getColors(ISkinParam)
+ void setColors(Colors)
+ void setSpecificColorTOBEREMOVED(ColorType,HColor)
+ Collection<String> getPortShortNames()
+ void addPortShortName(String)
+ void setVisibilityModifier(VisibilityModifier)
+ VisibilityModifier getVisibilityModifier()
+ void setLegend(DisplayPositionned)
+ DisplayPositionned getLegend()
+ void setIntricated(boolean)
+ void setOriginalGroup(IGroup)
+ IGroup getOriginalGroup()
+ void setThisIsTogether()
+ String getCodeLine()
+ void setCodeLine(LineLocation)
}
class net.sourceforge.plantuml.ugraphic.color.ColorChangerMonochrome {
+ Color getChangedColor(Color)
}
class net.sourceforge.plantuml.cucadiagram.Magma {
- CucaDiagram diagram
- List<ILeaf> standalones
- LinkType linkType
+ void putInSquare()
+ IGroup getContainer()
+ boolean isComplete()
- int squareSize()
- ILeaf getTopLeft()
- ILeaf getBottomLeft()
- ILeaf getTopRight()
+ String toString()
+ void linkToDown(Magma)
+ void linkToRight(Magma)
}
class net.sourceforge.plantuml.project.time.WeekNumberStrategy {
- DayOfWeek firstDayOfWeek
- int minimalDaysInFirstWeek
+ int getFirstDayOfWeekAsLegacyInt()
+ int getMinimalDaysInFirstWeek()
+ DayOfWeek getFirstDayOfWeek()
}
class net.sourceforge.plantuml.swing.SpriteWindow {
- JTextArea area
- String last
- void startTimer()
- void tick()
- void encode()
- void encodeColor(BufferedImage,StringBuilder)
- void encodeCompressed(BufferedImage,SpriteGrayLevel,StringBuilder)
- void encode(BufferedImage,SpriteGrayLevel,StringBuilder)
- void printData(String)
+ {static} BufferedImage getClipboard()
+ {static} void main(String[])
}
class net.sourceforge.plantuml.timingdiagram.command.CommandChangeStateByTime {
- {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(TimingDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.Diamond {
+ {static} double diamondHalfSize
+ {static} UPolygon asPolygon(double)
+ {static} UPolygon asPolygon(double,double,double)
+ {static} Stencil asStencil(TextBlock)
+ {static} UPolygon asPolygonSquare(boolean,double,double)
}
class net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteRight {
- Tile tile
- AbstractMessage message
- Rose skin
- ISkinParam skinParam
- LivingSpace livingSpace
- Note noteOnMessage
+ Event getEvent()
- boolean isCreate()
+ double getContactPointRelative()
# void callbackY_internal(double)
- Component getComponent(StringBounder)
- Real getNotePosition(StringBounder)
+ void drawU(UGraphic)
+ double getPreferredHeight()
+ void addConstraints()
+ Real getMinX()
+ Real getMaxX()
}
class net.sourceforge.plantuml.code.NoPlantumlCompressionException {
}
class net.sourceforge.plantuml.board.PostIt {
- BNode node
- ISkinParam skinParam
+ {static} double getHeight()
+ {static} double getWidth()
+ TextBlock getCard()
}
class net.sourceforge.plantuml.graphic.color.ColorParser {
- {static} String COLOR_REGEXP
- {static} String PART2
- {static} String COLORS_REGEXP
- RegexLeaf regex
- String name
- ColorType mainType
+ Colors getColor(ThemeStyle,RegexResult,HColorSet)
+ {static} ColorParser simpleColor(ColorType)
+ {static} ColorParser simpleColor(ColorType,String)
+ {static} ColorParser mandatoryColor(ColorType)
+ {static} ColorParser simpleColor(String,ColorType)
+ {static} RegexLeaf exp1()
+ {static} RegexLeaf exp2()
+ {static} RegexLeaf exp3()
+ {static} RegexLeaf exp4()
+ {static} RegexLeaf exp6()
+ {static} RegexLeaf exp7()
+ RegexLeaf getRegex()
}
class net.sourceforge.plantuml.api.TimeoutExecutor {
- long ms
+ boolean executeNow(MyRunnable)
}
class net.sourceforge.plantuml.api.TimeoutExecutor.MyThread {
- MyRunnable task
- AtomicBoolean done
+ void run()
}
class net.sourceforge.plantuml.creole.command.CommandCreoleExposantChange {
- FontPosition position
+ {static} Command create(FontPosition)
+ int matchingSize(String)
+ String executeAndGetRemaining(String,StripeSimple)
}
class net.sourceforge.plantuml.project.lang.SentenceIsColored {
+ CommandExecutionResult execute(GanttDiagram,Object,Object)
}
class net.sourceforge.plantuml.braille.BrailleDrawer {
- BrailleGrid grid
- double step
- double spotSize
+ void drawU(UGraphic)
- void drawCircle(UGraphic,int,int)
}
class net.sourceforge.plantuml.argon2.algorithm.Initialize {
+ {static} void initialize(Instance,Argon2)
- {static} void fillFirstBlocks(Instance,byte[])
- {static} byte[] getInitialHashLong(byte[],byte[])
}
class net.sourceforge.plantuml.bpm.FootPrint {
- Set<Coord> cells
}
class net.sourceforge.plantuml.ugraphic.visio.VisioRectangle {
- int id
- double x
- double y
- double width
- double height
+ {static} VisioRectangle createInches(int,double,double,double,double)
+ VisioShape yReverse(double)
- {static} double toInches(double)
+ void print(OutputStream)
- void out(OutputStream,String)
}
class net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow {
- LivingParticipantBox p
- MessageExoType type
- boolean shortArrow
- ArrowConfiguration arrowConfiguration
~ double getActualWidth(StringBounder,double)
- double getLeftStartInternal(StringBounder)
- double getRightEndInternal(StringBounder,double)
+ double getPreferredHeight(StringBounder)
+ double getStartingX(StringBounder)
+ int getDirection(StringBounder)
+ double getPreferredWidth(StringBounder)
# void drawInternalU(UGraphic,double,Context2D)
- Dimension2D getActualDimension(StringBounder,double)
+ double getArrowYStartLevel(StringBounder)
+ double getArrowYEndLevel(StringBounder)
+ double getMaxX(StringBounder)
+ double getMinX(StringBounder)
+ String toString(StringBounder)
+ MessageExoType getType()
+ LivingParticipantBox getParticipantAt(StringBounder,NotePosition)
+ double getActualWidth(StringBounder)
}
class net.sourceforge.plantuml.logo.TinyJavaLogo {
- LogoScanner scanner
- TurtleGraphicsPane turtleGraphicsPane
- Map<String,String> dictionary
- HColor penColor
- void message(String)
- void error(String)
- void parseCommandBlock(int)
+ void doCommandLine(String)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.FtileMinWidthCentered {
- double minWidth
- FtileGeometry calculateDimensionInternal
+ void drawU(UGraphic)
+ FtileGeometry calculateDimension(StringBounder)
- FtileGeometry calculateDimensionSlow(StringBounder)
- Dimension2D getDimensionInternal(StringBounder)
- UTranslate getUTranslateInternal(StringBounder)
+ UTranslate getTranslateFor(Ftile,StringBounder)
- double getPoint2(double,StringBounder)
}
class net.sourceforge.plantuml.svek.image.RotatedEllipse {
- UEllipse ellipse
- double beta
+ double getA()
+ double getB()
+ double getBeta()
+ Point2D getPoint(double)
+ double getOtherTheta(double)
- double other(double[],double)
}
class net.sourceforge.plantuml.ugraphic.color.ColorMapperTransparentWrapper {
- ColorMapper mapper
+ Color toColor(HColor)
}
class net.sourceforge.plantuml.flowdiagram.FlowDiagramFactory {
+ FlowDiagram createEmptyDiagram(UmlSource,ISkinSimple)
# List<Command> createCommands()
}
class net.sourceforge.plantuml.mindmap.Tetris {
- StripeFrontier frontier
- List<SymetricalTeePositioned> elements
- double minY
- double maxY
- String name
+ String toString()
+ void balance()
+ double getHeight()
+ double getWidth()
+ void add(SymetricalTee)
- void addInternal(SymetricalTeePositioned)
+ List<SymetricalTeePositioned> getElements()
}
class net.sourceforge.plantuml.activitydiagram3.InstructionRepeat {
- InstructionList repeatList
- Instruction parent
- LinkRendering nextLinkRenderer
- Swimlane swimlane
- Swimlane swimlaneOut
- BoxStyle boxStyle
- boolean killed
- BoxStyle boxStyleIn
- Display backward
- LinkRendering incoming1
- LinkRendering incoming2
- List<PositionedNote> backwardNotes
- Display test
- Display yes
- Display out
- Display startLabel
- boolean testCalled
- LinkRendering endRepeatLinkRendering
- Colors colors
+ boolean containsBreak()
- boolean isLastOfTheParent()
+ void setBackward(Display,Swimlane,BoxStyle,LinkRendering,LinkRendering)
+ boolean hasBackward()
+ void add(Instruction)
+ Ftile createFtile(FtileFactory)
- Ftile getBackward(FtileFactory)
+ Instruction getParent()
+ void setTest(Display,Display,Display,LinkRendering,LinkRendering,Swimlane)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ boolean addNote(Display,NotePosition,NoteType,Colors,Swimlane)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
}
class net.sourceforge.plantuml.ScaleSimple {
- double scale
+ double getScaleInternal(double,double)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseLine {
- HColor color
- boolean continueLine
- UStroke stroke
# void drawInternalU(UGraphic,Area)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
}
interface net.sourceforge.plantuml.creole.SheetBuilder {
+ Sheet createSheet(Display)
}
class net.sourceforge.plantuml.graphic.SvgAttributes {
- Map<String,String> attributes
+ Map<String,String> attributes()
+ SvgAttributes add(String,String)
+ SvgAttributes add(SvgAttributes)
}
class net.sourceforge.plantuml.graphic.TextBlockRaw {
- List<Line> lines2
- List<String> strings
- FontConfiguration fontConfiguration
- List<Line> getLines(StringBounder)
+ Dimension2D calculateDimension(StringBounder)
# Dimension2D getTextDimension(StringBounder)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.dedication.PSystemDedication {
- BufferedImage img
# UDrawable getRootDrawable(FileFormatOption)
+ {static} BufferedImage getBufferedImage(InputStream)
+ DiagramDescription getDescription()
}
interface net.sourceforge.plantuml.creole.rosetta.URosetta {
}
class net.sourceforge.plantuml.creole.legacy.AtomText {
- FontConfiguration fontConfiguration
- String text
- DelayedDouble marginLeft
- DelayedDouble marginRight
- Url url
- boolean manageSpecialChars
- TextBlock visibility
- AtomText withText(String)
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
- double getWidth(StringBounder,String)
- String tabString()
- double getDescent(StringBounder)
- double getTabSize(StringBounder)
- Collection<String> splitted()
+ List<Atom> getSplitted(StringBounder,LineBreakStrategy)
+ List<Atom> splitInTwo(StringBounder,double)
- boolean isOfWord(char)
+ String getText()
+ double getStartingAltitude(StringBounder)
+ String toString()
+ FontConfiguration getFontConfiguration()
}
interface net.sourceforge.plantuml.creole.legacy.AtomText.DelayedDouble {
+ double getDouble(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation {
- List<UTranslate> translations
+ {static} WormMutation create(Worm,double)
- {static} WormMutation createFromLongSignature(String,double)
- WormMutation reverse()
+ UTranslate getLast()
+ UTranslate getFirst()
+ int size()
- {static} String getDefinition(String)
- {static} UTranslate translation(int,double)
+ UTranslate getTextTranslate(int)
+ boolean isDxNegative()
+ Worm mute(Worm)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation.MinMax {
- double min
- double max
- void append(double)
- double getExtreme()
}
interface net.sourceforge.plantuml.ugraphic.UBackground {
+ HColor getBackColor()
}
class net.sourceforge.plantuml.salt.element.ElementMenuPopup {
- Collection<ElementMenuEntry> entries
- UFont font
- ISkinSimple spriteContainer
+ void addEntry(String)
+ Dimension2D getPreferredDimension(StringBounder,double,double)
+ void drawU(UGraphic,int,Dimension2D)
}
class net.sourceforge.plantuml.eggs.PSystemColors {
- double rectangleHeight
- double rectangleWidth
- HColorSet colors
- String paletteCentralColor
- double size
# UDrawable getRootDrawable(FileFormatOption)
+ DiagramDescription getDescription()
+ void drawU(UGraphic)
- void drawPalette(UGraphic)
- Point2D centerHexa(int,int)
- double getWidth()
- void drawOneHexa(UGraphic,String,int,int,UPolygon)
- String findShortest(StringBounder,UFont,String)
- UGraphic applyColor(UGraphic,HColor)
- Point2D corner(int)
- UPolygon getHexa()
- List<String> getColorsCloseTo(String)
- boolean containsCaseInsensitive(Collection<String>,String)
- Comparator<String> closeComparator(String)
- void drawFull(UGraphic)
- TextBlock getTextName(UFont,String,HColorSimple)
- UGraphic getPositioned(UGraphic,int,int)
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandSwimlane2 {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithOneLink {
- Rainbow arrowColor
+ Ftile addLinks(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithOneLink.ConnectionVerticalTop {
- Branch branch
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
}
class net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithOneLink.ConnectionVerticalBottom {
+ void drawU(UGraphic)
- Point2D getP1(StringBounder)
- Point2D getP2(StringBounder)
}
interface net.sourceforge.plantuml.sequencediagram.graphic.FreeYStrategy {
~ double peekPosition(Event,ParticipantRange)
~ void addElement(Event,ParticipantRange,double)
}
class net.sourceforge.plantuml.activitydiagram3.InstructionSplit {
- List<InstructionList> splits
- Instruction parent
- LinkRendering inlinkRendering
- Swimlane swimlaneIn
- Swimlane swimlaneOut
+ boolean containsBreak()
- InstructionList getLast()
+ void add(Instruction)
+ Ftile createFtile(FtileFactory)
+ Instruction getParent()
+ void splitAgain(LinkRendering)
+ void endSplit(LinkRendering,Swimlane)
+ boolean kill()
+ LinkRendering getInLinkRendering()
+ boolean addNote(Display,NotePosition,NoteType,Colors,Swimlane)
+ Set<Swimlane> getSwimlanes()
+ Swimlane getSwimlaneIn()
+ Swimlane getSwimlaneOut()
}
class net.sourceforge.plantuml.stats.PSystemStatsFactory {
# AbstractPSystem executeLine(UmlSource,String)
}
class net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal {
- int cornersize
- SymbolContext symbolContext
+ double getPreferredWidth(StringBounder)
+ double getPreferredHeight(StringBounder)
+ double getPaddingX()
+ double getPaddingY()
# void drawInternalU(UGraphic,Area)
}
class net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy {
- ParticipantBox participant
- Component comp
# void drawInternalU(UGraphic,double,Context2D)
+ double getPreferredHeight(StringBounder)
+ double getPreferredWidth(StringBounder)
+ double getStartingX(StringBounder)
}
class net.sourceforge.plantuml.svek.extremity.ExtremityCircle {
- {static} double radius
- Point2D dest
- boolean fill
- HColor backgroundColor
+ Point2D somePoint()
+ {static} UDrawable create(Point2D,boolean,double,HColor)
+ void drawU(UGraphic)
}
class net.sourceforge.plantuml.activitydiagram.command.CommandInnerConcurrent {
~ {static} IRegex getRegexConcat()
# CommandExecutionResult executeArg(ActivityDiagram,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.stats.StatsLineImpl {
- Map<StatsColumn,Object> data
+ Object getValue(StatsColumn)
+ Collection<StatsColumn> getColumnHeaders()
}
class net.sourceforge.plantuml.svek.EntityImageProtected {
- IEntityImage orig
- double border
- Bibliotekon bibliotekon
- Neighborhood neighborhood
+ Rectangle2D getInnerPosition(String,StringBounder,InnerStrategy)
+ boolean isHidden()
+ HColor getBackcolor()
+ Dimension2D calculateDimension(StringBounder)
+ void drawU(UGraphic)
+ void drawUntranslated(UGraphic,double,double)
+ ShapeType getShapeType()
+ Margins getShield(StringBounder)
+ double getOverscanX(StringBounder)
}
class net.sourceforge.plantuml.sequencediagram.command.CommandReferenceMultilinesOverSeveral {
+ String getPatternEnd()
+ CommandExecutionResult execute(SequenceDiagram,BlocLines)
}
class net.sourceforge.plantuml.StringLocated {
- String s
- LineLocation location
- String preprocessorError
- StringLocated trimmed
- long fox
- TLineType type
+ String toString()
+ StringLocated append(String)
+ StringLocated mergeEndBackslash(StringLocated)
+ StringLocated withErrorPreprocessor(String)
+ StringLocated substring(int,int)
+ StringLocated substring(int)
+ StringLocated getTrimmed()
+ StringLocated removeInnerComment()
- String removeSpecialInnerComment(String)
+ String getString()
+ LineLocation getLocation()
+ String getPreprocessorError()
+ long getFoxSignature()
+ TLineType getType()
}
class net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored {
- Segment segment
- SymbolContext colors
- boolean shadowing
- double pos1Initial
+ HColor getSpecificBackColor()
+ HColor getSpecificLineColor()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
+ void drawU(UGraphic,Component,int)
+ Collection<SegmentColored> cutSegmentIfNeed(Collection<Segment>)
+ double getPos1Initial()
+ SegmentColored merge(SegmentColored)
+ Segment getSegment()
}
class net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored.Iterator2 {
- Iterator<Segment> it
- double pos1Initial
+ boolean hasNext()
+ SegmentColored next()
+ void remove()
}
class net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored.Coll2 {
- Collection<Segment> col
- double pos1Initial
+ Iterator<SegmentColored> iterator()
+ int size()
}
class net.sourceforge.plantuml.activitydiagram3.command.CommandRepeat3 {
~ {static} IRegex getRegexConcat()
- {static} ColorParser color()
# CommandExecutionResult executeArg(ActivityDiagram3,LineLocation,RegexResult)
}
class net.sourceforge.plantuml.command.regex.RegexLeaf {
- {static} RegexLeaf END
- {static} RegexLeaf START
- String pattern
- String name
- int count
- {static} Set<String> UNKNOWN
- {static} Pattern p1
- {static} Pattern p2
- {static} Pattern p3
+ {static} RegexLeaf spaceZeroOrMore()
+ {static} RegexLeaf spaceOneOrMore()
+ {static} RegexLeaf start()
+ {static} RegexLeaf end()
+ String toString()
+ String getName()
+ String getPattern()
+ int count()
+ Map<String,RegexPartialMatch> createPartialMatch(Iterator<String>)
+ boolean match(StringLocated)
+ RegexResult matcher(String)
- {static} long getSignatureP3(String)
+ long getFoxSignatureNone()
+ long getFoxSignature()
}


net.sourceforge.plantuml.core.Diagram <|.. net.sourceforge.plantuml.TitledDiagram
net.sourceforge.plantuml.Annotated <|.. net.sourceforge.plantuml.TitledDiagram
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.TitledDiagram
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandFooter
net.sourceforge.plantuml.graphic.UGraphicDelegator <|-- net.sourceforge.plantuml.ugraphic.AbstractUGraphicHorizontalLine
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandWhileEnd3
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondSquare
net.sourceforge.plantuml.stats.api.Stats <|.. net.sourceforge.plantuml.stats.StatsImpl
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.nwdiag.CommandElement
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.visio.DriverTextVdx
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.donors.PSystemSkinparameterList
net.sourceforge.plantuml.bpm.ConnectorPuzzle <|.. net.sourceforge.plantuml.bpm.AbstractConnectorPuzzle
net.sourceforge.plantuml.sequencediagram.graphic.Pushable <|.. net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBox
net.sourceforge.plantuml.creole.Stencil <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale
net.sourceforge.plantuml.style.Styleable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNoteOpale
net.sourceforge.plantuml.timingdiagram.graphic.PDrawing <|.. net.sourceforge.plantuml.timingdiagram.graphic.Histogram
net.sourceforge.plantuml.real.Real <|.. net.sourceforge.plantuml.real.RealMoveable
net.sourceforge.plantuml.real.AbstractReal <|-- net.sourceforge.plantuml.real.RealMoveable
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementDates
net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactoryDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorIf
net.sourceforge.plantuml.activitydiagram3.ftile.Connection <|.. net.sourceforge.plantuml.activitydiagram3.ftile.AbstractConnection
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWithNotes
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.eggs.PSystemRIPFactory
net.sourceforge.plantuml.command.CommandMultilines <|-- net.sourceforge.plantuml.project.command.CommandNoteBottom
net.sourceforge.plantuml.SkinParamDelegator <|-- net.sourceforge.plantuml.SkinParamSameClassWidth
net.sourceforge.plantuml.eps.PostScriptCommand <|.. net.sourceforge.plantuml.eps.PostScriptCommandRaw
net.sourceforge.plantuml.style.AutomaticCounter <|.. net.sourceforge.plantuml.style.StyleBuilder
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sprite.CommandListSprite
net.sourceforge.plantuml.salt.element.Element <|.. net.sourceforge.plantuml.salt.element.ElementDroplist
net.sourceforge.plantuml.salt.element.AbstractElementText <|-- net.sourceforge.plantuml.salt.element.ElementDroplist
net.sourceforge.plantuml.ugraphic.color.HColorSet +.. net.sourceforge.plantuml.ugraphic.color.HColorSet.Gradient
net.sourceforge.plantuml.ugraphic.color.HColorSet +.. net.sourceforge.plantuml.ugraphic.color.HColorSet.Automatic
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.project.command.CommandPrintBetween
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionStart
net.sourceforge.plantuml.activitydiagram3.MonoSwimable <|-- net.sourceforge.plantuml.activitydiagram3.InstructionStart
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentencePausesDate
net.sourceforge.plantuml.sequencediagram.graphic.Arrow <|-- net.sourceforge.plantuml.sequencediagram.graphic.MessageArrow
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AtomTable
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.AtomTable
net.sourceforge.plantuml.creole.atom.AtomTable +.. net.sourceforge.plantuml.creole.atom.AtomTable.Line
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.salt.PSystemSaltFactory2
java.awt.geom.Dimension2D <|-- net.sourceforge.plantuml.Dimension2DDouble
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.mindmap.CommandMindMapOrgmodeMultiline
net.sourceforge.plantuml.svek.TextBlockBackcolored <|.. net.sourceforge.plantuml.svek.DecorateEntityImage3
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.DecorateEntityImage3
net.sourceforge.plantuml.sequencediagram.InGroupable <|.. net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes
net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.NotesBoxes
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverLineTikz
net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex <|-- net.sourceforge.plantuml.salt.factory.ElementFactoryTab
net.sourceforge.plantuml.sequencediagram.Event <|.. net.sourceforge.plantuml.sequencediagram.Grouping
net.sourceforge.plantuml.style.WithStyle <|.. net.sourceforge.plantuml.sequencediagram.Grouping
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.svek.Control
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.Control
net.sourceforge.plantuml.project.core.Moment <|.. net.sourceforge.plantuml.project.core.MomentImpl
net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty <|-- net.sourceforge.plantuml.elk.proxy.graph.ElkEdge
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleStyle
net.sourceforge.plantuml.creole.command.CommandCreoleCache <|-- net.sourceforge.plantuml.creole.command.CommandCreoleStyle
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandBoxStart
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandNote3
net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileDecorateWelding
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandRankDir
net.sourceforge.plantuml.ugraphic.color.Exception <|-- net.sourceforge.plantuml.ugraphic.color.NoSuchColorException
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.g2d.DriverImageG2d
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.MiddleCircle
net.sourceforge.plantuml.ugraphic.UChange <|.. net.sourceforge.plantuml.ugraphic.UStroke
net.sourceforge.plantuml.command.PSystemBasicFactory <|-- net.sourceforge.plantuml.math.PSystemMathFactory
net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecoratePointOut
net.sourceforge.plantuml.sequencediagram.graphic.LifeLine +.. net.sourceforge.plantuml.sequencediagram.graphic.LifeLine.Variation
net.sourceforge.plantuml.SvgCharSizeHack <|-- net.sourceforge.plantuml.SpriteContainer
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObjectMultilines
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityCircleCrowfoot
net.sourceforge.plantuml.command.Command <|.. net.sourceforge.plantuml.command.CommandMultilines3
net.sourceforge.plantuml.svek.image.AbstractEntityImageBorder <|-- net.sourceforge.plantuml.svek.image.EntityImagePort
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractParallelFtilesBuilder <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderMerge
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderMerge +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderMerge.ConnectionHorizontalThenVertical
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderMerge.ConnectionHorizontalThenVertical
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderMerge +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderMerge.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderMerge.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderMerge.ConnectionIn
net.sourceforge.plantuml.creole.Stencil <|.. net.sourceforge.plantuml.svek.image.EntityImageMap
net.sourceforge.plantuml.svek.WithPorts <|.. net.sourceforge.plantuml.svek.image.EntityImageMap
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageMap
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementWithColorLink
net.sourceforge.plantuml.cucadiagram.Iterable <|.. net.sourceforge.plantuml.cucadiagram.Display
net.sourceforge.plantuml.ugraphic.AbstractPlacementStrategy <|-- net.sourceforge.plantuml.ugraphic.PlacementStrategyY1Y2Left
net.sourceforge.plantuml.graphic.FontChange <|.. net.sourceforge.plantuml.graphic.ColorChange
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterAssert
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.svek.CucaDiagramFileMakerSvek2InternalImage
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.CucaDiagramFileMakerSvek2InternalImage
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.help.CommandHelpType
net.sourceforge.plantuml.zopfli.Cookie +.. net.sourceforge.plantuml.zopfli.Cookie.Node
net.sourceforge.plantuml.command.PSystemBasicFactory <|-- net.sourceforge.plantuml.creole.legacy.PSystemCreoleFactory
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.wbs.WBSDiagramFactory
java.util.Comparator <|.. net.sourceforge.plantuml.salt.element.LeftFirst
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileGroup
net.sourceforge.plantuml.sequencediagram.InGroupable <|.. net.sourceforge.plantuml.sequencediagram.graphic.LivingParticipantBox
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverCenteredCharacterTikz
net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementHeader
net.sourceforge.plantuml.eps.EpsGraphics +.. net.sourceforge.plantuml.eps.EpsGraphics.UrlArea
net.sourceforge.plantuml.cucadiagram.dot.ProcessRunner +.. net.sourceforge.plantuml.cucadiagram.dot.ProcessRunner.MainThread
net.sourceforge.plantuml.cucadiagram.dot.MyRunnable <|.. net.sourceforge.plantuml.cucadiagram.dot.ProcessRunner.MainThread
net.sourceforge.plantuml.cucadiagram.dot.ProcessRunner +.. net.sourceforge.plantuml.cucadiagram.dot.ProcessRunner.ThreadStream
net.sourceforge.plantuml.cucadiagram.dot.Thread <|-- net.sourceforge.plantuml.cucadiagram.dot.ProcessRunner.ThreadStream
net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDivider
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.compositediagram.CompositeDiagramFactory
net.sourceforge.plantuml.project.lang.Sentence <|.. net.sourceforge.plantuml.project.lang.SentenceAndAnd
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityExtends
net.sourceforge.plantuml.SkinParamDelegator <|-- net.sourceforge.plantuml.SkinParamBackcolored
net.sourceforge.plantuml.style.Styleable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondInside
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondInside
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.wire.CommandGoto
net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator <|-- net.sourceforge.plantuml.tim.iterator.CodeIteratorInnerComment
net.sourceforge.plantuml.command.PSystemAbstractFactory <|-- net.sourceforge.plantuml.command.PSystemCommandFactory
net.sourceforge.plantuml.command.PSystemCommandFactory +.. net.sourceforge.plantuml.command.PSystemCommandFactory.Step
net.sourceforge.plantuml.command.PSystemBasicFactory <|-- net.sourceforge.plantuml.salt.PSystemSaltFactory
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandPackageEmpty
net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex <|-- net.sourceforge.plantuml.salt.factory.ElementFactoryPyramid
net.sourceforge.plantuml.real.Real <|.. net.sourceforge.plantuml.real.AbstractReal
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolNode
net.sourceforge.plantuml.graphic.USymbolNode +.. net.sourceforge.plantuml.graphic.USymbolNode.MyUGraphicNode
net.sourceforge.plantuml.graphic.AbstractUGraphicHorizontalLine <|-- net.sourceforge.plantuml.graphic.USymbolNode.MyUGraphicNode
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandScale
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandHeader
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.wire.WireDiagram
net.sourceforge.plantuml.ugraphic.color.HColor <|.. net.sourceforge.plantuml.ugraphic.color.HColorAutomaticLegacy
net.sourceforge.plantuml.ugraphic.color.HColorAbstract <|-- net.sourceforge.plantuml.ugraphic.color.HColorAutomaticLegacy
net.sourceforge.plantuml.command.CommandMultilines3 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3Multilines
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseNoteBox
net.sourceforge.plantuml.graphic.UDrawable <|-- net.sourceforge.plantuml.project.draw.TaskDraw
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.descdiagram.command.CommandArchimateMultilines
java.awt.event.MouseListener <|.. net.sourceforge.plantuml.Splash
java.awt.event.MouseMotionListener <|.. net.sourceforge.plantuml.Splash
java.awt.Window <|-- net.sourceforge.plantuml.Splash
net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactoryDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorAddUrl
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.svek.CircleAndArrow
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageAssociationPoint
net.sourceforge.plantuml.preproc.ReadLine <|.. net.sourceforge.plantuml.preproc.StartDiagramExtractReader
net.sourceforge.plantuml.skin.AbstractComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseDestroy
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandGoto
net.sourceforge.plantuml.sequencediagram.teoz.Tile <|.. net.sourceforge.plantuml.sequencediagram.teoz.DelayTile
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.DelayTile
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageCircleStart
net.sourceforge.plantuml.sequencediagram.graphic.Frontier <|.. net.sourceforge.plantuml.sequencediagram.graphic.FrontierSimple
net.sourceforge.plantuml.command.PSystemBasicFactory <|-- net.sourceforge.plantuml.directdot.PSystemDotFactory
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.ElementFactoryRetrieveFromDictonnary
net.sourceforge.plantuml.bpm.BpmEvent <|.. net.sourceforge.plantuml.bpm.BpmEventResume
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.descdiagram.command.CommandPackageWithUSymbol
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d
net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d <|-- net.sourceforge.plantuml.ugraphic.g2d.DriverPolygonG2d
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleEnd
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.descdiagram.EntityImageDesignedDomain
net.sourceforge.plantuml.sequencediagram.graphic.FreeYStrategy <|.. net.sourceforge.plantuml.sequencediagram.graphic.FreeYStrategyBasic
net.sourceforge.plantuml.style.FromSkinparamToStyle +.. net.sourceforge.plantuml.style.FromSkinparamToStyle.Data
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.PlainDiagram
net.sourceforge.plantuml.cucadiagram.WithLinkType <|-- net.sourceforge.plantuml.project.GanttConstraint
java.io.OutputStream <|-- net.sourceforge.plantuml.NullOutputStream
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.g2d.DriverCenteredCharacterG2d
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceTaskStartsWithColor
net.sourceforge.plantuml.project.draw.TimeHeaderCalendar <|-- net.sourceforge.plantuml.project.draw.TimeHeaderDaily
net.sourceforge.plantuml.sequencediagram.graphic.FileMaker <|.. net.sourceforge.plantuml.sequencediagram.teoz.SequenceDiagramFileMakerTeoz
net.sourceforge.plantuml.sequencediagram.teoz.SequenceDiagramFileMakerTeoz +.. net.sourceforge.plantuml.sequencediagram.teoz.SequenceDiagramFileMakerTeoz.Foo
net.sourceforge.plantuml.sequencediagram.teoz.UDrawable <|.. net.sourceforge.plantuml.sequencediagram.teoz.SequenceDiagramFileMakerTeoz.Foo
net.sourceforge.plantuml.project.lang.Sentence <|.. net.sourceforge.plantuml.project.lang.SentenceAnd
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandNoteLong3
net.sourceforge.plantuml.graphic.USymbol +.. net.sourceforge.plantuml.graphic.USymbol.Margin
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.ElementFactoryText
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.g2d.DriverTextG2d
net.sourceforge.plantuml.graphic.FontChange <|.. net.sourceforge.plantuml.graphic.ColorAndSizeChange
net.sourceforge.plantuml.graphic.UGraphicDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorOneSwimlane
net.sourceforge.plantuml.svek.image.AbstractEntityImageBorder <|-- net.sourceforge.plantuml.svek.image.EntityImageStateBorder
java.io.Serializable <|.. net.sourceforge.plantuml.json.JsonValue
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageEmptyPackage
net.sourceforge.plantuml.project.timescale.TimeScale <|.. net.sourceforge.plantuml.project.timescale.TimeScaleCompressed
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.StringFunction
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandScaleMaxWidthAndHeight
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceIsDeleted
net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram <|-- net.sourceforge.plantuml.classdiagram.ClassDiagram
net.sourceforge.plantuml.stats.TextTable +.. net.sourceforge.plantuml.stats.TextTable.TextLine
net.sourceforge.plantuml.stats.TextTable +.. net.sourceforge.plantuml.stats.TextTable.Separator
net.sourceforge.plantuml.stats.TextLine <|.. net.sourceforge.plantuml.stats.TextTable.Separator
net.sourceforge.plantuml.stats.TextTable +.. net.sourceforge.plantuml.stats.TextTable.DataLine
net.sourceforge.plantuml.stats.TextLine <|.. net.sourceforge.plantuml.stats.TextTable.DataLine
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.project.GanttDiagramFactory
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolCloud
net.sourceforge.plantuml.ugraphic.color.HColor <|.. net.sourceforge.plantuml.ugraphic.color.HColorBackground
net.sourceforge.plantuml.ugraphic.color.HColorAbstract <|-- net.sourceforge.plantuml.ugraphic.color.HColorBackground
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.CreoleHorizontalLine
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.CreoleHorizontalLine
java.awt.datatransfer.Transferable <|.. net.sourceforge.plantuml.ImageSelection
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.g2d.DriverPixelG2d
net.sourceforge.plantuml.activitydiagram3.ftile.FtileEmpty <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileGoto
net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorateIn
net.sourceforge.plantuml.command.PSystemAbstractFactory <|-- net.sourceforge.plantuml.gitlog.GitDiagramFactory
net.sourceforge.plantuml.ugraphic.UGraphic <|.. net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector
net.sourceforge.plantuml.ugraphic.UGraphicNo <|-- net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector
net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector +.. net.sourceforge.plantuml.activitydiagram3.ftile.CollisionDetector.Context
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverRectangleTikz
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandForkEnd3
net.sourceforge.plantuml.ugraphic.ClipContainer <|.. net.sourceforge.plantuml.ugraphic.html5.UGraphicHtml5
net.sourceforge.plantuml.ugraphic.UGraphic2 <|.. net.sourceforge.plantuml.ugraphic.html5.UGraphicHtml5
net.sourceforge.plantuml.ugraphic.AbstractUGraphic <|-- net.sourceforge.plantuml.ugraphic.html5.UGraphicHtml5
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.sequencediagram.teoz.ComponentAdapter
net.sourceforge.plantuml.project.draw.TimeHeader <|-- net.sourceforge.plantuml.project.draw.TimeHeaderSimple
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandScaleWidthOrHeight
net.sourceforge.plantuml.SkinParamDelegator <|-- net.sourceforge.plantuml.SkinParamColors
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverDotPathTikz
net.sourceforge.plantuml.core.ImageData <|.. net.sourceforge.plantuml.api.ImageDataAbstract
net.sourceforge.plantuml.project.core3.TimeLine <|-- net.sourceforge.plantuml.project.core3.Histogram
net.sourceforge.plantuml.preproc2.ReadFilter <|.. net.sourceforge.plantuml.preproc2.ReadFilterAddConfig
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.g2d.DriverLineG2d
net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d <|-- net.sourceforge.plantuml.ugraphic.g2d.DriverLineG2d
net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator <|-- net.sourceforge.plantuml.tim.iterator.CodeIteratorReturnFunction
net.sourceforge.plantuml.command.regex.IRegex <|.. net.sourceforge.plantuml.command.regex.RegexOr
net.sourceforge.plantuml.command.regex.RegexComposed <|-- net.sourceforge.plantuml.command.regex.RegexOr
net.sourceforge.plantuml.json.Iterable <|.. net.sourceforge.plantuml.json.JsonObject
net.sourceforge.plantuml.json.JsonValue <|-- net.sourceforge.plantuml.json.JsonObject
net.sourceforge.plantuml.json.JsonObject +.. net.sourceforge.plantuml.json.JsonObject.Member
net.sourceforge.plantuml.json.JsonObject +.. net.sourceforge.plantuml.json.JsonObject.HashIndexTable
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockHorizontal
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockHorizontal
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageDescription
net.sourceforge.plantuml.graphic.HtmlCommand <|-- net.sourceforge.plantuml.graphic.FontChange
java.util.Iterator <|-- net.sourceforge.plantuml.salt.DataSource
net.sourceforge.plantuml.posimo.Moveable <|.. net.sourceforge.plantuml.svek.Cluster
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandChangeState
net.sourceforge.plantuml.sequencediagram.command.CommandParticipant <|-- net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA2
java.io.IOException <|-- net.sourceforge.plantuml.picoweb.BadRequest400
net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex <|-- net.sourceforge.plantuml.salt.factory.ElementFactoryTree
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactorySquare
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactorySquare
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.svek.ConcurrentStateImage
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.ConcurrentStateImage
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamond
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.Boundary
net.sourceforge.plantuml.json.RuntimeException <|-- net.sourceforge.plantuml.json.ParseException
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.sequencediagram.SequenceDiagram
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverDotPathSvg
net.sourceforge.plantuml.sequencediagram.EventWithDeactivate <|.. net.sourceforge.plantuml.sequencediagram.GroupingLeaf
net.sourceforge.plantuml.sequencediagram.Grouping <|-- net.sourceforge.plantuml.sequencediagram.GroupingLeaf
net.sourceforge.plantuml.preproc.ReadLine <|.. net.sourceforge.plantuml.preproc.ReadLineSimple
net.sourceforge.plantuml.timingdiagram.Comparable <|.. net.sourceforge.plantuml.timingdiagram.TimeTick
net.sourceforge.plantuml.activitydiagram3.ftile.FtileOverpassing <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondInside3
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondInside3
net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactory <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.VCompactFactory
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.ditaa.PSystemDitaa
net.sourceforge.plantuml.wbs.ITF <|.. net.sourceforge.plantuml.wbs.ITFLeaf
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.wbs.ITFLeaf
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandGroup3
net.sourceforge.plantuml.ugraphic.color.ColorMapper <|.. net.sourceforge.plantuml.ugraphic.color.ColorMapperReverse
net.sourceforge.plantuml.ugraphic.color.AbstractColorMapper <|-- net.sourceforge.plantuml.ugraphic.color.ColorMapperReverse
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.project.GanttArrow
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.definition.PSystemDefinition
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.definition.PSystemDefinition
net.sourceforge.plantuml.sequencediagram.teoz.CommonTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.TileParallel
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandSkin
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandHideShowByVisibility
net.sourceforge.plantuml.nwdiag.GridTextBlockSimple <|-- net.sourceforge.plantuml.nwdiag.GridTextBlockDecorated
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImagePseudoState
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryDoubleLine
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryDoubleLine
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.objectdiagram.command.CommandCreateEntityObject
net.sourceforge.plantuml.graphic.UGraphicDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.UGraphicInterceptorUDrawable2
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleSprite
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandHighlight
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandParticipant
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileSwitch
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.project.command.CommandWeekNumberStrategy
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.CallUserFunction
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceEnds
net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementTail
net.sourceforge.plantuml.ugraphic.AbstractPlacementStrategy <|-- net.sourceforge.plantuml.ugraphic.PlacementStrategyY1Y2Right
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop.ConnectionHorizontal
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfAndStop.ConnectionHorizontal
net.sourceforge.plantuml.project.draw.TimeHeaderCalendar <|-- net.sourceforge.plantuml.project.draw.TimeHeaderQuarterly
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandScalePixel
net.sourceforge.plantuml.preproc.ReadLine <|-- net.sourceforge.plantuml.preproc.ReadLineNumbered
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandSplitAgain3
net.sourceforge.plantuml.sequencediagram.graphic.Frontier <|.. net.sourceforge.plantuml.sequencediagram.graphic.FrontierComplex
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.GetVariableValue
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandDefineStateShort
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterFunctionCall
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterImport
net.sourceforge.plantuml.json.WriterConfig <|-- net.sourceforge.plantuml.json.PrettyPrint
net.sourceforge.plantuml.json.PrettyPrint +.. net.sourceforge.plantuml.json.PrettyPrint.PrettyPrintWriter
net.sourceforge.plantuml.json.JsonWriter <|-- net.sourceforge.plantuml.json.PrettyPrint.PrettyPrintWriter
net.sourceforge.plantuml.ugraphic.AbstractPlacementStrategy <|-- net.sourceforge.plantuml.ugraphic.PlacementStrategyVisibility
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.svek.image.Opale
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.image.Opale
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.help.Help
net.sourceforge.plantuml.project.time.Comparable <|.. net.sourceforge.plantuml.project.time.MonthYear
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockWithUrl
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteTop
net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactory <|.. net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactoryDelegator
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceLasts
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Darken
net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex <|-- net.sourceforge.plantuml.salt.factory.ElementFactoryBorder
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandForkAgain3
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryNotNavigable
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryNotNavigable
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileKilled
net.sourceforge.plantuml.activitydiagram3.ftile.Ftile <|.. net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileAssemblySimple
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.eggs.PSystemLostFactory
net.sourceforge.plantuml.svek.TextBlockBackcolored <|.. net.sourceforge.plantuml.jsondiagram.TextBlockJson
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.jsondiagram.TextBlockJson
net.sourceforge.plantuml.jsondiagram.TextBlockJson +.. net.sourceforge.plantuml.jsondiagram.TextBlockJson.Line
net.sourceforge.plantuml.ugraphic.ClipContainer <|.. net.sourceforge.plantuml.ugraphic.svg.UGraphicSvg
net.sourceforge.plantuml.ugraphic.UGraphic2 <|.. net.sourceforge.plantuml.ugraphic.svg.UGraphicSvg
net.sourceforge.plantuml.ugraphic.AbstractUGraphic <|-- net.sourceforge.plantuml.ugraphic.svg.UGraphicSvg
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandSpriteFile
net.sourceforge.plantuml.vizjs.RuntimeException <|-- net.sourceforge.plantuml.vizjs.GraphvizJsRuntimeException
net.sourceforge.plantuml.xmi.IXmiClassDiagram <|.. net.sourceforge.plantuml.xmi.XmiStateDiagram
net.sourceforge.plantuml.project.draw.TimeHeader <|-- net.sourceforge.plantuml.project.draw.TimeHeaderCalendar
net.sourceforge.plantuml.project.draw.TimeHeaderCalendar +.. net.sourceforge.plantuml.project.draw.TimeHeaderCalendar.Pending
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageUseCase
net.sourceforge.plantuml.svek.image.EntityImageUseCase +.. net.sourceforge.plantuml.svek.image.EntityImageUseCase.MyUGraphicEllipse
net.sourceforge.plantuml.svek.image.AbstractUGraphicHorizontalLine <|-- net.sourceforge.plantuml.svek.image.EntityImageUseCase.MyUGraphicEllipse
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityDiamond
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandFootboxIgnored
net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.GraphicalHSpace
net.sourceforge.plantuml.graphic.USymbolSimpleAbstract <|-- net.sourceforge.plantuml.graphic.USymbolActor
net.sourceforge.plantuml.ugraphic.UGraphic <|.. net.sourceforge.plantuml.graphic.UGraphicDelegator
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.AbstractTextBlock
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextGroupingHeader
net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactoryDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorCreateGroup
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AtomVerticalTexts
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.AtomVerticalTexts
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AtomOpenIcon
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.AtomOpenIcon
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandNote
net.sourceforge.plantuml.eps.PostScriptCommand <|.. net.sourceforge.plantuml.eps.PostScriptCommandCurveTo
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileDimensionMemoize <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude
net.sourceforge.plantuml.graphic.FontChange <|.. net.sourceforge.plantuml.graphic.FontFamilyChange
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractParallelFtilesBuilder <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderFork.ConnectionOut
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.ElementFactoryRadioOn
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionGroup
net.sourceforge.plantuml.activitydiagram3.InstructionCollection <|.. net.sourceforge.plantuml.activitydiagram3.InstructionGroup
net.sourceforge.plantuml.CharSequence <|.. net.sourceforge.plantuml.EmbeddedDiagram
net.sourceforge.plantuml.EmbeddedDiagram +.. net.sourceforge.plantuml.EmbeddedDiagram.Draw
net.sourceforge.plantuml.Line <|.. net.sourceforge.plantuml.EmbeddedDiagram.Draw
net.sourceforge.plantuml.Atom <|.. net.sourceforge.plantuml.EmbeddedDiagram.Draw
net.sourceforge.plantuml.AbstractTextBlock <|-- net.sourceforge.plantuml.EmbeddedDiagram.Draw
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseDatabase
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.project.command.CommandColorTask
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterWhile
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleColorAndSizeChange
net.sourceforge.plantuml.PlainStringsDiagram <|-- net.sourceforge.plantuml.font.PSystemListFonts
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.eggs.PSystemWelcome
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseDivider
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.nwdiag.NwDiagramFactory
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceDisplayOnSameRowAs
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseGroupingHeader
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentencePausesDayOfWeek
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.flowdiagram.ActivityBox
net.sourceforge.plantuml.ugraphic.AbstractPlacementStrategy <|-- net.sourceforge.plantuml.ugraphic.PlacementStrategyX1Y2Y3
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.style.CommandStyleMultilinesCSS
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.nwdiag.CommandGroup
net.sourceforge.plantuml.creole.Stencil <|.. net.sourceforge.plantuml.svek.image.EntityImageNote
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageNote
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolLabel
net.sourceforge.plantuml.project.time.Comparable <|.. net.sourceforge.plantuml.project.time.Instant
net.sourceforge.plantuml.project.Value <|.. net.sourceforge.plantuml.project.time.Instant
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileMarged
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.html5.DriverLineHtml5
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleOpenIcon
net.sourceforge.plantuml.command.PSystemBasicFactory <|-- net.sourceforge.plantuml.jcckit.PSystemJcckitFactory
net.sourceforge.plantuml.graphic.UDrawable <|-- net.sourceforge.plantuml.graphic.TextBlock
net.sourceforge.plantuml.ugraphic.UShape <|-- net.sourceforge.plantuml.graphic.TextBlock
net.sourceforge.plantuml.Scale <|.. net.sourceforge.plantuml.ScaleMaxWidth
net.sourceforge.plantuml.ScaleProtected <|-- net.sourceforge.plantuml.ScaleMaxWidth
net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand <|.. net.sourceforge.plantuml.command.note.CommandFactoryNoteActivity
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.board.CardBox
net.sourceforge.plantuml.sequencediagram.Event <|.. net.sourceforge.plantuml.sequencediagram.Divider
net.sourceforge.plantuml.style.WithStyle <|.. net.sourceforge.plantuml.sequencediagram.Divider
net.sourceforge.plantuml.sequencediagram.AbstractEvent <|-- net.sourceforge.plantuml.sequencediagram.Divider
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.project.command.CommandGanttArrow
net.sourceforge.plantuml.skin.ArrowComponent <|.. net.sourceforge.plantuml.asciiart.ComponentTextArrow
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextArrow
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandAutonumber
net.sourceforge.plantuml.cucadiagram.CharSequence <|.. net.sourceforge.plantuml.cucadiagram.Stereotype
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Feature
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram.command.CommandEndif
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseBoundary
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.FileExists
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileHeightFixedCentered
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolFolder
net.sourceforge.plantuml.ISourceFileReader <|.. net.sourceforge.plantuml.SourceFileReaderCopyCat
net.sourceforge.plantuml.SourceFileReaderAbstract <|-- net.sourceforge.plantuml.SourceFileReaderCopyCat
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.creole.SheetBlock2
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.SheetBlock2
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.creole.SheetBlock2
net.sourceforge.plantuml.api.ImageDataAbstract <|-- net.sourceforge.plantuml.api.ImageDataComplex
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.PlainStringsDiagram
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.IsLight
net.sourceforge.plantuml.EnsureVisible <|.. net.sourceforge.plantuml.ugraphic.UGraphicNull
net.sourceforge.plantuml.ugraphic.UGraphic2 <|.. net.sourceforge.plantuml.ugraphic.UGraphicNull
net.sourceforge.plantuml.ugraphic.AbstractUGraphic <|-- net.sourceforge.plantuml.ugraphic.UGraphicNull
net.sourceforge.plantuml.asciiart.BasicCharArea <|-- net.sourceforge.plantuml.asciiart.UmlCharArea
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.donors.PSystemDonorsFactory
net.sourceforge.plantuml.xmi.IXmiClassDiagram <|.. net.sourceforge.plantuml.xmi.XmiClassDiagramStandard
net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract <|-- net.sourceforge.plantuml.xmi.XmiClassDiagramStandard
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementTabBar
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTile
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.ReverseColor
net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator <|-- net.sourceforge.plantuml.tim.iterator.CodeIteratorSub
net.sourceforge.plantuml.style.Value <|.. net.sourceforge.plantuml.style.ValueAbstract
net.sourceforge.plantuml.sprite.Sprite <|.. net.sourceforge.plantuml.sprite.SpriteSvg
net.sourceforge.plantuml.sequencediagram.InGroupable <|.. net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant
net.sourceforge.plantuml.sequencediagram.graphic.Arrow <|-- net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndParticipant
net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator <|-- net.sourceforge.plantuml.tim.iterator.CodeIteratorIf
net.sourceforge.plantuml.flashcode.FlashCodeUtils <|.. net.sourceforge.plantuml.flashcode.FlashCodeUtilsZxing
net.sourceforge.plantuml.bpm.ConnectorPuzzle <|.. net.sourceforge.plantuml.bpm.BpmElement
net.sourceforge.plantuml.bpm.AbstractConnectorPuzzle <|-- net.sourceforge.plantuml.bpm.BpmElement
net.sourceforge.plantuml.Stdrpt <|.. net.sourceforge.plantuml.StdrptPipe0
net.sourceforge.plantuml.elk.proxy.ElkObjectProxy <|.. net.sourceforge.plantuml.elk.proxy.core.math.ElkPadding
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityCircleCross
net.sourceforge.plantuml.GeneratedImage <|.. net.sourceforge.plantuml.GeneratedImageImpl
net.sourceforge.plantuml.ugraphic.UChange <|.. net.sourceforge.plantuml.ugraphic.UClip
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.descdiagram.BoxedCharacter
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.descdiagram.BoxedCharacter
net.sourceforge.plantuml.project.lang.Subject <|.. net.sourceforge.plantuml.project.lang.SubjectDayOfWeek
net.sourceforge.plantuml.project.lang.SubjectDayOfWeek +.. net.sourceforge.plantuml.project.lang.SubjectDayOfWeek.AreClose
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectDayOfWeek.AreClose
net.sourceforge.plantuml.project.lang.SubjectDayOfWeek +.. net.sourceforge.plantuml.project.lang.SubjectDayOfWeek.InColor
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectDayOfWeek.InColor
net.sourceforge.plantuml.ugraphic.UShape <|.. net.sourceforge.plantuml.ugraphic.UComment
net.sourceforge.plantuml.command.CommandMultilinesBracket <|-- net.sourceforge.plantuml.command.CommandSkinParamMultilines
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram.command.CommandEndPartition
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandElse3
net.sourceforge.plantuml.bpm.GridCleaner <|.. net.sourceforge.plantuml.bpm.CleanerInterleavingLines
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextDestroy
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.mindmap.MindMapDiagramFactory
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleFontFamilyChange
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverNoneSvg
net.sourceforge.plantuml.command.Iterable <|.. net.sourceforge.plantuml.command.BlocLines
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseQueue
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleCrowfoot
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleCrowfoot
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterIfdef
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionBreak
net.sourceforge.plantuml.activitydiagram3.MonoSwimable <|-- net.sourceforge.plantuml.activitydiagram3.InstructionBreak
net.sourceforge.plantuml.skin.ArrowComponent <|.. net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.ElseTile
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandScaleMaxWidth
net.sourceforge.plantuml.project.timescale.TimeScale <|.. net.sourceforge.plantuml.project.timescale.TimeScaleDaily
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementBorder
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.statediagram.StateDiagramFactory
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionPartition
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.ElementFactoryLine
net.sourceforge.plantuml.real.Real <|.. net.sourceforge.plantuml.real.RealMiddle
net.sourceforge.plantuml.real.AbstractReal <|-- net.sourceforge.plantuml.real.RealMiddle
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis
net.sourceforge.plantuml.timingdiagram.Player <|-- net.sourceforge.plantuml.timingdiagram.PlayerRobustConcise
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.visio.DriverLineVdx
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.activitydiagram.ActivityDiagramFactory
net.sourceforge.plantuml.ugraphic.ClipContainer <|.. net.sourceforge.plantuml.ugraphic.debug.UGraphicDebug
net.sourceforge.plantuml.ugraphic.UGraphic2 <|.. net.sourceforge.plantuml.ugraphic.debug.UGraphicDebug
net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic <|-- net.sourceforge.plantuml.ugraphic.debug.UGraphicDebug
net.sourceforge.plantuml.openiconic.SvgCommand <|.. net.sourceforge.plantuml.openiconic.SvgCommandLetter
net.sourceforge.plantuml.posimo.Clusterable <|.. net.sourceforge.plantuml.posimo.Cluster
net.sourceforge.plantuml.bpm.Placeable <|-- net.sourceforge.plantuml.bpm.ConnectorPuzzle
net.sourceforge.plantuml.command.PSystemBasicFactory <|-- net.sourceforge.plantuml.definition.PSystemDefinitionFactory
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandBoxEnd
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.wire.CommandWLink
net.sourceforge.plantuml.wbs.WBSTextBlock <|-- net.sourceforge.plantuml.wbs.Fork
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.sprite.ListSpriteDiagramFactory
java.awt.geom.PathIterator <|.. net.sourceforge.plantuml.ugraphic.eps.PathIteratorLimited
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.sprite.PSystemListInternalSprites
net.sourceforge.plantuml.timingdiagram.Player <|-- net.sourceforge.plantuml.timingdiagram.PlayerClock
net.sourceforge.plantuml.ugraphic.AbstractPlacementStrategy <|-- net.sourceforge.plantuml.ugraphic.PlacementStrategyX1X2
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AtomMath
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.AtomMath
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.mindmap.CommandMindMapPlus
net.sourceforge.plantuml.sequencediagram.teoz.Tile <|.. net.sourceforge.plantuml.sequencediagram.teoz.HSpaceTile
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.HSpaceTile
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.nwdiag.NwDiagram
net.sourceforge.plantuml.creole.SheetBuilder <|.. net.sourceforge.plantuml.creole.legacy.CreoleParser
net.sourceforge.plantuml.posimo.PathDrawer <|.. net.sourceforge.plantuml.posimo.PathDrawerInterface
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandFootboxOld
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleMonospaced
net.sourceforge.plantuml.eps.EpsGraphics <|-- net.sourceforge.plantuml.eps.EpsGraphicsMacro
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.help.CommandHelp
net.sourceforge.plantuml.command.PSystemAbstractFactory <|-- net.sourceforge.plantuml.jsondiagram.JsonDiagramFactory
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.nwdiag.CommandNwDiagInit
net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract <|-- net.sourceforge.plantuml.sequencediagram.graphic.Step1MessageExo
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverEllipseTikz
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.descdiagram.EntityImageDomain
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.AlwaysFalse
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandBackward3
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.svek.image.EntityImageNoteLink
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.image.EntityImageNoteLink
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.salt.CommandAnything
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.statediagram.command.CommandCreateState
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.bpm.CommandDockedEvent
net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactoryDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorWhile
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.eps.DriverPolygonEps
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.descdiagram.command.CommandLinkElement
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockMinWidth
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockMinWidth
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleImg
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.timingdiagram.graphic.PentaAShape
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseDelayText
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementInColors2
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandSwimlane
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockSprited
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.project.command.CommandFootbox
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInner
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackComplex1
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackComplex1
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackComplex1
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackBackward1
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackBackward1
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackBackward2
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackBackward2
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackSimple
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackSimple
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileRepeat.ConnectionBackSimple
net.sourceforge.plantuml.svek.PointListIterator <|.. net.sourceforge.plantuml.svek.PointListIteratorImpl
net.sourceforge.plantuml.error.PSystemError <|-- net.sourceforge.plantuml.error.PSystemErrorEmpty
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandActivityLegacy1
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityCircleLine
net.sourceforge.plantuml.cucadiagram.Bodier <|.. net.sourceforge.plantuml.cucadiagram.BodierMap
net.sourceforge.plantuml.bpm.Placeable <|.. net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty
net.sourceforge.plantuml.bpm.ConnectorPuzzle <|.. net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty
net.sourceforge.plantuml.bpm.AbstractConnectorPuzzle <|-- net.sourceforge.plantuml.bpm.ConnectorPuzzleEmpty
net.sourceforge.plantuml.sequencediagram.command.CommandParticipant <|-- net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA
net.sourceforge.plantuml.SkinParamDelegator <|-- net.sourceforge.plantuml.SkinParamBackcoloredReference
java.util.Random <|-- net.sourceforge.plantuml.utils.MTRandom
net.sourceforge.plantuml.cucadiagram.Code <|.. net.sourceforge.plantuml.cucadiagram.CodeImpl
net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand <|.. net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteCommand
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryArrowAndCircle
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryArrowAndCircle
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionFork
net.sourceforge.plantuml.activitydiagram3.WithNote <|-- net.sourceforge.plantuml.activitydiagram3.InstructionFork
java.awt.Shape <|.. net.sourceforge.plantuml.ugraphic.arc.ExtendedGeneralPath
net.sourceforge.plantuml.ugraphic.arc.Cloneable <|.. net.sourceforge.plantuml.ugraphic.arc.ExtendedGeneralPath
net.sourceforge.plantuml.ugraphic.arc.ExtendedGeneralPath +.. net.sourceforge.plantuml.ugraphic.arc.ExtendedGeneralPath.EPI
net.sourceforge.plantuml.ugraphic.arc.ExtendedPathIterator <|.. net.sourceforge.plantuml.ugraphic.arc.ExtendedGeneralPath.EPI
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.eps.DriverPathEps
net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand <|.. net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteAcrossCommand
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.g2d.DriverEllipseG2d
net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d <|-- net.sourceforge.plantuml.ugraphic.g2d.DriverEllipseG2d
net.sourceforge.plantuml.graphic.FontChange <|.. net.sourceforge.plantuml.graphic.ResetFont
net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElementLiveEvent
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverImagePng
net.sourceforge.plantuml.cucadiagram.dot.AbstractGraphviz <|-- net.sourceforge.plantuml.cucadiagram.dot.GraphvizLinux
net.sourceforge.plantuml.graphic.StringBounderRaw <|-- net.sourceforge.plantuml.ugraphic.debug.StringBounderDebug
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AtomHorizontalTexts
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.AtomHorizontalTexts
net.sourceforge.plantuml.argon2.blake2.Blake2b +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Spec
net.sourceforge.plantuml.argon2.blake2.Blake2b +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Digest
net.sourceforge.plantuml.argon2.blake2.Blake2b <|.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Digest
net.sourceforge.plantuml.argon2.blake2.Engine <|-- net.sourceforge.plantuml.argon2.blake2.Blake2b.Digest
net.sourceforge.plantuml.argon2.blake2.Blake2b +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Mac
net.sourceforge.plantuml.argon2.blake2.Blake2b <|.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Mac
net.sourceforge.plantuml.argon2.blake2.Engine <|-- net.sourceforge.plantuml.argon2.blake2.Blake2b.Mac
net.sourceforge.plantuml.argon2.blake2.Blake2b +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Tree
net.sourceforge.plantuml.argon2.blake2.Blake2b +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine
net.sourceforge.plantuml.argon2.blake2.Blake2b <|.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine
net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine.flag
net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine.Debug
net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine.Assert
net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Engine.LittleEndian
net.sourceforge.plantuml.argon2.blake2.Blake2b +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Param
net.sourceforge.plantuml.argon2.blake2.AlgorithmParameterSpec <|.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Param
net.sourceforge.plantuml.argon2.blake2.Blake2b.Param +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Param.Xoff
net.sourceforge.plantuml.argon2.blake2.Blake2b.Param +.. net.sourceforge.plantuml.argon2.blake2.Blake2b.Param.Default
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.activitydiagram3.ActivityDiagramFactory3
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.nwdiag.CommandComment
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.bpm.CommandNewBranch
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandSkinParam
net.sourceforge.plantuml.stats.api.StatsTable <|.. net.sourceforge.plantuml.stats.StatsTableImpl
net.sourceforge.plantuml.error.PSystemError <|-- net.sourceforge.plantuml.error.PSystemErrorPreprocessor
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.note.CommandConstraintOnLinks
net.sourceforge.plantuml.mindmap.Comparable <|.. net.sourceforge.plantuml.mindmap.Stripe
net.sourceforge.plantuml.tim.Exception <|-- net.sourceforge.plantuml.tim.EaterExceptionLocated
net.sourceforge.plantuml.PlainStringsDiagram <|-- net.sourceforge.plantuml.version.PSystemVersion
net.sourceforge.plantuml.graphic.USymbolSimpleAbstract <|-- net.sourceforge.plantuml.graphic.USymbolBoundary
net.sourceforge.plantuml.graphic.FontChange <|.. net.sourceforge.plantuml.graphic.RemoveStyle
net.sourceforge.plantuml.ugraphic.UShapeIgnorableForCompression <|.. net.sourceforge.plantuml.graphic.SpecialText
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.ElementFactoryDroplist
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandModeCompact
net.sourceforge.plantuml.svek.GeneralImageBuilder +.. net.sourceforge.plantuml.svek.GeneralImageBuilder.EntityImageSimpleEmpty
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.svek.GeneralImageBuilder.EntityImageSimpleEmpty
net.sourceforge.plantuml.timingdiagram.TimeProjected <|-- net.sourceforge.plantuml.timingdiagram.graphic.PDrawing
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionHorizontal
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionHorizontal
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionElse
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionElse
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionElseHline
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionElse <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionElseHline
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionElseNoDiamond
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionElse <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionElseNoDiamond
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionHline
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfDown.ConnectionHline
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandPage
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandSwitch
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverTextAsPathSvg
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.g2d.DriverDotPathG2d
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityPlus
net.sourceforge.plantuml.graphic.USymbolSimpleAbstract <|-- net.sourceforge.plantuml.graphic.USymbolControl
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandLinkLollipop
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.eps.DriverTextEps
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterIf
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageCircleEnd
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandReferenceOverSeveral
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandScaleMaxHeight
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.style.CommandStyleImport
net.sourceforge.plantuml.ugraphic.UShape <|.. net.sourceforge.plantuml.activitydiagram3.ftile.CenteredText
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpaceWithParticipants
org.apache.tools.ant.Task <|-- net.sourceforge.plantuml.ant.CheckZipTask
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.nwdiag.CommandEndSomething
net.sourceforge.plantuml.timingdiagram.command.CommandChangeState <|-- net.sourceforge.plantuml.timingdiagram.command.CommandChangeStateByPlayerCode
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionEnd
net.sourceforge.plantuml.activitydiagram3.MonoSwimable <|-- net.sourceforge.plantuml.activitydiagram3.InstructionEnd
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.creole.SheetBlock1
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.SheetBlock1
net.sourceforge.plantuml.creole.Stencil <|.. net.sourceforge.plantuml.creole.SheetBlock1
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.creole.SheetBlock1
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Strlen
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.help.CommandHelpTheme
net.sourceforge.plantuml.sequencediagram.teoz.Bordered <|.. net.sourceforge.plantuml.sequencediagram.teoz.PlayingSpace
net.sourceforge.plantuml.code.Compression <|.. net.sourceforge.plantuml.code.CompressionNone
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementOpen
net.sourceforge.plantuml.oregon.BasicGame <|.. net.sourceforge.plantuml.oregon.OregonBasicGame
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandFootbox
net.sourceforge.plantuml.cucadiagram.RuntimeException <|-- net.sourceforge.plantuml.cucadiagram.UnparsableGraphvizException
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockEmpty
net.sourceforge.plantuml.command.PSystemBasicFactory <|-- net.sourceforge.plantuml.oregon.PSystemOregonFactory
net.sourceforge.plantuml.ugraphic.color.HColor <|.. net.sourceforge.plantuml.ugraphic.color.HColorAutomatic
net.sourceforge.plantuml.ugraphic.color.HColorAbstract <|-- net.sourceforge.plantuml.ugraphic.color.HColorAutomatic
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextActiveLine
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverPolygonSvg
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram.command.CommandElse
net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform <|.. net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineComposition
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.ElementFactoryCheckboxOff
net.sourceforge.plantuml.api.NumberAnalyzed <|-- net.sourceforge.plantuml.api.NumberAnalyzedDated
net.sourceforge.plantuml.ugraphic.UShape <|.. net.sourceforge.plantuml.ugraphic.UText
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.visio.DriverRectangleVdx
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityHalfArrow
net.sourceforge.plantuml.ugraphic.ClipContainer <|.. net.sourceforge.plantuml.ugraphic.tikz.UGraphicTikz
net.sourceforge.plantuml.ugraphic.UGraphic2 <|.. net.sourceforge.plantuml.ugraphic.tikz.UGraphicTikz
net.sourceforge.plantuml.ugraphic.AbstractUGraphic <|-- net.sourceforge.plantuml.ugraphic.tikz.UGraphicTikz
net.sourceforge.plantuml.skin.Component <|.. net.sourceforge.plantuml.posimo.Frame
net.sourceforge.plantuml.json.Iterable <|.. net.sourceforge.plantuml.json.JsonArray
net.sourceforge.plantuml.json.JsonValue <|-- net.sourceforge.plantuml.json.JsonArray
net.sourceforge.plantuml.board.Iterable <|.. net.sourceforge.plantuml.board.BArray
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolRectangle
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandAssumeTransparent
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolStorage
net.sourceforge.plantuml.EnsureVisible <|.. net.sourceforge.plantuml.Url
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.skin.CircleInterface
net.sourceforge.plantuml.real.RealMoveable <|-- net.sourceforge.plantuml.real.RealMiddle2
net.sourceforge.plantuml.ugraphic.UGraphic <|.. net.sourceforge.plantuml.ugraphic.hand.UGraphicHandwritten
net.sourceforge.plantuml.graphic.UGraphicDelegator <|-- net.sourceforge.plantuml.ugraphic.hand.UGraphicHandwritten
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.svek.SvekResult
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.SvekResult
net.sourceforge.plantuml.graphic.FontChange <|.. net.sourceforge.plantuml.graphic.ExposantChange
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityCrowfoot
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.sprite.StdlibDiagramFactory
net.sourceforge.plantuml.graphic.StringBounderRaw <|-- net.sourceforge.plantuml.asciiart.TextStringBounder
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.help.CommandHelpSkinparam
net.sourceforge.plantuml.code.deflate.BitInputStream <|.. net.sourceforge.plantuml.code.deflate.ByteBitInputStream
net.sourceforge.plantuml.Stdrpt <|.. net.sourceforge.plantuml.StdrptV1
net.sourceforge.plantuml.ugraphic.AbstractPlacementStrategy <|-- net.sourceforge.plantuml.ugraphic.PlacementStrategyY1Y2Center
net.sourceforge.plantuml.svek.image.EntityImageStateCommon <|-- net.sourceforge.plantuml.svek.image.EntityImageStateEmptyDescription
net.sourceforge.plantuml.graphic.UDrawable <|-- net.sourceforge.plantuml.mindmap.Finger
net.sourceforge.plantuml.json.Json +.. net.sourceforge.plantuml.json.Json.DefaultHandler
net.sourceforge.plantuml.json.JsonHandler <|-- net.sourceforge.plantuml.json.Json.DefaultHandler
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.svek.GraphvizCrash
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.GraphvizCrash
net.sourceforge.plantuml.eps.PostScriptCommand <|.. net.sourceforge.plantuml.eps.PostScriptCommandQuadTo
net.sourceforge.plantuml.api.mda.option2.MDADiagram <|.. net.sourceforge.plantuml.mda.MDADiagramImpl
net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform <|.. net.sourceforge.plantuml.ugraphic.comp.CompressionTransform
net.sourceforge.plantuml.tim.TFunction <|.. net.sourceforge.plantuml.tim.TFunctionImpl
net.sourceforge.plantuml.svek.IShapePseudo <|.. net.sourceforge.plantuml.svek.ShapePseudoImpl
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseParticipant
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandCase
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandAutoactivate
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.openiconic.PSystemListOpenIconic
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.NewpagedDiagram
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityDoubleLine
net.sourceforge.plantuml.project.draw.AbstractTaskDraw <|-- net.sourceforge.plantuml.project.draw.TaskDrawDiamond
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionHorizontal
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionHorizontal
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionLastElseIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionLastElseIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionLastElseOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionLastElseOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionVerticalIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionVerticalIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionVerticalIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionVerticalOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionVerticalOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionHline
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongHorizontal.ConnectionHline
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseReference
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.command.CommandMultilinesLegend
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.project.command.NaturalCommand
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.sequencediagram.teoz.TeozLayer
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.sequencediagram.teoz.TeozLayer
net.sourceforge.plantuml.graphic.TextBlock <|-- net.sourceforge.plantuml.svek.TextBlockBackcolored
net.sourceforge.plantuml.AParentFolder <|.. net.sourceforge.plantuml.AParentFolderRegular
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockBordered
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockBordered
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileThinSplit
net.sourceforge.plantuml.activitydiagram3.ftile.Iterable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.Worm
net.sourceforge.plantuml.project.draw.TimeHeaderCalendar <|-- net.sourceforge.plantuml.project.draw.TimeHeaderMonthly
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AtomWithMargin
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.AtomWithMargin
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.eggs.PSystemAppleTwoFactory
net.sourceforge.plantuml.graphic.Line <|.. net.sourceforge.plantuml.graphic.SingleLine
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.SingleLine
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract
net.sourceforge.plantuml.sequencediagram.Event <|.. net.sourceforge.plantuml.sequencediagram.AbstractEvent
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.graphic.GraphicStrings
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.GraphicStrings
java.util.Comparator <|.. net.sourceforge.plantuml.salt.element.TopFirst
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionSimple
net.sourceforge.plantuml.activitydiagram3.MonoSwimable <|-- net.sourceforge.plantuml.activitydiagram3.InstructionSimple
net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseArrow
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceHappensDate
net.sourceforge.plantuml.ugraphic.UShape <|.. net.sourceforge.plantuml.ugraphic.UImageSvg
net.sourceforge.plantuml.ugraphic.UGraphic <|-- net.sourceforge.plantuml.ugraphic.UGraphic2
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextLine
java.util.Iterator <|.. net.sourceforge.plantuml.command.regex.MatcherIterator
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandIfLegacy1
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextDivider
net.sourceforge.plantuml.ugraphic.UGraphic <|.. net.sourceforge.plantuml.activitydiagram3.ftile.ZadBuilder
net.sourceforge.plantuml.ugraphic.UGraphicNo <|-- net.sourceforge.plantuml.activitydiagram3.ftile.ZadBuilder
net.sourceforge.plantuml.activitydiagram3.ftile.ZadBuilder +.. net.sourceforge.plantuml.activitydiagram3.ftile.ZadBuilder.Context
net.sourceforge.plantuml.ugraphic.color.HUSLColorConverter +.. net.sourceforge.plantuml.ugraphic.color.HUSLColorConverter.Length
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolStack
net.sourceforge.plantuml.code.Compression <|.. net.sourceforge.plantuml.code.CompressionBrotli
net.sourceforge.plantuml.svek.TextBlockBackcolored <|.. net.sourceforge.plantuml.graphic.TextBlockRecentred
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockRecentred
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockArrow
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockArrow
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.GroupingTile
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageActivity
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageArcCircle
net.sourceforge.plantuml.graphic.FontChange <|.. net.sourceforge.plantuml.graphic.AddStyle
net.sourceforge.plantuml.argon2.exception.RuntimeException <|-- net.sourceforge.plantuml.argon2.exception.Argon2Exception
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.braille.DriverNoneBraille
net.sourceforge.plantuml.project.timescale.TimeScale <|.. net.sourceforge.plantuml.project.timescale.TimeScaleWink
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextParticipant
net.sourceforge.plantuml.activitydiagram3.ftile.Iterable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.WormTexted
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.ElementFactoryButton
net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactoryDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorAssembly
net.sourceforge.plantuml.ugraphic.ClipContainer <|.. net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt
net.sourceforge.plantuml.ugraphic.UGraphic2 <|.. net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt
net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic <|-- net.sourceforge.plantuml.ugraphic.txt.UGraphicTxt
net.sourceforge.plantuml.project.lang.Subject <|.. net.sourceforge.plantuml.project.lang.SubjectDaysAsDates
net.sourceforge.plantuml.project.lang.SubjectDaysAsDates +.. net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.Close
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.Close
net.sourceforge.plantuml.project.lang.SubjectDaysAsDates +.. net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.Open
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.Open
net.sourceforge.plantuml.project.lang.SubjectDaysAsDates +.. net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.InColor
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.InColor
net.sourceforge.plantuml.project.lang.SubjectDaysAsDates +.. net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.Named
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectDaysAsDates.Named
net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty <|-- net.sourceforge.plantuml.elk.proxy.graph.ElkNode
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandRobustConcise
net.sourceforge.plantuml.bpm.BpmEvent <|.. net.sourceforge.plantuml.bpm.BpmEventGoto
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockArrow2
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockArrow2
net.sourceforge.plantuml.preproc.Truth <|.. net.sourceforge.plantuml.preproc.Defines
net.sourceforge.plantuml.mindmap.Finger <|.. net.sourceforge.plantuml.mindmap.FingerImpl
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.mindmap.FingerImpl
net.sourceforge.plantuml.cucadiagram.PortionShower <|.. net.sourceforge.plantuml.cucadiagram.dot.DotData
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.cucadiagram.BodyEnhanced1
net.sourceforge.plantuml.svek.WithPorts <|.. net.sourceforge.plantuml.cucadiagram.BodyEnhanced1
net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract <|-- net.sourceforge.plantuml.cucadiagram.BodyEnhanced1
net.sourceforge.plantuml.ugraphic.color.HColor <|.. net.sourceforge.plantuml.ugraphic.color.HColorGradient
net.sourceforge.plantuml.ugraphic.color.HColorAbstract <|-- net.sourceforge.plantuml.ugraphic.color.HColorGradient
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockSimple
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockSimple
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandLegend
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandHSpace
net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand <|.. net.sourceforge.plantuml.command.note.CommandFactoryNoteOnLink
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.eggs.PSystemColorsFactory
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandLinkClass
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.svek.EntityDomain
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.EntityDomain
net.sourceforge.plantuml.ugraphic.color.ColorMapper <|.. net.sourceforge.plantuml.ugraphic.color.ColorMapperLightnessInverse
net.sourceforge.plantuml.ugraphic.color.AbstractColorMapper <|-- net.sourceforge.plantuml.ugraphic.color.ColorMapperLightnessInverse
java.io.OutputStream <|-- net.sourceforge.plantuml.CounterOutputStream
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandArrow3
net.sourceforge.plantuml.graphic.UDrawable <|-- net.sourceforge.plantuml.activitydiagram3.ftile.Connection
net.sourceforge.plantuml.ugraphic.UShape <|-- net.sourceforge.plantuml.activitydiagram3.ftile.Connection
net.sourceforge.plantuml.tim.iterator.CodeIterator <|.. net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl
net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl +.. net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl.Position
net.sourceforge.plantuml.tim.iterator.CodePosition <|.. net.sourceforge.plantuml.tim.iterator.CodeIteratorImpl.Position
net.sourceforge.plantuml.timingdiagram.Comparable <|.. net.sourceforge.plantuml.timingdiagram.ChangeState
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.eggs.PSystemPathFactory
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.flowdiagram.CommandLink
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverLineSvg
net.sourceforge.plantuml.project.lang.Subject <|.. net.sourceforge.plantuml.project.lang.SubjectDayAsDate
net.sourceforge.plantuml.project.lang.SubjectDayAsDate +.. net.sourceforge.plantuml.project.lang.SubjectDayAsDate.Close
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectDayAsDate.Close
net.sourceforge.plantuml.project.lang.SubjectDayAsDate +.. net.sourceforge.plantuml.project.lang.SubjectDayAsDate.Open
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectDayAsDate.Open
net.sourceforge.plantuml.project.lang.SubjectDayAsDate +.. net.sourceforge.plantuml.project.lang.SubjectDayAsDate.InColor
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectDayAsDate.InColor
net.sourceforge.plantuml.SkinParamDelegator <|-- net.sourceforge.plantuml.SkinParamForecolored
net.sourceforge.plantuml.Stdrpt <|.. net.sourceforge.plantuml.StdrptNull
net.sourceforge.plantuml.svek.GroupPngMakerState +.. net.sourceforge.plantuml.svek.GroupPngMakerState.InnerGroupHierarchy
net.sourceforge.plantuml.svek.GroupHierarchy <|.. net.sourceforge.plantuml.svek.GroupPngMakerState.InnerGroupHierarchy
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBox
net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBox +.. net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBox.MyStencil
net.sourceforge.plantuml.activitydiagram3.ftile.vertical.Stencil <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBox.MyStencil
net.sourceforge.plantuml.cucadiagram.Bodier <|.. net.sourceforge.plantuml.cucadiagram.BodierLikeClassOrObject
net.sourceforge.plantuml.activitydiagram3.ftile.Ftile <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionWhile
net.sourceforge.plantuml.activitydiagram3.InstructionCollection <|.. net.sourceforge.plantuml.activitydiagram3.InstructionWhile
net.sourceforge.plantuml.activitydiagram3.WithNote <|-- net.sourceforge.plantuml.activitydiagram3.InstructionWhile
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandKill3
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementLine
net.sourceforge.plantuml.style.RuntimeException <|-- net.sourceforge.plantuml.style.NoStyleAvailableException
net.sourceforge.plantuml.math.ScientificEquation <|.. net.sourceforge.plantuml.math.AsciiMath
net.sourceforge.plantuml.cucadiagram.dot.AbstractGraphviz <|-- net.sourceforge.plantuml.cucadiagram.dot.GraphvizWindowsOld
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.activitydiagram3.ftile.LaneDivider
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.help.CommandHelpFont
net.sourceforge.plantuml.bpm.BpmEvent <|.. net.sourceforge.plantuml.bpm.BpmEventAdd
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.bpm.CommandMerge
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Dirpath
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockGeneric
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockGeneric
net.sourceforge.plantuml.creole.Stencil <|.. net.sourceforge.plantuml.skin.rose.ComponentRoseNote
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseNote
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverImageSvgSvg
net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactoryDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorCreateParallel
net.sourceforge.plantuml.preproc2.ReadFilter <|.. net.sourceforge.plantuml.preproc2.ReadFilterAnd
net.sourceforge.plantuml.project.lang.Subject <|.. net.sourceforge.plantuml.project.lang.SubjectTask
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.bpm.CommandEndBranch
net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand <|.. net.sourceforge.plantuml.command.note.CommandFactoryTipOnEntity
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.html5.DriverNopHtml5
net.sourceforge.plantuml.Scale <|.. net.sourceforge.plantuml.ScaleMaxHeight
net.sourceforge.plantuml.ScaleProtected <|-- net.sourceforge.plantuml.ScaleMaxHeight
net.sourceforge.plantuml.ugraphic.visio.VisioShape <|.. net.sourceforge.plantuml.ugraphic.visio.VisioText
net.sourceforge.plantuml.posimo.Positionable <|.. net.sourceforge.plantuml.posimo.PositionableImpl
net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram <|-- net.sourceforge.plantuml.compositediagram.CompositeDiagram
net.sourceforge.plantuml.PlainStringsDiagram <|-- net.sourceforge.plantuml.eggs.PSystemRIP
net.sourceforge.plantuml.sequencediagram.graphic.Step1Abstract <|-- net.sourceforge.plantuml.sequencediagram.graphic.Step1Message
net.sourceforge.plantuml.salt.element.Element <|.. net.sourceforge.plantuml.salt.element.ElementButton
net.sourceforge.plantuml.salt.element.AbstractElementText <|-- net.sourceforge.plantuml.salt.element.ElementButton
net.sourceforge.plantuml.ugraphic.UChange <|.. net.sourceforge.plantuml.ugraphic.UScale
net.sourceforge.plantuml.ugraphic.color.RuntimeException <|-- net.sourceforge.plantuml.ugraphic.color.NoSuchColorRuntimeException
net.sourceforge.plantuml.sequencediagram.command.CommandExoArrowAny <|-- net.sourceforge.plantuml.sequencediagram.command.CommandExoArrowRight
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryHalfArrow
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryHalfArrow
net.sourceforge.plantuml.real.RealLine +.. net.sourceforge.plantuml.real.RealLine.MaxAbsolute
net.sourceforge.plantuml.real.AbstractAbsolute <|-- net.sourceforge.plantuml.real.RealLine.MaxAbsolute
net.sourceforge.plantuml.real.RealLine +.. net.sourceforge.plantuml.real.RealLine.MinAbsolute
net.sourceforge.plantuml.real.AbstractAbsolute <|-- net.sourceforge.plantuml.real.RealLine.MinAbsolute
net.sourceforge.plantuml.real.RealLine +.. net.sourceforge.plantuml.real.RealLine.AbstractAbsolute
net.sourceforge.plantuml.real.Real <|.. net.sourceforge.plantuml.real.RealLine.AbstractAbsolute
net.sourceforge.plantuml.activitydiagram3.ftile.WeldingPoint <|.. net.sourceforge.plantuml.activitydiagram3.ftile.FtileBreak
net.sourceforge.plantuml.activitydiagram3.ftile.FtileEmpty <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileBreak
net.sourceforge.plantuml.posimo.Racorder <|.. net.sourceforge.plantuml.posimo.RacorderAbstract
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleUrl
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionSpot
net.sourceforge.plantuml.activitydiagram3.MonoSwimable <|-- net.sourceforge.plantuml.activitydiagram3.InstructionSpot
net.sourceforge.plantuml.project.core3.Histogram <|.. net.sourceforge.plantuml.project.core3.HistogramSimple
net.sourceforge.plantuml.code.StringCompressor <|.. net.sourceforge.plantuml.code.ArobaseStringCompressor
net.sourceforge.plantuml.sequencediagram.AbstractMessage <|-- net.sourceforge.plantuml.sequencediagram.MessageExo
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityStateLine1
net.sourceforge.plantuml.sequencediagram.graphic.FileMaker <|.. net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramTxtMaker
net.sourceforge.plantuml.graphic.UGraphicDelegator <|-- net.sourceforge.plantuml.graphic.UGraphicInterceptorUDrawable
net.sourceforge.plantuml.sequencediagram.teoz.Tile <|.. net.sourceforge.plantuml.sequencediagram.teoz.DividerTile
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.DividerTile
net.sourceforge.plantuml.cucadiagram.Bodier <|.. net.sourceforge.plantuml.cucadiagram.BodierSimple
net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator <|-- net.sourceforge.plantuml.tim.iterator.CodeIteratorWhile
net.sourceforge.plantuml.style.Value <|.. net.sourceforge.plantuml.style.ValueImpl
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleQrcode
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandLink3
net.sourceforge.plantuml.posimo.Clusterable <|.. net.sourceforge.plantuml.posimo.Block
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Lighten
net.sourceforge.plantuml.SpecificBackcolorable <|.. net.sourceforge.plantuml.sequencediagram.Participant
net.sourceforge.plantuml.style.WithStyle <|.. net.sourceforge.plantuml.sequencediagram.Participant
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementDate
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.eggs.PSystemEggFactory
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryExtendsLike
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryExtendsLike
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDiamondInside2
net.sourceforge.plantuml.project.lang.Subject <|.. net.sourceforge.plantuml.project.lang.SubjectResource
net.sourceforge.plantuml.project.lang.SubjectResource +.. net.sourceforge.plantuml.project.lang.SubjectResource.IsOffDate
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectResource.IsOffDate
net.sourceforge.plantuml.project.lang.SubjectResource +.. net.sourceforge.plantuml.project.lang.SubjectResource.IsOffDates
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectResource.IsOffDates
net.sourceforge.plantuml.project.lang.SubjectResource +.. net.sourceforge.plantuml.project.lang.SubjectResource.IsOffDayOfWeek
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectResource.IsOffDayOfWeek
net.sourceforge.plantuml.project.lang.SubjectResource +.. net.sourceforge.plantuml.project.lang.SubjectResource.IsOnDate
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectResource.IsOnDate
net.sourceforge.plantuml.project.lang.SubjectResource +.. net.sourceforge.plantuml.project.lang.SubjectResource.IsOnDates
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectResource.IsOnDates
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleCache
net.sourceforge.plantuml.tim.TMemory <|.. net.sourceforge.plantuml.tim.TMemoryGlobal
net.sourceforge.plantuml.tim.ExecutionContexts <|-- net.sourceforge.plantuml.tim.TMemoryGlobal
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.board.CommandBoardPlus
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileEmpty
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.flowdiagram.CommandLineSimple
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.braille.DriverCenteredCharacterBraille
net.sourceforge.plantuml.real.RealMoveable <|-- net.sourceforge.plantuml.real.RealDelta
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandReturn
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityNotNavigable
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Substr
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandAtTime
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.timingdiagram.graphic.TimeArrow
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.sequencediagram.SequenceDiagramFactory
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityArrowAndCircle
net.sourceforge.plantuml.salt.element.Skeleton2 +.. net.sourceforge.plantuml.salt.element.Skeleton2.Entry
net.sourceforge.plantuml.skin.AbstractComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseDelayLine
net.sourceforge.plantuml.dedication.Dedication <|.. net.sourceforge.plantuml.dedication.DedicationCrypted
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.gitlog.GitDiagram
net.sourceforge.plantuml.salt.element.Element <|.. net.sourceforge.plantuml.salt.element.AbstractElement
net.sourceforge.plantuml.svek.image.EntityImageStateCommon <|-- net.sourceforge.plantuml.svek.image.EntityImageState
net.sourceforge.plantuml.command.PSystemBasicFactory <|-- net.sourceforge.plantuml.acearth.PSystemXearthFactory
java.io.Closeable <|-- net.sourceforge.plantuml.preproc.ReadLine
net.sourceforge.plantuml.creole.Stripe <|.. net.sourceforge.plantuml.creole.legacy.StripeSimple
net.sourceforge.plantuml.activitydiagram3.ftile.Swimable <|-- net.sourceforge.plantuml.activitydiagram3.ftile.Ftile
net.sourceforge.plantuml.graphic.TextBlock <|-- net.sourceforge.plantuml.activitydiagram3.ftile.Ftile
net.sourceforge.plantuml.command.PSystemAbstractFactory <|-- net.sourceforge.plantuml.command.PSystemSingleLineFactory
net.sourceforge.plantuml.ugraphic.UShape <|.. net.sourceforge.plantuml.posimo.DotPath
net.sourceforge.plantuml.posimo.Moveable <|.. net.sourceforge.plantuml.posimo.DotPath
net.sourceforge.plantuml.posimo.DotPath +.. net.sourceforge.plantuml.posimo.DotPath.TriPoints
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterInclude
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverPixelSvg
net.sourceforge.plantuml.eps.PostScriptCommand <|.. net.sourceforge.plantuml.eps.PostScriptCommandMoveTo
net.sourceforge.plantuml.bpm.GridCleaner <|.. net.sourceforge.plantuml.bpm.CleanerMoveBlock
javax.swing.JFrame <|-- net.sourceforge.plantuml.swing.AboutWindow
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementImage
javax.swing.Scrollable <|.. net.sourceforge.plantuml.swing.ScrollablePicture
java.awt.event.MouseMotionListener <|.. net.sourceforge.plantuml.swing.ScrollablePicture
javax.swing.JLabel <|-- net.sourceforge.plantuml.swing.ScrollablePicture
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterIncludesub
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleSvgAttributeChange
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.descdiagram.CommandCreateDomain
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionList
net.sourceforge.plantuml.activitydiagram3.InstructionCollection <|.. net.sourceforge.plantuml.activitydiagram3.InstructionList
net.sourceforge.plantuml.activitydiagram3.WithNote <|-- net.sourceforge.plantuml.activitydiagram3.InstructionList
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.nwdiag.CommandLink
net.sourceforge.plantuml.ugraphic.UShape <|-- net.sourceforge.plantuml.creole.atom.Atom
net.sourceforge.plantuml.graphic.UGraphicDelegator <|-- net.sourceforge.plantuml.ugraphic.UGraphicFilter
net.sourceforge.plantuml.oregon.Keyboard <|.. net.sourceforge.plantuml.oregon.KeyboardList
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementSeveralDays
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.version.PSystemVersionFactory
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityTriangle
net.sourceforge.plantuml.creole.SheetBuilder <|.. net.sourceforge.plantuml.creole.rosetta.CreoleParser2
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityCircleConnect
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandEndPartition3
net.sourceforge.plantuml.command.regex.IRegex <|.. net.sourceforge.plantuml.command.regex.RegexComposed
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.timingdiagram.TimingDiagramFactory
net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic <|-- net.sourceforge.plantuml.ugraphic.AbstractUGraphic
net.sourceforge.plantuml.salt.element.Element <|.. net.sourceforge.plantuml.salt.element.ElementTextField
net.sourceforge.plantuml.salt.element.AbstractElementText <|-- net.sourceforge.plantuml.salt.element.ElementTextField
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.activitydiagram3.ftile.Swimlanes
net.sourceforge.plantuml.style.Styleable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.Swimlanes
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.activitydiagram3.ftile.Swimlanes
net.sourceforge.plantuml.activitydiagram3.ftile.Swimlanes +.. net.sourceforge.plantuml.activitydiagram3.ftile.Swimlanes.Cross
net.sourceforge.plantuml.activitydiagram3.ftile.UGraphicDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.Swimlanes.Cross
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Newline
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterDeclareReturnFunction
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageLollipopInterface
net.sourceforge.plantuml.cucadiagram.GroupHierarchy <|.. net.sourceforge.plantuml.cucadiagram.CucaDiagram
net.sourceforge.plantuml.cucadiagram.PortionShower <|.. net.sourceforge.plantuml.cucadiagram.CucaDiagram
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.cucadiagram.CucaDiagram
net.sourceforge.plantuml.cucadiagram.CucaDiagram +.. net.sourceforge.plantuml.cucadiagram.CucaDiagram.HideOrShow
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandWhile3
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverCenteredCharacterSvg
net.sourceforge.plantuml.project.core3.TaskLoad <|.. net.sourceforge.plantuml.project.core3.TaskLoadImpl
net.sourceforge.plantuml.activitydiagram3.ftile.Swimable <|.. net.sourceforge.plantuml.activitydiagram3.MonoSwimable
net.sourceforge.plantuml.activitydiagram3.WithNote <|-- net.sourceforge.plantuml.activitydiagram3.MonoSwimable
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandMinwidth
net.sourceforge.plantuml.posimo.Positionable <|.. net.sourceforge.plantuml.svek.SvekNode
net.sourceforge.plantuml.svek.IShapePseudo <|.. net.sourceforge.plantuml.svek.SvekNode
net.sourceforge.plantuml.Hideable <|.. net.sourceforge.plantuml.svek.SvekNode
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandLabel
net.sourceforge.plantuml.sequencediagram.Event <|.. net.sourceforge.plantuml.sequencediagram.LifeEvent
net.sourceforge.plantuml.sequencediagram.AbstractEvent <|-- net.sourceforge.plantuml.sequencediagram.LifeEvent
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.version.PSystemKeycheck
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.classdiagram.RowLayout
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolCollections
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.project.command.CommandPage
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandAffineTransform
net.sourceforge.plantuml.ugraphic.UShape <|-- net.sourceforge.plantuml.ugraphic.UShapeIgnorableForCompression
net.sourceforge.plantuml.sprite.Sprite <|.. net.sourceforge.plantuml.sprite.SpriteMonochrome
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.svek.image.ConnectedCircle
net.sourceforge.plantuml.code.Compression <|.. net.sourceforge.plantuml.code.CompressionZlib
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.svek.InnerActivity
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.InnerActivity
net.sourceforge.plantuml.api.INumberAnalyzed <|.. net.sourceforge.plantuml.api.NumberAnalyzed
net.sourceforge.plantuml.tim.TFunction <|.. net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterLegacyDefineLong
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram.command.CommandLinkActivity
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandAutoNewpage
net.sourceforge.plantuml.eps.EpsGraphicsMacro <|-- net.sourceforge.plantuml.eps.EpsGraphicsMacroAndText
net.sourceforge.plantuml.style.ValueAbstract <|-- net.sourceforge.plantuml.style.ValueColor
net.sourceforge.plantuml.ugraphic.UShape <|.. net.sourceforge.plantuml.ugraphic.UCenteredCharacter
net.sourceforge.plantuml.bpm.GridCleaner <|.. net.sourceforge.plantuml.bpm.CleanerEmptyLine
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolComponent2
net.sourceforge.plantuml.project.draw.TaskDraw <|.. net.sourceforge.plantuml.project.draw.AbstractTaskDraw
net.sourceforge.plantuml.sequencediagram.Event <|.. net.sourceforge.plantuml.sequencediagram.HSpace
net.sourceforge.plantuml.sequencediagram.AbstractEvent <|-- net.sourceforge.plantuml.sequencediagram.HSpace
net.sourceforge.plantuml.svek.CucaDiagramFileMaker <|.. net.sourceforge.plantuml.sdot.CucaDiagramFileMakerSmetana
net.sourceforge.plantuml.sdot.CucaDiagramFileMakerSmetana +.. net.sourceforge.plantuml.sdot.CucaDiagramFileMakerSmetana.Drawing
net.sourceforge.plantuml.sdot.TextBlockBackcolored <|.. net.sourceforge.plantuml.sdot.CucaDiagramFileMakerSmetana.Drawing
net.sourceforge.plantuml.sdot.AbstractTextBlock <|-- net.sourceforge.plantuml.sdot.CucaDiagramFileMakerSmetana.Drawing
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleMath
net.sourceforge.plantuml.real.Real <|.. net.sourceforge.plantuml.real.RealMax
net.sourceforge.plantuml.real.AbstractReal <|-- net.sourceforge.plantuml.real.RealMax
java.io.Closeable <|.. net.sourceforge.plantuml.code.deflate.OutputStreamProtected
net.sourceforge.plantuml.command.CommandMultilines <|-- net.sourceforge.plantuml.command.CommandAffineTransformMultiline
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.openiconic.PSystemListOpenIconicFactory
net.sourceforge.plantuml.sequencediagram.graphic.Segment +.. net.sourceforge.plantuml.sequencediagram.graphic.Segment.SortPos1
net.sourceforge.plantuml.sequencediagram.graphic.Comparator <|.. net.sourceforge.plantuml.sequencediagram.graphic.Segment.SortPos1
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.mindmap.CommandMindMapRoot
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandHideTimeAxis
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandSplit3
net.sourceforge.plantuml.svek.extremity.MiddleFactory <|.. net.sourceforge.plantuml.svek.extremity.MiddleFactoryCircle
net.sourceforge.plantuml.bpm.Chain <|.. net.sourceforge.plantuml.bpm.ChainImpl
net.sourceforge.plantuml.bpm.ChainImpl +.. net.sourceforge.plantuml.bpm.ChainImpl.InternalNavigator
net.sourceforge.plantuml.bpm.Navigator <|.. net.sourceforge.plantuml.bpm.ChainImpl.InternalNavigator
net.sourceforge.plantuml.svek.TextBlockBackcolored <|.. net.sourceforge.plantuml.svek.DecorateEntityImage
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.DecorateEntityImage
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterIfndef
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextDelay
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionVerticalIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionVerticalIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionVertical
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionVertical
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionLastElse
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionLastElse
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionLastElseOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionLastElseOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionThenOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionThenOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionThenOutConnect
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileIfLongVertical.ConnectionThenOutConnect
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolQueue
net.sourceforge.plantuml.graphic.USymbolQueue +.. net.sourceforge.plantuml.graphic.USymbolQueue.MyUGraphicQueue
net.sourceforge.plantuml.graphic.Stencil <|.. net.sourceforge.plantuml.graphic.USymbolQueue.MyUGraphicQueue
net.sourceforge.plantuml.graphic.AbstractUGraphicHorizontalLine <|-- net.sourceforge.plantuml.graphic.USymbolQueue.MyUGraphicQueue
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandCreateElementFull2
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.help.HelpFactory
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolFile
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TileImage
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TileImage
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterIncludeDef
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterReturn
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleSpot
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileBlackBlock
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandAutonumberStop
net.sourceforge.plantuml.creole.rosetta.ReaderWiki <|.. net.sourceforge.plantuml.creole.rosetta.ReaderCreole
net.sourceforge.plantuml.creole.rosetta.ReaderAbstractWiki <|-- net.sourceforge.plantuml.creole.rosetta.ReaderCreole
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.bpm.GridArray
net.sourceforge.plantuml.PlainStringsDiagram <|-- net.sourceforge.plantuml.eggs.PSystemAppleTwo
net.sourceforge.plantuml.svek.Point2DFunction <|.. net.sourceforge.plantuml.svek.YDelta
net.sourceforge.plantuml.skin.AbstractComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseActiveLine
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.project.command.CommandSeparator
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.skin.ActorHollow
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.skin.ActorHollow
net.sourceforge.plantuml.ugraphic.UShape <|-- net.sourceforge.plantuml.ugraphic.Shadowable
net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand <|.. net.sourceforge.plantuml.command.CommandFactorySprite
net.sourceforge.plantuml.project.Iterable <|.. net.sourceforge.plantuml.project.DaysAsDates
net.sourceforge.plantuml.project.DaysAsDates +.. net.sourceforge.plantuml.project.DaysAsDates.MyIterator
net.sourceforge.plantuml.project.Iterator <|.. net.sourceforge.plantuml.project.DaysAsDates.MyIterator
net.sourceforge.plantuml.ugraphic.UShape <|.. net.sourceforge.plantuml.ugraphic.UPixel
net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileWithConnection
net.sourceforge.plantuml.skin.Component <|.. net.sourceforge.plantuml.asciiart.AbstractComponentText
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AbstractAtom
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterDeclareProcedure
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Lower
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.sudoku.PSystemSudokuFactory
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextShape
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AtomSpace
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.AtomSpace
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.openiconic.PSystemOpenIconic
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseEnglober
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithDiamonds <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionHorizontalThenVertical
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionHorizontalThenVertical
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionVerticalThenHorizontal
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionVerticalThenHorizontal
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionVerticalTop
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionVerticalTop
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionVerticalBottom
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithManyLinks.ConnectionVerticalBottom
net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.GraphicalNewpage
net.sourceforge.plantuml.posimo.AbstractEntityImage2 <|-- net.sourceforge.plantuml.posimo.EntityImageNote2
java.io.Serializable <|.. net.sourceforge.plantuml.FileFormatOption
net.sourceforge.plantuml.code.URLEncoder <|.. net.sourceforge.plantuml.code.AsciiEncoderHex
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.wire.CommandSpot
net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.GraphicalDelayText
net.sourceforge.plantuml.Comparable <|-- net.sourceforge.plantuml.LineLocation
net.sourceforge.plantuml.real.RealOrigin <|.. net.sourceforge.plantuml.real.RealImpl
net.sourceforge.plantuml.real.RealMoveable <|-- net.sourceforge.plantuml.real.RealImpl
net.sourceforge.plantuml.command.PSystemAbstractFactory <|-- net.sourceforge.plantuml.yaml.YamlDiagramFactory
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Getenv
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.ElementFactoryImage
net.sourceforge.plantuml.style.Styleable <|-- net.sourceforge.plantuml.style.WithStyle
net.sourceforge.plantuml.skin.Component <|.. net.sourceforge.plantuml.skin.AbstractComponent
net.sourceforge.plantuml.ugraphic.AbstractPlacementStrategy <|-- net.sourceforge.plantuml.ugraphic.PlacementStrategyY1Y2
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder
net.sourceforge.plantuml.svek.TextBlockBackcolored <|.. net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineOnXorYBuilder
net.sourceforge.plantuml.ugraphic.ClipContainer <|.. net.sourceforge.plantuml.ugraphic.visio.UGraphicVdx
net.sourceforge.plantuml.ugraphic.UGraphic2 <|.. net.sourceforge.plantuml.ugraphic.visio.UGraphicVdx
net.sourceforge.plantuml.ugraphic.AbstractUGraphic <|-- net.sourceforge.plantuml.ugraphic.visio.UGraphicVdx
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileDimensionMemoize <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchNude
net.sourceforge.plantuml.telnet.Thread <|-- net.sourceforge.plantuml.telnet.AcceptTelnetClient
net.sourceforge.plantuml.project.LoadPlanable <|.. net.sourceforge.plantuml.project.ConstantPlan
net.sourceforge.plantuml.eps.PostScriptCommand <|.. net.sourceforge.plantuml.eps.PostScriptCommandLineTo
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseGroupingElse
net.sourceforge.plantuml.TitledDiagram <|-- net.sourceforge.plantuml.jsondiagram.JsonDiagram
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.cucadiagram.Body3
net.sourceforge.plantuml.svek.WithPorts <|.. net.sourceforge.plantuml.cucadiagram.Body3
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.cucadiagram.Body3
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandEndSwitch
net.sourceforge.plantuml.command.PSystemBasicFactory <|-- net.sourceforge.plantuml.logo.PSystemLogoFactory
net.sourceforge.plantuml.SpecificBackcolorable <|-- net.sourceforge.plantuml.cucadiagram.IEntity
net.sourceforge.plantuml.Hideable <|-- net.sourceforge.plantuml.cucadiagram.IEntity
net.sourceforge.plantuml.Removeable <|-- net.sourceforge.plantuml.cucadiagram.IEntity
net.sourceforge.plantuml.LineConfigurable <|-- net.sourceforge.plantuml.cucadiagram.IEntity
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterUndef
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.LifeEventTile
net.sourceforge.plantuml.skin.Component <|.. net.sourceforge.plantuml.skin.rose.ComponentRoseGroupingSpace
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandArrowLong3
net.sourceforge.plantuml.xmi.IXmiClassDiagram <|.. net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandIgnoreNewpage
net.sourceforge.plantuml.xmi.IXmiClassDiagram <|.. net.sourceforge.plantuml.xmi.XmiClassDiagramStar
net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract <|-- net.sourceforge.plantuml.xmi.XmiClassDiagramStar
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleLine
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleLine
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.mindmap.MindMapDiagram
net.sourceforge.plantuml.mindmap.MindMapDiagram +.. net.sourceforge.plantuml.mindmap.MindMapDiagram.Branch
net.sourceforge.plantuml.core.Diagram <|-- net.sourceforge.plantuml.WithSprite
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.CircledCharacter
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.CircledCharacter
net.sourceforge.plantuml.SkinParamDelegator <|-- net.sourceforge.plantuml.SkinParamForceColor
net.sourceforge.plantuml.brotli.RuntimeException <|-- net.sourceforge.plantuml.brotli.BrotliRuntimeException
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandClock
net.sourceforge.plantuml.preproc.ReadLine <|.. net.sourceforge.plantuml.preproc.UncommentReadLine
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterForeach
net.sourceforge.plantuml.command.Command <|.. net.sourceforge.plantuml.command.CommandMultilinesBracket
net.sourceforge.plantuml.api.mda.option2.MDAEntity <|.. net.sourceforge.plantuml.mda.MDAEntityImpl
net.sourceforge.plantuml.ugraphic.Iterable <|.. net.sourceforge.plantuml.ugraphic.UPath
net.sourceforge.plantuml.ugraphic.UShapeIgnorableForCompression <|.. net.sourceforge.plantuml.ugraphic.UPath
net.sourceforge.plantuml.ugraphic.AbstractShadowable <|-- net.sourceforge.plantuml.ugraphic.UPath
net.sourceforge.plantuml.sequencediagram.teoz.Tile <|.. net.sourceforge.plantuml.sequencediagram.teoz.NotesTile
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.NotesTile
net.sourceforge.plantuml.real.Real <|-- net.sourceforge.plantuml.real.RealOrigin
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.descdiagram.command.CommandArchimate
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.descdiagram.EntityImageMachine
net.sourceforge.plantuml.ugraphic.comp.Iterable <|.. net.sourceforge.plantuml.ugraphic.comp.SlotSet
net.sourceforge.plantuml.ugraphic.comp.PiecewiseAffineTransform <|.. net.sourceforge.plantuml.ugraphic.comp.ExpandTransform
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.bpm.BpmDiagramFactory
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolPerson
net.sourceforge.plantuml.posimo.Racorder <|.. net.sourceforge.plantuml.posimo.RacorderFollowTangeanteOld
net.sourceforge.plantuml.posimo.RacorderAbstract <|-- net.sourceforge.plantuml.posimo.RacorderFollowTangeanteOld
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandNewpage
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.timingdiagram.graphic.HexaShape
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryLineCrowfoot
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryLineCrowfoot
net.sourceforge.plantuml.preproc.ReadLine <|.. net.sourceforge.plantuml.preproc.ReadLineReader
net.sourceforge.plantuml.style.Value <|.. net.sourceforge.plantuml.style.ValueNull
net.sourceforge.plantuml.style.ValueAbstract <|-- net.sourceforge.plantuml.style.ValueNull
net.sourceforge.plantuml.code.Transcoder <|.. net.sourceforge.plantuml.code.TranscoderSmart
net.sourceforge.plantuml.Scale <|.. net.sourceforge.plantuml.ScaleWidth
net.sourceforge.plantuml.ScaleProtected <|-- net.sourceforge.plantuml.ScaleWidth
net.sourceforge.plantuml.timingdiagram.Clocks <|.. net.sourceforge.plantuml.timingdiagram.TimingDiagram
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.timingdiagram.TimingDiagram
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircle
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircle
net.sourceforge.plantuml.preproc2.ReadFilter <|.. net.sourceforge.plantuml.preproc2.ReadFilterMergeLines
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.statediagram.command.CommandConcurrentState
net.sourceforge.plantuml.Scale <|.. net.sourceforge.plantuml.ScaleHeight
net.sourceforge.plantuml.ScaleProtected <|-- net.sourceforge.plantuml.ScaleHeight
net.sourceforge.plantuml.project.lang.Subject <|.. net.sourceforge.plantuml.project.lang.SubjectLinks
net.sourceforge.plantuml.project.lang.SubjectLinks +.. net.sourceforge.plantuml.project.lang.SubjectLinks.InColor
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectLinks.InColor
net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram <|-- net.sourceforge.plantuml.descdiagram.DescriptionDiagram
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandLayoutNewLine
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.version.PSystemLicenseFactory
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementMenuEntry
net.sourceforge.plantuml.posimo.Racorder <|.. net.sourceforge.plantuml.posimo.RacorderInToCenter
net.sourceforge.plantuml.posimo.RacorderAbstract <|-- net.sourceforge.plantuml.posimo.RacorderInToCenter
net.sourceforge.plantuml.asciiart.UmlCharArea <|.. net.sourceforge.plantuml.asciiart.UmlCharAreaImpl
net.sourceforge.plantuml.asciiart.BasicCharAreaImpl <|-- net.sourceforge.plantuml.asciiart.UmlCharAreaImpl
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.oregon.PSystemOregon
net.sourceforge.plantuml.ugraphic.color.HColor <|.. net.sourceforge.plantuml.ugraphic.color.HColorNone
net.sourceforge.plantuml.ugraphic.color.HColorAbstract <|-- net.sourceforge.plantuml.ugraphic.color.HColorNone
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandElseLegacy1
net.sourceforge.plantuml.ISourceFileReader <|.. net.sourceforge.plantuml.SourceFileReader
net.sourceforge.plantuml.SourceFileReaderAbstract <|-- net.sourceforge.plantuml.SourceFileReader
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.wire.CommandComponent
net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand <|.. net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOnArrowCommand
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementEmpty
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementClose
net.sourceforge.plantuml.DefinitionsContainer <|.. net.sourceforge.plantuml.BlockUmlBuilder
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleLatex
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.bpm.CommandGoto
net.sourceforge.plantuml.ugraphic.UShape <|.. net.sourceforge.plantuml.ugraphic.UImage
net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileWithSwimlanes
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.project.draw.ResourceDraw
net.sourceforge.plantuml.cucadiagram.dot.AbstractGraphviz <|-- net.sourceforge.plantuml.cucadiagram.dot.GraphvizWindowsLite
net.sourceforge.plantuml.api.mda.option2.MDAPackage <|.. net.sourceforge.plantuml.mda.MDAPackageImpl
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityLineCrowfoot
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.flowdiagram.FlowDiagram
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.flowdiagram.FlowDiagram
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelfNoteRight
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandScaleWidthAndHeight
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.wire.CommandMove
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverPathSvg
net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d <|-- net.sourceforge.plantuml.ugraphic.svg.DriverPathSvg
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.AbstractEntityImageBorder
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandNamespaceSeparator
net.sourceforge.plantuml.sequencediagram.graphic.FileMaker <|.. net.sourceforge.plantuml.sequencediagram.graphic.SequenceDiagramFileMakerPuma2
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandHideShowByGender
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchNude <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithDiamonds
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileHeightFixedMarged
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockVertical2
net.sourceforge.plantuml.svek.WithPorts <|.. net.sourceforge.plantuml.graphic.TextBlockVertical2
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockVertical2
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileSelf
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCrowfoot
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCrowfoot
net.sourceforge.plantuml.graphic.TextBlock <|-- net.sourceforge.plantuml.wbs.ITF
net.sourceforge.plantuml.tim.Trie <|.. net.sourceforge.plantuml.tim.TrieImpl
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceTaskStartsAbsolute
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandLinkAnchor
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike
net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike +.. net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike.Point
net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike +.. net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike.Redefines
net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike <|-- net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike.Redefines
net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike +.. net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike.DefinedBy
net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike <|-- net.sourceforge.plantuml.svek.extremity.ExtremityExtendsLike.DefinedBy
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockMarged
net.sourceforge.plantuml.svek.WithPorts <|.. net.sourceforge.plantuml.graphic.TextBlockMarged
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockMarged
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandUrl
net.sourceforge.plantuml.argon2.Constants +.. net.sourceforge.plantuml.argon2.Constants.Defaults
net.sourceforge.plantuml.argon2.Constants +.. net.sourceforge.plantuml.argon2.Constants.Constraints
net.sourceforge.plantuml.argon2.Constants +.. net.sourceforge.plantuml.argon2.Constants.Messages
net.sourceforge.plantuml.svek.GroupPngMakerActivity +.. net.sourceforge.plantuml.svek.GroupPngMakerActivity.InnerGroupHierarchy
net.sourceforge.plantuml.svek.GroupHierarchy <|.. net.sourceforge.plantuml.svek.GroupPngMakerActivity.InnerGroupHierarchy
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandExoArrowAny
net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorateOut
net.sourceforge.plantuml.command.CommandMultilines <|-- net.sourceforge.plantuml.command.CommandMultilinesFooter
net.sourceforge.plantuml.project.draw.AbstractTaskDraw <|-- net.sourceforge.plantuml.project.draw.TaskDrawRegular
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandTicks
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.svek.DirectionalTextBlock
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.DirectionalTextBlock
net.sourceforge.plantuml.sequencediagram.CharSequence <|.. net.sourceforge.plantuml.sequencediagram.MessageNumber
net.sourceforge.plantuml.elk.proxy.graph.ElkWithProperty <|-- net.sourceforge.plantuml.elk.proxy.graph.ElkLabel
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.SetVariableValue
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.compositediagram.command.CommandCreateBlock
net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator <|-- net.sourceforge.plantuml.tim.iterator.CodeIteratorProcedure
net.sourceforge.plantuml.sequencediagram.Event <|-- net.sourceforge.plantuml.sequencediagram.EventWithDeactivate
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.visio.DriverPolygonVdx
net.sourceforge.plantuml.sequencediagram.Event <|.. net.sourceforge.plantuml.sequencediagram.Note
net.sourceforge.plantuml.SpecificBackcolorable <|.. net.sourceforge.plantuml.sequencediagram.Note
net.sourceforge.plantuml.style.WithStyle <|.. net.sourceforge.plantuml.sequencediagram.Note
net.sourceforge.plantuml.sequencediagram.AbstractEvent <|-- net.sourceforge.plantuml.sequencediagram.Note
net.sourceforge.plantuml.EnsureVisible <|.. net.sourceforge.plantuml.ugraphic.g2d.UGraphicG2d
net.sourceforge.plantuml.ugraphic.UGraphic2 <|.. net.sourceforge.plantuml.ugraphic.g2d.UGraphicG2d
net.sourceforge.plantuml.ugraphic.AbstractUGraphic <|-- net.sourceforge.plantuml.ugraphic.g2d.UGraphicG2d
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.version.PSystemLicense
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.version.PSystemLicense
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleColorChange
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.visio.DriverNoneVdx
net.sourceforge.plantuml.sequencediagram.Event <|.. net.sourceforge.plantuml.sequencediagram.Reference
net.sourceforge.plantuml.sequencediagram.AbstractEvent <|-- net.sourceforge.plantuml.sequencediagram.Reference
net.sourceforge.plantuml.posimo.Moveable <|-- net.sourceforge.plantuml.posimo.Positionable
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandPixelHeight
net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator <|-- net.sourceforge.plantuml.tim.iterator.CodeIteratorLegacyDefine
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverPolygonTikz
net.sourceforge.plantuml.sequencediagram.teoz.Tile <|.. net.sourceforge.plantuml.sequencediagram.teoz.TileMarged
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.TileMarged
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandEndif3
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementBeforeOrAfterOrAtTaskStartOrEnd
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AtomSprite
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.AtomSprite
net.sourceforge.plantuml.skin.rose.Rose <|-- net.sourceforge.plantuml.asciiart.TextSkin
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandGroupEnd3
net.sourceforge.plantuml.creole.Stencil <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileNoteAlone
net.sourceforge.plantuml.style.Styleable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileNoteAlone
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileNoteAlone
net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileWithUrl
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolComponent1
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.help.CommandHelpKeyword
net.sourceforge.plantuml.project.lang.Sentence <|.. net.sourceforge.plantuml.project.lang.SentenceSimple
net.sourceforge.plantuml.project.time.Comparable <|.. net.sourceforge.plantuml.project.time.Day
net.sourceforge.plantuml.project.Value <|.. net.sourceforge.plantuml.project.time.Day
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandAutonumberResume
net.sourceforge.plantuml.PlainStringsDiagram <|-- net.sourceforge.plantuml.eggs.PSystemLost
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.StringEater
net.sourceforge.plantuml.sprite.Sprite <|.. net.sourceforge.plantuml.sprite.SpriteImage
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractParallelFtilesBuilder <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ParallelBuilderSplit.ConnectionOut
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandPragma
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolHexagon
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.wire.WireDiagramFactory
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementMenuBar
net.sourceforge.plantuml.flashcode.FlashCodeUtils <|.. net.sourceforge.plantuml.flashcode.FlashCodeUtilsNone
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.project.command.CommandPrintScale
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolDatabase
net.sourceforge.plantuml.graphic.USymbolDatabase +.. net.sourceforge.plantuml.graphic.USymbolDatabase.MyUGraphicDatabase
net.sourceforge.plantuml.graphic.AbstractUGraphicHorizontalLine <|-- net.sourceforge.plantuml.graphic.USymbolDatabase.MyUGraphicDatabase
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterAffectation
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandCaption
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandAnalog
net.sourceforge.plantuml.activitydiagram3.ftile.Ftile <|.. net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile
net.sourceforge.plantuml.skin.Context2D <|.. net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile
net.sourceforge.plantuml.graphic.UGraphicDelegator <|-- net.sourceforge.plantuml.sequencediagram.teoz.UGraphicInterceptorTile
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.MiddleCircleCircled
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.RetrieveProcedure
net.sourceforge.plantuml.creole.Stripe <|.. net.sourceforge.plantuml.creole.legacy.StripeTree
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandDeactivateShort
net.sourceforge.plantuml.json.JsonValue <|-- net.sourceforge.plantuml.json.JsonLiteral
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.error.PSystemError
net.sourceforge.plantuml.project.core.Task <|.. net.sourceforge.plantuml.project.core.TaskSeparator
net.sourceforge.plantuml.project.core.AbstractTask <|-- net.sourceforge.plantuml.project.core.TaskSeparator
net.sourceforge.plantuml.Scale <|.. net.sourceforge.plantuml.ScaleMaxWidthAndHeight
net.sourceforge.plantuml.ScaleProtected <|-- net.sourceforge.plantuml.ScaleMaxWidthAndHeight
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.board.BoardDiagramFactory
net.sourceforge.plantuml.activitydiagram3.ftile.FtileEmpty <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileLabel
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.Bullet
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.Bullet
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandConstraint
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.ConnectionCross
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandGrouping
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.g2d.DriverTextAsPathG2d
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.timingdiagram.graphic.PentaBShape
net.sourceforge.plantuml.code.Compression <|.. net.sourceforge.plantuml.code.CompressionHuffman
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.openiconic.PSystemOpenIconicFactory
net.sourceforge.plantuml.creole.Stencil <|.. net.sourceforge.plantuml.svek.image.EntityImageClass
net.sourceforge.plantuml.svek.WithPorts <|.. net.sourceforge.plantuml.svek.image.EntityImageClass
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageClass
net.sourceforge.plantuml.sequencediagram.graphic.Pushable <|.. net.sourceforge.plantuml.sequencediagram.graphic.ParticipantBoxSimple
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.skin.ActorStickMan
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.skin.ActorStickMan
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextGroupingBody
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandNamespace
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverRectangleSvg
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.cucadiagram.MethodsOrFieldsArea
net.sourceforge.plantuml.svek.WithPorts <|.. net.sourceforge.plantuml.cucadiagram.MethodsOrFieldsArea
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.cucadiagram.MethodsOrFieldsArea
net.sourceforge.plantuml.cucadiagram.MethodsOrFieldsArea +.. net.sourceforge.plantuml.cucadiagram.MethodsOrFieldsArea.TextBlockTracer
net.sourceforge.plantuml.cucadiagram.TextBlock <|.. net.sourceforge.plantuml.cucadiagram.MethodsOrFieldsArea.TextBlockTracer
net.sourceforge.plantuml.cucadiagram.AbstractTextBlock <|-- net.sourceforge.plantuml.cucadiagram.MethodsOrFieldsArea.TextBlockTracer
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceOccurs
net.sourceforge.plantuml.project.lang.Subject <|.. net.sourceforge.plantuml.project.lang.SubjectToday
net.sourceforge.plantuml.project.lang.SubjectToday +.. net.sourceforge.plantuml.project.lang.SubjectToday.InColor
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectToday.InColor
net.sourceforge.plantuml.project.lang.SubjectToday +.. net.sourceforge.plantuml.project.lang.SubjectToday.IsDate
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectToday.IsDate
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.donors.PSystemSkinparameterListFactory
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionIn
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackSimple
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackSimple
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackSimple
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackBackward1
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackBackward1
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackBackward2
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackBackward2
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackEmpty
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionBackEmpty
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionOutSpecial
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileWhile.ConnectionOutSpecial
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.ElementFactoryRadioOff
net.sourceforge.plantuml.Hideable <|-- net.sourceforge.plantuml.svek.IEntityImage
net.sourceforge.plantuml.svek.TextBlockBackcolored <|-- net.sourceforge.plantuml.svek.IEntityImage
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandRepeatWhile3
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageState2
net.sourceforge.plantuml.asciiart.UmlCharArea <|.. net.sourceforge.plantuml.asciiart.TranslatedCharArea
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Filename
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfNude <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds
net.sourceforge.plantuml.ugraphic.comp.Comparable <|.. net.sourceforge.plantuml.ugraphic.comp.Slot
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.math.PSystemLatex
net.sourceforge.plantuml.wbs.ITF <|.. net.sourceforge.plantuml.wbs.ITFComposed
net.sourceforge.plantuml.wbs.WBSTextBlock <|-- net.sourceforge.plantuml.wbs.ITFComposed
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleConnect
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleConnect
net.sourceforge.plantuml.SpriteContainer <|.. net.sourceforge.plantuml.SpriteContainerEmpty
net.sourceforge.plantuml.ISkinSimple <|.. net.sourceforge.plantuml.SpriteContainerEmpty
net.sourceforge.plantuml.ugraphic.color.ColorMapper <|.. net.sourceforge.plantuml.ugraphic.color.AbstractColorMapper
net.sourceforge.plantuml.creole.Stencil <|.. net.sourceforge.plantuml.svek.image.EntityImageObject
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageObject
net.sourceforge.plantuml.ugraphic.UChange <|-- net.sourceforge.plantuml.ugraphic.color.HColor
net.sourceforge.plantuml.ugraphic.InflaterSet +.. net.sourceforge.plantuml.ugraphic.InflaterSet.Inflater
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.statediagram.command.CommandHideEmptyDescription
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandCircleSpot3
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteBottom
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.eggs.PSystemPath
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageLollipopInterfaceEye1
net.sourceforge.plantuml.sequencediagram.teoz.Tile <|.. net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.ReferenceTile
net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator <|-- net.sourceforge.plantuml.tim.iterator.CodeIteratorShortComment
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.classdiagram.ClassDiagramFactory
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandPartition3
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileSplit1
net.sourceforge.plantuml.api.ImageDataAbstract <|-- net.sourceforge.plantuml.api.ImageDataSimple
net.sourceforge.plantuml.project.draw.TimeHeaderCalendar <|-- net.sourceforge.plantuml.project.draw.TimeHeaderWeekly
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.descdiagram.command.CommandNewpage
java.io.OutputStream <|-- net.sourceforge.plantuml.NamedOutputStream
net.sourceforge.plantuml.ugraphic.UGraphic <|.. net.sourceforge.plantuml.ugraphic.AbstractCommonUGraphic
java.util.Iterator <|-- net.sourceforge.plantuml.version.IteratorCounter2
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandEnd3
net.sourceforge.plantuml.jsondiagram.SmetanaForJson +.. net.sourceforge.plantuml.jsondiagram.SmetanaForJson.InternalNode
net.sourceforge.plantuml.xmi.IXmiClassDiagram <|.. net.sourceforge.plantuml.xmi.XmiClassDiagramArgo
net.sourceforge.plantuml.xmi.XmiClassDiagramAbstract <|-- net.sourceforge.plantuml.xmi.XmiClassDiagramArgo
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.sudoku.PSystemSudoku
net.sourceforge.plantuml.activitydiagram3.ftile.Connection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.ConnectionTranslatable
net.sourceforge.plantuml.code.StringCompressor <|.. net.sourceforge.plantuml.code.StringCompressorNone
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionSwitch
net.sourceforge.plantuml.activitydiagram3.InstructionCollection <|.. net.sourceforge.plantuml.activitydiagram3.InstructionSwitch
net.sourceforge.plantuml.activitydiagram3.WithNote <|-- net.sourceforge.plantuml.activitydiagram3.InstructionSwitch
net.sourceforge.plantuml.ugraphic.AbstractUGraphicHorizontalLine <|-- net.sourceforge.plantuml.ugraphic.UGraphicStencil
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.sprite.StdlibDiagram
net.sourceforge.plantuml.ISkinParam <|.. net.sourceforge.plantuml.SkinParam
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.LogicalNot
net.sourceforge.plantuml.tim.expression.TokenStack +.. net.sourceforge.plantuml.tim.expression.TokenStack.InternalIterator
net.sourceforge.plantuml.tim.expression.TokenIterator <|.. net.sourceforge.plantuml.tim.expression.TokenStack.InternalIterator
net.sourceforge.plantuml.core.Diagram <|.. net.sourceforge.plantuml.UmlDiagram
net.sourceforge.plantuml.Annotated <|.. net.sourceforge.plantuml.UmlDiagram
net.sourceforge.plantuml.WithSprite <|.. net.sourceforge.plantuml.UmlDiagram
net.sourceforge.plantuml.TitledDiagram <|-- net.sourceforge.plantuml.UmlDiagram
net.sourceforge.plantuml.AParentFolder <|.. net.sourceforge.plantuml.AParentFolderZip
net.sourceforge.plantuml.project.core3.TimeLine <|.. net.sourceforge.plantuml.project.core3.TimeLineSimple
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.FunctionExists
net.sourceforge.plantuml.ugraphic.ClipContainer <|.. net.sourceforge.plantuml.ugraphic.eps.UGraphicEps
net.sourceforge.plantuml.ugraphic.UGraphic2 <|.. net.sourceforge.plantuml.ugraphic.eps.UGraphicEps
net.sourceforge.plantuml.ugraphic.AbstractUGraphic <|-- net.sourceforge.plantuml.ugraphic.eps.UGraphicEps
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceHappens
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.GetVersion
net.sourceforge.plantuml.posimo.IEntityImageBlock <|.. net.sourceforge.plantuml.posimo.AbstractEntityImage2
net.sourceforge.plantuml.code.Transcoder <|.. net.sourceforge.plantuml.code.TranscoderImpl
java.io.Closeable <|-- net.sourceforge.plantuml.code.deflate.BitInputStream
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityOther
net.sourceforge.plantuml.cucadiagram.CucaDiagram <|-- net.sourceforge.plantuml.activitydiagram.ActivityDiagram
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementInColors
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.braille.DriverPolygonBraille
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryParenthesis
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryParenthesis
net.sourceforge.plantuml.command.Command <|.. net.sourceforge.plantuml.command.CommandMultilines2
net.sourceforge.plantuml.LineLocation <|.. net.sourceforge.plantuml.LineLocationImpl
net.sourceforge.plantuml.ugraphic.UShape <|.. net.sourceforge.plantuml.activitydiagram3.ftile.Snake
net.sourceforge.plantuml.activitydiagram3.ftile.Snake +.. net.sourceforge.plantuml.activitydiagram3.ftile.Snake.Text
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageTips
java.awt.geom.Dimension2D <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileGeometry
net.sourceforge.plantuml.security.Comparable <|.. net.sourceforge.plantuml.security.SFile
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.project.command.CommandGanttArrow2
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryArrow
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryArrow
java.util.LinkedHashMap <|-- net.sourceforge.plantuml.command.regex.MaxSizeHashMap
net.sourceforge.plantuml.sprite.Sprite <|.. net.sourceforge.plantuml.sprite.SpriteColor
net.sourceforge.plantuml.SpriteContainer <|.. net.sourceforge.plantuml.salt.Dictionary
net.sourceforge.plantuml.ISkinSimple <|.. net.sourceforge.plantuml.salt.Dictionary
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.statediagram.command.CommandEndState
net.sourceforge.plantuml.command.Command <|.. net.sourceforge.plantuml.command.ProtectedCommand
net.sourceforge.plantuml.yaml.Iterable <|.. net.sourceforge.plantuml.yaml.YamlLines
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementEmpty
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.jcckit.PSystemJcckit
net.sourceforge.plantuml.tim.Exception <|-- net.sourceforge.plantuml.tim.EaterException
net.sourceforge.plantuml.sequencediagram.teoz.Tile <|.. net.sourceforge.plantuml.sequencediagram.teoz.CommonTile
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.sequencediagram.teoz.CommonTile
net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex <|-- net.sourceforge.plantuml.salt.factory.ElementFactoryScroll
net.sourceforge.plantuml.graphic.UGraphicDelegator <|-- net.sourceforge.plantuml.sequencediagram.teoz.UGraphicNewpages
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.DateFunction
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.version.PSystemKeygen
net.sourceforge.plantuml.svek.image.Footprint +.. net.sourceforge.plantuml.svek.image.Footprint.MyUGraphic
net.sourceforge.plantuml.svek.image.UGraphic <|.. net.sourceforge.plantuml.svek.image.Footprint.MyUGraphic
net.sourceforge.plantuml.svek.image.UGraphicNo <|-- net.sourceforge.plantuml.svek.image.Footprint.MyUGraphic
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.sprite.PSystemListInternalSpritesFactory
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandStereotype
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.board.BoardDiagram
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.directdot.PSystemDot
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandPackage
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.eggs.PSystemCharlieFactory
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandActivate
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.svek.CircleInterface2
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.CircleInterface2
net.sourceforge.plantuml.ugraphic.AbstractShadowable <|-- net.sourceforge.plantuml.ugraphic.UPolygon
net.sourceforge.plantuml.preproc2.PreprocessorModeSet <|-- net.sourceforge.plantuml.DefinitionsContainer
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceLinksTo
net.sourceforge.plantuml.salt.element.Skeleton +.. net.sourceforge.plantuml.salt.element.Skeleton.Entry
net.sourceforge.plantuml.asciiart.BasicCharArea <|.. net.sourceforge.plantuml.asciiart.BasicCharAreaImpl
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AtomTree
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.AtomTree
net.sourceforge.plantuml.timingdiagram.graphic.PDrawing <|.. net.sourceforge.plantuml.timingdiagram.graphic.Ribbon
net.sourceforge.plantuml.cucadiagram.WithLinkType <|-- net.sourceforge.plantuml.timingdiagram.TimeMessage
net.sourceforge.plantuml.preproc2.ReadFilter <|.. net.sourceforge.plantuml.preproc2.ReadFilterQuoteComment
net.sourceforge.plantuml.sequencediagram.teoz.Tile <|.. net.sourceforge.plantuml.sequencediagram.teoz.EmptyTile
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.EmptyTile
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceTaskEndsAbsolute
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Upper
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.PairOfSomething
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.compositediagram.command.CommandEndPackageBlock
net.sourceforge.plantuml.dedication.Dedication <|.. net.sourceforge.plantuml.dedication.DedicationSimple
net.sourceforge.plantuml.openiconic.SvgCommand <|.. net.sourceforge.plantuml.openiconic.SvgCommandNumber
net.sourceforge.plantuml.ugraphic.UShape <|.. net.sourceforge.plantuml.ugraphic.UEmpty
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.wbs.WBSDiagram
net.sourceforge.plantuml.ugraphic.UChange <|.. net.sourceforge.plantuml.ugraphic.UTranslate
net.sourceforge.plantuml.argon2.exception.Argon2Exception <|-- net.sourceforge.plantuml.argon2.exception.Argon2InvalidParameterException
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementCompleted
net.sourceforge.plantuml.sequencediagram.graphic.Frontier <|-- net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack
net.sourceforge.plantuml.ISourceFileReader <|.. net.sourceforge.plantuml.SourceFileReaderHardFile
net.sourceforge.plantuml.SourceFileReaderAbstract <|-- net.sourceforge.plantuml.SourceFileReaderHardFile
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentencePausesDates
net.sourceforge.plantuml.brotli.Dictionary +.. net.sourceforge.plantuml.brotli.Dictionary.DataLoader
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockTitle
net.sourceforge.plantuml.AFile <|.. net.sourceforge.plantuml.AFileZipEntry
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.eggs.PSystemCharlie
net.sourceforge.plantuml.Stdrpt <|.. net.sourceforge.plantuml.StdrptV2
net.sourceforge.plantuml.ugraphic.UShape <|.. net.sourceforge.plantuml.ugraphic.UHorizontalLine
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleStyle2
net.sourceforge.plantuml.creole.command.CommandCreoleCache <|-- net.sourceforge.plantuml.creole.command.CommandCreoleStyle2
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.Token
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.Parser
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.Statement
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.Expression
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.PrintStatement
net.sourceforge.plantuml.jasic.Statement <|.. net.sourceforge.plantuml.jasic.Jasic.PrintStatement
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.InputStatement
net.sourceforge.plantuml.jasic.Statement <|.. net.sourceforge.plantuml.jasic.Jasic.InputStatement
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.AssignStatement
net.sourceforge.plantuml.jasic.Statement <|.. net.sourceforge.plantuml.jasic.Jasic.AssignStatement
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.GotoStatement
net.sourceforge.plantuml.jasic.Statement <|.. net.sourceforge.plantuml.jasic.Jasic.GotoStatement
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.IfThenStatement
net.sourceforge.plantuml.jasic.Statement <|.. net.sourceforge.plantuml.jasic.Jasic.IfThenStatement
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.VariableExpression
net.sourceforge.plantuml.jasic.Expression <|.. net.sourceforge.plantuml.jasic.Jasic.VariableExpression
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.OperatorExpression
net.sourceforge.plantuml.jasic.Expression <|.. net.sourceforge.plantuml.jasic.Jasic.OperatorExpression
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.Value
net.sourceforge.plantuml.jasic.Expression <|-- net.sourceforge.plantuml.jasic.Jasic.Value
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.NumberValue
net.sourceforge.plantuml.jasic.Value <|.. net.sourceforge.plantuml.jasic.Jasic.NumberValue
net.sourceforge.plantuml.jasic.Jasic +.. net.sourceforge.plantuml.jasic.Jasic.StringValue
net.sourceforge.plantuml.jasic.Value <|.. net.sourceforge.plantuml.jasic.Jasic.StringValue
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextGroupingElse
net.sourceforge.plantuml.PlainStringsDiagram <|-- net.sourceforge.plantuml.eggs.PSystemEgg
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandNamespace2
net.sourceforge.plantuml.graphic.FontChange <|.. net.sourceforge.plantuml.graphic.SvgAttributesChange
net.sourceforge.plantuml.command.regex.IRegex <|.. net.sourceforge.plantuml.command.regex.RegexOptional
net.sourceforge.plantuml.command.regex.RegexComposed <|-- net.sourceforge.plantuml.command.regex.RegexOptional
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverUTextTikz
net.sourceforge.plantuml.ugraphic.color.HColor <|.. net.sourceforge.plantuml.ugraphic.color.HColorAbstract
net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator <|-- net.sourceforge.plantuml.tim.iterator.CodeIteratorLongComment
net.sourceforge.plantuml.project.Value <|.. net.sourceforge.plantuml.project.Load
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.svek.InnerStateAutonom
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.InnerStateAutonom
net.sourceforge.plantuml.posimo.Moveable <|.. net.sourceforge.plantuml.svek.DotStringFactory
net.sourceforge.plantuml.timingdiagram.Player <|-- net.sourceforge.plantuml.timingdiagram.PlayerBinary
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.nwdiag.CommandNetwork
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.activitydiagram3.ActivityDiagram3
net.sourceforge.plantuml.zopfli.Zopfli +.. net.sourceforge.plantuml.zopfli.Zopfli.Crc
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.mindmap.CommandMindMapDirection
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageStateCommon
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.wire.CommandNewColumn
net.sourceforge.plantuml.svek.IEntityImage <|-- net.sourceforge.plantuml.svek.Untranslated
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.compositediagram.command.CommandLinkBlock
net.sourceforge.plantuml.EnsureVisible <|.. net.sourceforge.plantuml.BasicEnsureVisible
net.sourceforge.plantuml.real.Real <|.. net.sourceforge.plantuml.real.RealMin
net.sourceforge.plantuml.real.AbstractReal <|-- net.sourceforge.plantuml.real.RealMin
net.sourceforge.plantuml.sequencediagram.InGroupable <|.. net.sourceforge.plantuml.sequencediagram.graphic.Arrow
net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.Arrow
net.sourceforge.plantuml.salt.element.Element <|.. net.sourceforge.plantuml.salt.element.WrappedElement
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleCross
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryCircleCross
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.wbs.WBSTextBlock
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandHideShowSpecificClass
net.sourceforge.plantuml.graphic.StringBounder <|.. net.sourceforge.plantuml.graphic.StringBounderRaw
net.sourceforge.plantuml.ugraphic.Scalable <|.. net.sourceforge.plantuml.ugraphic.URectangle
net.sourceforge.plantuml.ugraphic.UShapeSized <|.. net.sourceforge.plantuml.ugraphic.URectangle
net.sourceforge.plantuml.ugraphic.UShapeIgnorableForCompression <|.. net.sourceforge.plantuml.ugraphic.URectangle
net.sourceforge.plantuml.ugraphic.AbstractShadowable <|-- net.sourceforge.plantuml.ugraphic.URectangle
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.activitydiagram.command.CommandLinkLongActivity
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.SimpleTextBlockBordered
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.SimpleTextBlockBordered
net.sourceforge.plantuml.svek.image.EntityImagePseudoState <|-- net.sourceforge.plantuml.svek.image.EntityImageDeepHistory
net.sourceforge.plantuml.ugraphic.UGraphic <|.. net.sourceforge.plantuml.ugraphic.TextLimitFinder
net.sourceforge.plantuml.ugraphic.UGraphicNo <|-- net.sourceforge.plantuml.ugraphic.TextLimitFinder
net.sourceforge.plantuml.graphic.USymbolSimpleAbstract <|-- net.sourceforge.plantuml.graphic.USymbolEntityDomain
net.sourceforge.plantuml.svek.ArithmeticStrategy <|.. net.sourceforge.plantuml.svek.ArithmeticStrategySum
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileDimensionMemoize
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteLeft
net.sourceforge.plantuml.ugraphic.comp.Comparable <|.. net.sourceforge.plantuml.ugraphic.comp.Expand
net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileMargedVertically
net.sourceforge.plantuml.svek.RuntimeException <|-- net.sourceforge.plantuml.svek.EmptySvgException
net.sourceforge.plantuml.sequencediagram.InGroupable <|.. net.sourceforge.plantuml.sequencediagram.InGroupableList
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.objectdiagram.command.CommandAddData
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandUrl
net.sourceforge.plantuml.command.CommandMultilines <|-- net.sourceforge.plantuml.command.CommandMultilinesHeader
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.bpm.CommandElseBranch
net.sourceforge.plantuml.command.Command <|.. net.sourceforge.plantuml.command.CommandDecoratorMultine
net.sourceforge.plantuml.WithSprite <|.. net.sourceforge.plantuml.salt.PSystemSalt
net.sourceforge.plantuml.TitledDiagram <|-- net.sourceforge.plantuml.salt.PSystemSalt
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityStateLine2
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceIsForTask
net.sourceforge.plantuml.sequencediagram.command.CommandParticipant <|-- net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA4
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandAllowMixing
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.math.PSystemMath
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleStop
net.sourceforge.plantuml.posimo.Moveable <|.. net.sourceforge.plantuml.svek.SvekLine
net.sourceforge.plantuml.Hideable <|.. net.sourceforge.plantuml.svek.SvekLine
net.sourceforge.plantuml.svek.GuideLine <|.. net.sourceforge.plantuml.svek.SvekLine
net.sourceforge.plantuml.SpecificBackcolorable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.Swimlane
net.sourceforge.plantuml.graphic.TextBlock <|-- net.sourceforge.plantuml.graphic.Line
net.sourceforge.plantuml.timingdiagram.TimeProjected <|.. net.sourceforge.plantuml.timingdiagram.Player
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.logo.PSystemLogo
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandNope
net.sourceforge.plantuml.oregon.Exception <|-- net.sourceforge.plantuml.oregon.NoInputException
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.descdiagram.command.CommandCreateElementMultilines
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextNewpage
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageGroup
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram.command.CommandIf
net.sourceforge.plantuml.ugraphic.color.ColorMapper <|.. net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity
net.sourceforge.plantuml.ugraphic.color.AbstractColorMapper <|-- net.sourceforge.plantuml.ugraphic.color.ColorMapperIdentity
net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand <|.. net.sourceforge.plantuml.command.note.CommandFactoryNoteOnEntity
net.sourceforge.plantuml.command.regex.Iterable <|.. net.sourceforge.plantuml.command.regex.RegexPartialMatch
net.sourceforge.plantuml.project.core.Task <|.. net.sourceforge.plantuml.project.core.AbstractTask
net.sourceforge.plantuml.cucadiagram.Code <|.. net.sourceforge.plantuml.cucadiagram.Ident
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.bpm.BpmDiagram
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.svek.extremity.Extremity
net.sourceforge.plantuml.tim.iterator.CodeIterator <|.. net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandEndPackage
net.sourceforge.plantuml.posimo.Racorder <|.. net.sourceforge.plantuml.posimo.RacorderFollowTangeante
net.sourceforge.plantuml.posimo.RacorderAbstract <|-- net.sourceforge.plantuml.posimo.RacorderFollowTangeante
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithDiamonds <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionHorizontalThenVertical
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionHorizontalThenVertical
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionHorizontalThenVertical
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionVerticalThenHorizontal
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionVerticalThenHorizontal
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionVerticalThenHorizontal
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionVerticalThenHorizontalDirect
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionVerticalThenHorizontalDirect
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionVerticalThenHorizontalDirect
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionVerticalOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionVerticalOut
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionHline
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileIfWithLinks.ConnectionHline
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.statediagram.command.CommandAddField
net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator <|-- net.sourceforge.plantuml.tim.iterator.CodeIteratorAffectation
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram.command.CommandPartition
net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand <|.. net.sourceforge.plantuml.command.note.CommandFactoryNote
net.sourceforge.plantuml.version.IteratorCounter2 <|.. net.sourceforge.plantuml.version.IteratorCounter2Impl
net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram <|-- net.sourceforge.plantuml.statediagram.StateDiagram
net.sourceforge.plantuml.tim.TMemory <|.. net.sourceforge.plantuml.tim.TMemoryLocal
net.sourceforge.plantuml.tim.ExecutionContexts <|-- net.sourceforge.plantuml.tim.TMemoryLocal
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.Strpos
net.sourceforge.plantuml.project.core.Task <|.. net.sourceforge.plantuml.project.core.TaskImpl
net.sourceforge.plantuml.project.LoadPlanable <|.. net.sourceforge.plantuml.project.core.TaskImpl
net.sourceforge.plantuml.project.core.AbstractTask <|-- net.sourceforge.plantuml.project.core.TaskImpl
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandFork3
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.eps.DriverCenteredCharacterEps
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolArtifact
net.sourceforge.plantuml.ugraphic.color.HColor <|.. net.sourceforge.plantuml.ugraphic.color.HColorSimple
net.sourceforge.plantuml.ugraphic.color.HColorAbstract <|-- net.sourceforge.plantuml.ugraphic.color.HColorSimple
net.sourceforge.plantuml.creole.Stripe <|.. net.sourceforge.plantuml.creole.rosetta.StripeRow
net.sourceforge.plantuml.math.ScientificEquation <|.. net.sourceforge.plantuml.math.LatexBuilder
net.sourceforge.plantuml.math.LatexBuilder +.. net.sourceforge.plantuml.math.LatexBuilder.LatexImage
net.sourceforge.plantuml.math.MutableImage <|.. net.sourceforge.plantuml.math.LatexBuilder.LatexImage
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.ElementFactoryCheckboxOn
net.sourceforge.plantuml.json.JsonValue <|-- net.sourceforge.plantuml.json.JsonString
net.sourceforge.plantuml.command.Command <|.. net.sourceforge.plantuml.command.SingleLineCommand2
net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram <|-- net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram
net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram +.. net.sourceforge.plantuml.objectdiagram.AbstractClassOrObjectDiagram.Association
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionStop
net.sourceforge.plantuml.activitydiagram3.MonoSwimable <|-- net.sourceforge.plantuml.activitydiagram3.InstructionStop
net.sourceforge.plantuml.svek.extremity.MiddleFactory <|.. net.sourceforge.plantuml.svek.extremity.MiddleFactoryCircleCircled
net.sourceforge.plantuml.SpriteContainer <|-- net.sourceforge.plantuml.ISkinSimple
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.eps.DriverEllipseEps
net.sourceforge.plantuml.swing.Comparable <|.. net.sourceforge.plantuml.swing.SimpleLine2
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandDivider
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.descdiagram.command.CommandCreateElementFull
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.sdot.SmetanaPath
net.sourceforge.plantuml.cucadiagram.IGroup <|.. net.sourceforge.plantuml.cucadiagram.GroupRoot
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementTree
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseEntity
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandAtPlayer
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.IntVal
net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactoryDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorSwitch
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.html5.DriverRectangleHtml5
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandAutonumberIncrement
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.nwdiag.VerticalLine
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.compositediagram.command.CommandCreatePackageBlock
net.sourceforge.plantuml.creole.Stripe <|.. net.sourceforge.plantuml.creole.legacy.StripeTable
net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElement
net.sourceforge.plantuml.code.URLEncoder <|.. net.sourceforge.plantuml.code.AsciiEncoder
java.util.Iterator <|-- net.sourceforge.plantuml.svek.PointListIterator
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.descdiagram.DescriptionDiagramFactory
net.sourceforge.plantuml.salt.factory.ElementFactory <|.. net.sourceforge.plantuml.salt.factory.ElementFactoryTextField
net.sourceforge.plantuml.cucadiagram.BodyEnhancedAbstract <|-- net.sourceforge.plantuml.cucadiagram.BodyEnhanced2
net.sourceforge.plantuml.cucadiagram.IEntity <|-- net.sourceforge.plantuml.cucadiagram.ILeaf
net.sourceforge.plantuml.ugraphic.color.HColor <|.. net.sourceforge.plantuml.ugraphic.color.HColorMiddle
net.sourceforge.plantuml.ugraphic.color.HColorAbstract <|-- net.sourceforge.plantuml.ugraphic.color.HColorMiddle
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementText
net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactoryDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorAddNote
net.sourceforge.plantuml.sequencediagram.InGroupable <|.. net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference
net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.GraphicalReference
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.wire.CommandPrint
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.eps.DriverLineEps
net.sourceforge.plantuml.code.Compression <|.. net.sourceforge.plantuml.code.CompressionZopfliZlib
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleSizeChange
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionLabel
net.sourceforge.plantuml.activitydiagram3.MonoSwimable <|-- net.sourceforge.plantuml.activitydiagram3.InstructionLabel
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverUPathTikz
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.objectdiagram.command.CommandCreateMap
net.sourceforge.plantuml.creole.rosetta.ReaderWiki <|.. net.sourceforge.plantuml.creole.rosetta.ReaderAbstractWiki
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.activitydiagram3.ftile.GotoInterceptor
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.activitydiagram3.ftile.GotoInterceptor
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextNote
java.io.InputStream <|-- net.sourceforge.plantuml.brotli.BrotliInputStream
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremitySquare
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d
net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d <|-- net.sourceforge.plantuml.ugraphic.g2d.DriverRectangleG2d
net.sourceforge.plantuml.graphic.UGraphicDelegator <|-- net.sourceforge.plantuml.ugraphic.comp.UGraphicCompressOnXorY
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandBreak
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverTextSvg
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionGoto
net.sourceforge.plantuml.activitydiagram3.MonoSwimable <|-- net.sourceforge.plantuml.activitydiagram3.InstructionGoto
net.sourceforge.plantuml.command.PSystemAbstractFactory <|-- net.sourceforge.plantuml.command.PSystemBasicFactory
net.sourceforge.plantuml.project.solver.AbstractSolver <|-- net.sourceforge.plantuml.project.solver.Solver3
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandCreateClassMultilines
net.sourceforge.plantuml.core.Diagram <|.. net.sourceforge.plantuml.AbstractPSystem
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileCircleStart
net.sourceforge.plantuml.graphic.HtmlCommand <|.. net.sourceforge.plantuml.graphic.TextLink
net.sourceforge.plantuml.command.note.SingleMultiFactoryCommand <|.. net.sourceforge.plantuml.command.note.sequence.FactorySequenceNoteOverSeveralCommand
net.sourceforge.plantuml.ISkinParam <|.. net.sourceforge.plantuml.SkinParamDelegator
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.dedication.PSystemDedicationFactory
net.sourceforge.plantuml.tim.iterator.AbstractCodeIterator <|-- net.sourceforge.plantuml.tim.iterator.CodeIteratorForeach
net.sourceforge.plantuml.ugraphic.UGraphic <|.. net.sourceforge.plantuml.ugraphic.comp.SlotFinder
net.sourceforge.plantuml.ugraphic.UGraphicNo <|-- net.sourceforge.plantuml.ugraphic.comp.SlotFinder
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleSpace
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageAssociation
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d
net.sourceforge.plantuml.ugraphic.g2d.DriverShadowedG2d <|-- net.sourceforge.plantuml.ugraphic.g2d.DriverPathG2d
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandActivity3
net.sourceforge.plantuml.project.ToTaskDraw <|.. net.sourceforge.plantuml.project.GanttDiagram
net.sourceforge.plantuml.WithSprite <|.. net.sourceforge.plantuml.project.GanttDiagram
net.sourceforge.plantuml.TitledDiagram <|-- net.sourceforge.plantuml.project.GanttDiagram
net.sourceforge.plantuml.ugraphic.PlacementStrategy <|.. net.sourceforge.plantuml.ugraphic.AbstractPlacementStrategy
net.sourceforge.plantuml.project.lang.Subject <|.. net.sourceforge.plantuml.project.lang.SubjectProject
net.sourceforge.plantuml.project.lang.SubjectProject +.. net.sourceforge.plantuml.project.lang.SubjectProject.Starts
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SubjectProject.Starts
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.mindmap.CommandMindMapOrgmode
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandIf4
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterLog
net.sourceforge.plantuml.code.URLEncoder <|.. net.sourceforge.plantuml.code.AsciiEncoderBase64
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.skin.ActorAwesome
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.skin.ActorAwesome
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandRemoveRestore
net.sourceforge.plantuml.command.CommandMultilines <|-- net.sourceforge.plantuml.command.CommandMultilinesComment
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.statediagram.command.CommandLinkState
net.sourceforge.plantuml.mjpeg.MJPEGGenerator +.. net.sourceforge.plantuml.mjpeg.MJPEGGenerator.RIFFHeader
net.sourceforge.plantuml.mjpeg.MJPEGGenerator +.. net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIMainHeader
net.sourceforge.plantuml.mjpeg.MJPEGGenerator +.. net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIStreamList
net.sourceforge.plantuml.mjpeg.MJPEGGenerator +.. net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIStreamHeader
net.sourceforge.plantuml.mjpeg.MJPEGGenerator +.. net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIStreamFormat
net.sourceforge.plantuml.mjpeg.MJPEGGenerator +.. net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIMovieList
net.sourceforge.plantuml.mjpeg.MJPEGGenerator +.. net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIIndexList
net.sourceforge.plantuml.mjpeg.MJPEGGenerator +.. net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIIndex
net.sourceforge.plantuml.mjpeg.MJPEGGenerator +.. net.sourceforge.plantuml.mjpeg.MJPEGGenerator.AVIJunk
net.sourceforge.plantuml.svek.CucaDiagramFileMaker <|.. net.sourceforge.plantuml.svek.CucaDiagramFileMakerSvek
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterElseIf
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageSynchroBar
net.sourceforge.plantuml.sequencediagram.InGroupable <|.. net.sourceforge.plantuml.sequencediagram.graphic.NoteBox
net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.NoteBox
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageClassHeader
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.CommunicationExoTile
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageLollipopInterfaceEye2
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AtomImgSvg
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.AtomImgSvg
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.NewpageTile
net.sourceforge.plantuml.salt.factory.AbstractElementFactoryComplex <|-- net.sourceforge.plantuml.salt.factory.ElementFactoryMenu
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.help.CommandHelpColor
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandArrow
net.sourceforge.plantuml.Comparable <|-- net.sourceforge.plantuml.GeneratedImage
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.braille.DriverRectangleBraille
net.sourceforge.plantuml.posimo.Positionable <|-- net.sourceforge.plantuml.posimo.Clusterable
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandMainframe
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TileText
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TileText
net.sourceforge.plantuml.code.Compression <|.. net.sourceforge.plantuml.code.CompressionZlibAttic
net.sourceforge.plantuml.sudoku.ISudoku <|.. net.sourceforge.plantuml.sudoku.SudokuDLX
net.sourceforge.plantuml.AbstractPSystem <|-- net.sourceforge.plantuml.acearth.PSystemXearth
net.sourceforge.plantuml.sequencediagram.InGroupable <|.. net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox
net.sourceforge.plantuml.sequencediagram.graphic.Arrow <|-- net.sourceforge.plantuml.sequencediagram.graphic.ArrowAndNoteBox
net.sourceforge.plantuml.xmi.IXmiClassDiagram <|.. net.sourceforge.plantuml.xmi.XmiDescriptionDiagram
javax.swing.JFrame <|-- net.sourceforge.plantuml.swing.ImageWindow2
net.sourceforge.plantuml.command.PSystemBasicFactory <|-- net.sourceforge.plantuml.math.PSystemLatexFactory
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandTimeMessage
net.sourceforge.plantuml.api.PSystemFactory <|.. net.sourceforge.plantuml.eggs.PSystemWelcomeFactory
net.sourceforge.plantuml.ugraphic.UShape <|-- net.sourceforge.plantuml.ugraphic.UShapeSized
net.sourceforge.plantuml.project.core.Moment <|-- net.sourceforge.plantuml.project.core.Task
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.svek.AbstractEntityImage
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.AbstractEntityImage
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.font.PSystemListFontsFactory
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.atom.AtomImg
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.atom.AtomImg
net.sourceforge.plantuml.svek.WithPorts <|.. net.sourceforge.plantuml.cucadiagram.TextBlockMap
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.cucadiagram.TextBlockMap
net.sourceforge.plantuml.cucadiagram.TextBlockMap +.. net.sourceforge.plantuml.cucadiagram.TextBlockMap.Point
net.sourceforge.plantuml.cucadiagram.AbstractTextBlock <|-- net.sourceforge.plantuml.cucadiagram.TextBlockMap.Point
net.sourceforge.plantuml.cucadiagram.dot.Graphviz <|.. net.sourceforge.plantuml.cucadiagram.dot.AbstractGraphviz
net.sourceforge.plantuml.skin.AbstractComponent <|-- net.sourceforge.plantuml.skin.AbstractTextualComponent
net.sourceforge.plantuml.ugraphic.color.ColorMapper <|.. net.sourceforge.plantuml.ugraphic.color.ColorMapperMonochrome
net.sourceforge.plantuml.ugraphic.color.AbstractColorMapper <|-- net.sourceforge.plantuml.ugraphic.color.ColorMapperMonochrome
net.sourceforge.plantuml.skin.Component <|-- net.sourceforge.plantuml.skin.ArrowComponent
net.sourceforge.plantuml.project.solver.Solver <|.. net.sourceforge.plantuml.project.solver.SolverImpl
net.sourceforge.plantuml.project.solver.AbstractSolver <|-- net.sourceforge.plantuml.project.solver.SolverImpl
net.sourceforge.plantuml.UmlDiagram <|-- net.sourceforge.plantuml.sprite.ListSpriteDiagram
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandElseIf2
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.AbstractExtremityFactory
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolSimpleAbstract
net.sourceforge.plantuml.graphic.UGraphicDelegator <|-- net.sourceforge.plantuml.svek.UGraphicForSnake
net.sourceforge.plantuml.svek.UGraphicForSnake +.. net.sourceforge.plantuml.svek.UGraphicForSnake.PendingSnake
net.sourceforge.plantuml.tim.TFunction <|.. net.sourceforge.plantuml.tim.stdlib.InvokeProcedure
net.sourceforge.plantuml.command.CommandMultilines <|-- net.sourceforge.plantuml.command.CommandMultilinesCaption
net.sourceforge.plantuml.activitydiagram3.ftile.Swimable <|-- net.sourceforge.plantuml.activitydiagram3.Instruction
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandRotate
net.sourceforge.plantuml.sequencediagram.teoz.Bordered <|.. net.sourceforge.plantuml.sequencediagram.teoz.TileArguments
net.sourceforge.plantuml.ugraphic.ClipContainer <|.. net.sourceforge.plantuml.braille.UGraphicBraille
net.sourceforge.plantuml.ugraphic.UGraphic2 <|.. net.sourceforge.plantuml.braille.UGraphicBraille
net.sourceforge.plantuml.ugraphic.AbstractUGraphic <|-- net.sourceforge.plantuml.braille.UGraphicBraille
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverCenteredCharacterTikz2
javax.swing.JFrame <|-- net.sourceforge.plantuml.swing.LicenseWindow
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementPyramid
net.sourceforge.plantuml.svek.CucaDiagramFileMaker <|.. net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk
net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk +.. net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk.Drawing
net.sourceforge.plantuml.elk.TextBlockBackcolored <|.. net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk.Drawing
net.sourceforge.plantuml.elk.AbstractTextBlock <|-- net.sourceforge.plantuml.elk.CucaDiagramFileMakerElk.Drawing
net.sourceforge.plantuml.creole.Stripe <|.. net.sourceforge.plantuml.creole.legacy.StripeCode
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.legacy.StripeCode
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.svg.DriverEllipseSvg
net.sourceforge.plantuml.activitydiagram3.ftile.FtileFactoryDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileFactoryDelegatorRepeat
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementNamed
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandDiamondAssociation
net.sourceforge.plantuml.ugraphic.Scalable <|.. net.sourceforge.plantuml.ugraphic.ULine
net.sourceforge.plantuml.ugraphic.UShapeSized <|.. net.sourceforge.plantuml.ugraphic.ULine
net.sourceforge.plantuml.ugraphic.AbstractShadowable <|-- net.sourceforge.plantuml.ugraphic.ULine
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverNoneTikz
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementUrl
net.sourceforge.plantuml.skin.ArrowComponent <|.. net.sourceforge.plantuml.asciiart.ComponentTextSelfArrow
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextSelfArrow
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseControl
net.sourceforge.plantuml.salt.element.ElementPyramid <|-- net.sourceforge.plantuml.salt.element.ElementPyramidScrolled
net.sourceforge.plantuml.style.WithStyle <|.. net.sourceforge.plantuml.sequencediagram.Englober
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.svek.EntityImageDegenerated
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.ReverseHsluvColor
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.descdiagram.command.CommandCreateElementParenthesis
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.AbstractElementText
net.sourceforge.plantuml.activitydiagram3.Instruction <|-- net.sourceforge.plantuml.activitydiagram3.InstructionCollection
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolTogether
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandStart3
net.sourceforge.plantuml.ugraphic.UShape <|-- net.sourceforge.plantuml.creole.UCreole
net.sourceforge.plantuml.graphic.HtmlCommand <|.. net.sourceforge.plantuml.graphic.SpriteCommand
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandDefineStateLong
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.eps.DriverImageEps
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sprite.CommandStdlib
net.sourceforge.plantuml.command.CommandMultilines <|-- net.sourceforge.plantuml.command.CommandMultilinesTitle
net.sourceforge.plantuml.command.PSystemBasicFactory <|-- net.sourceforge.plantuml.ditaa.PSystemDitaaFactory
net.sourceforge.plantuml.ugraphic.Scalable <|.. net.sourceforge.plantuml.ugraphic.UEllipse
net.sourceforge.plantuml.ugraphic.UShapeSized <|.. net.sourceforge.plantuml.ugraphic.UEllipse
net.sourceforge.plantuml.ugraphic.AbstractShadowable <|-- net.sourceforge.plantuml.ugraphic.UEllipse
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.ugraphic.TextBlockInEllipse
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.ugraphic.TextBlockInEllipse
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandNamespaceEmpty
net.sourceforge.plantuml.project.solver.Solver <|.. net.sourceforge.plantuml.project.solver.AbstractSolver
net.sourceforge.plantuml.sequencediagram.Event <|.. net.sourceforge.plantuml.sequencediagram.Delay
net.sourceforge.plantuml.style.WithStyle <|.. net.sourceforge.plantuml.sequencediagram.Delay
net.sourceforge.plantuml.sequencediagram.AbstractEvent <|-- net.sourceforge.plantuml.sequencediagram.Delay
net.sourceforge.plantuml.code.Transcoder <|.. net.sourceforge.plantuml.code.TranscoderSmartProtected
net.sourceforge.plantuml.ugraphic.visio.VisioShape <|.. net.sourceforge.plantuml.ugraphic.visio.VisioLine
net.sourceforge.plantuml.sequencediagram.EventWithDeactivate <|.. net.sourceforge.plantuml.sequencediagram.AbstractMessage
net.sourceforge.plantuml.style.WithStyle <|.. net.sourceforge.plantuml.sequencediagram.AbstractMessage
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextGroupingTail
java.util.Comparator <|-- net.sourceforge.plantuml.bpm.Chain
net.sourceforge.plantuml.posimo.Racorder <|.. net.sourceforge.plantuml.posimo.RacorderOrthogonal
net.sourceforge.plantuml.posimo.RacorderAbstract <|-- net.sourceforge.plantuml.posimo.RacorderOrthogonal
net.sourceforge.plantuml.ugraphic.UParam <|.. net.sourceforge.plantuml.ugraphic.UParamNull
net.sourceforge.plantuml.cucadiagram.CucaDiagram <|-- net.sourceforge.plantuml.classdiagram.AbstractEntityDiagram
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.descdiagram.EntityImageRequirement
net.sourceforge.plantuml.descdiagram.EntityImageRequirement +.. net.sourceforge.plantuml.descdiagram.EntityImageRequirement.MyUGraphicEllipse
net.sourceforge.plantuml.descdiagram.AbstractUGraphicHorizontalLine <|-- net.sourceforge.plantuml.descdiagram.EntityImageRequirement.MyUGraphicEllipse
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolCard
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockLineBefore
net.sourceforge.plantuml.svek.WithPorts <|.. net.sourceforge.plantuml.graphic.TextBlockLineBefore
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockLineBefore
net.sourceforge.plantuml.sequencediagram.graphic.FrontierStack <|.. net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl
net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl +.. net.sourceforge.plantuml.sequencediagram.graphic.FrontierStackImpl.Stack
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceTaskStarts
net.sourceforge.plantuml.ugraphic.Shadowable <|.. net.sourceforge.plantuml.ugraphic.AbstractShadowable
net.sourceforge.plantuml.code.StringCompressor <|.. net.sourceforge.plantuml.code.ArobaseStringCompressor2
net.sourceforge.plantuml.skin.Context2D <|.. net.sourceforge.plantuml.skin.SimpleContext2D
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.donors.PSystemDonors
net.sourceforge.plantuml.sequencediagram.command.CommandParticipant <|-- net.sourceforge.plantuml.sequencediagram.command.CommandParticipantA3
net.sourceforge.plantuml.ugraphic.MutableImage <|.. net.sourceforge.plantuml.ugraphic.PixelImage
net.sourceforge.plantuml.cucadiagram.dot.Graphviz <|.. net.sourceforge.plantuml.vizjs.GraphvizJs
net.sourceforge.plantuml.vizjs.GraphvizJs +.. net.sourceforge.plantuml.vizjs.GraphvizJs.JsThread
net.sourceforge.plantuml.vizjs.Thread <|-- net.sourceforge.plantuml.vizjs.GraphvizJs.JsThread
net.sourceforge.plantuml.skin.AbstractComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseNewpage
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.visio.DriverDotPathVdx
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementRadioCheckbox
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandCreateClass
net.sourceforge.plantuml.sequencediagram.command.CommandExoArrowAny <|-- net.sourceforge.plantuml.sequencediagram.command.CommandExoArrowLeft
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterStartsub
net.sourceforge.plantuml.PlainStringsDiagram <|-- net.sourceforge.plantuml.stats.PSystemStats
net.sourceforge.plantuml.sequencediagram.Grouping <|-- net.sourceforge.plantuml.sequencediagram.GroupingStart
net.sourceforge.plantuml.asciiart.AbstractComponentText <|-- net.sourceforge.plantuml.asciiart.ComponentTextActor
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.golem.TilesField
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.golem.TilesField
net.sourceforge.plantuml.style.WithStyle <|-- net.sourceforge.plantuml.skin.Component
net.sourceforge.plantuml.cucadiagram.IEntity <|-- net.sourceforge.plantuml.cucadiagram.IGroup
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.project.command.CommandLabelOnColumn
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryExtends
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryExtends
net.sourceforge.plantuml.graphic.HtmlCommand <|.. net.sourceforge.plantuml.graphic.Img
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryPlus
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryPlus
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseActor
net.sourceforge.plantuml.svek.ArithmeticStrategy <|.. net.sourceforge.plantuml.svek.ArithmeticStrategyMax
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandIf2
net.sourceforge.plantuml.graphic.USymbolSimpleAbstract <|-- net.sourceforge.plantuml.graphic.USymbolInterface
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandAddMethod
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverAtomTextTikz
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.salt.CommandSalt
net.sourceforge.plantuml.AFile <|.. net.sourceforge.plantuml.AFileRegular
net.sourceforge.plantuml.timingdiagram.Player <|-- net.sourceforge.plantuml.timingdiagram.PlayerAnalog
net.sourceforge.plantuml.sequencediagram.InGroupable <|.. net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse
net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.GroupingGraphicalElementElse
net.sourceforge.plantuml.svek.AbstractEntityImage <|-- net.sourceforge.plantuml.svek.image.EntityImageBranch
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.elk.ElkPath
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.statediagram.command.CommandCreatePackageState
net.sourceforge.plantuml.command.regex.IRegex <|.. net.sourceforge.plantuml.command.regex.RegexConcat
net.sourceforge.plantuml.command.regex.RegexComposed <|-- net.sourceforge.plantuml.command.regex.RegexConcat
net.sourceforge.plantuml.cucadiagram.CharSequence <|.. net.sourceforge.plantuml.cucadiagram.Member
net.sourceforge.plantuml.creole.Iterable <|.. net.sourceforge.plantuml.creole.Sheet
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.nwdiag.CommandProperty
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandActivityLong3
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.AlwaysTrue
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.braille.DriverTextBraille
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandTitle
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityParenthesis2
net.sourceforge.plantuml.ISkinSimple <|-- net.sourceforge.plantuml.ISkinParam
net.sourceforge.plantuml.project.draw.TimeHeaderCalendar <|-- net.sourceforge.plantuml.project.draw.TimeHeaderYearly
net.sourceforge.plantuml.graphic.FontChange <|.. net.sourceforge.plantuml.graphic.SizeChange
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.braille.DriverLineBraille
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.activitydiagram3.ftile.TextBlockInterceptorUDrawable
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.activitydiagram3.ftile.TextBlockInterceptorUDrawable
net.sourceforge.plantuml.skin.rose.AbstractComponentRoseArrow <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseSelfArrow
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TileImageSvg
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TileImageSvg
net.sourceforge.plantuml.ugraphic.UGraphic <|.. net.sourceforge.plantuml.ugraphic.LimitFinder
net.sourceforge.plantuml.ugraphic.UGraphicNo <|-- net.sourceforge.plantuml.ugraphic.LimitFinder
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.eps.DriverRectangleEps
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterLegacyDefine
net.sourceforge.plantuml.eps.PostScriptCommand <|.. net.sourceforge.plantuml.eps.PostScriptCommandMacro
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandStop3
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.eps.DriverDotPathEps
net.sourceforge.plantuml.sequencediagram.AbstractMessage <|-- net.sourceforge.plantuml.sequencediagram.Message
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.wbs.CommandWBSItem
net.sourceforge.plantuml.creole.Fission +.. net.sourceforge.plantuml.creole.Fission.StripeSimpleInternal
net.sourceforge.plantuml.creole.Stripe <|.. net.sourceforge.plantuml.creole.Fission.StripeSimpleInternal
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.classdiagram.FullLayout
net.sourceforge.plantuml.command.Command <|.. net.sourceforge.plantuml.command.CommandMultilines
net.sourceforge.plantuml.sequencediagram.teoz.Tile <|.. net.sourceforge.plantuml.sequencediagram.teoz.NoteTile
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.NoteTile
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandSplitEnd3
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.IsDark
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.visio.DriverUPathVdx
net.sourceforge.plantuml.preproc.ReadLine <|.. net.sourceforge.plantuml.preproc.ReadLineList
net.sourceforge.plantuml.sequencediagram.graphic.Arrow <|-- net.sourceforge.plantuml.sequencediagram.graphic.MessageSelfArrow
net.sourceforge.plantuml.ftp.Runnable <|.. net.sourceforge.plantuml.ftp.FtpLoop
net.sourceforge.plantuml.activitydiagram3.ftile.ConnectionTranslatable <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionVerticalDown
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.ConnectionVerticalDown
net.sourceforge.plantuml.sequencediagram.teoz.Tile <|.. net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile
net.sourceforge.plantuml.sequencediagram.teoz.CommonTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.ugraphic.tikz.DriverImageTikz
net.sourceforge.plantuml.creole.rosetta.ReaderWiki <|.. net.sourceforge.plantuml.creole.rosetta.ReaderDokuwiki
net.sourceforge.plantuml.creole.rosetta.ReaderAbstractWiki <|-- net.sourceforge.plantuml.creole.rosetta.ReaderDokuwiki
net.sourceforge.plantuml.creole.rosetta.ReaderDokuwiki +.. net.sourceforge.plantuml.creole.rosetta.ReaderDokuwiki.AutoGroup
net.sourceforge.plantuml.creole.rosetta.ReaderDokuwiki +.. net.sourceforge.plantuml.creole.rosetta.ReaderDokuwiki.StartEndGroup
net.sourceforge.plantuml.creole.Stencil <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FloatingNote
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FloatingNote
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FloatingNote
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.bpm.CommandResume
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterAffectationDefine
net.sourceforge.plantuml.Scale <|.. net.sourceforge.plantuml.ScaleWidthAndHeight
net.sourceforge.plantuml.ScaleProtected <|-- net.sourceforge.plantuml.ScaleWidthAndHeight
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.FtileForkInnerOverlapped
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandActivate2
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionIf
net.sourceforge.plantuml.activitydiagram3.InstructionCollection <|.. net.sourceforge.plantuml.activitydiagram3.InstructionIf
net.sourceforge.plantuml.activitydiagram3.WithNote <|-- net.sourceforge.plantuml.activitydiagram3.InstructionIf
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.classdiagram.command.CommandHideShow2
net.sourceforge.plantuml.posimo.Decor <|.. net.sourceforge.plantuml.posimo.DecorInterfaceProvider
net.sourceforge.plantuml.command.CommandMultilines2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandNoteLong
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandNolink
net.sourceforge.plantuml.api.PSystemFactory <|.. net.sourceforge.plantuml.command.PSystemAbstractFactory
net.sourceforge.plantuml.tim.stdlib.SimpleReturnFunction <|-- net.sourceforge.plantuml.tim.stdlib.VariableExists
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.wire.Block
net.sourceforge.plantuml.wire.Block +.. net.sourceforge.plantuml.wire.Block.Pos
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.golem.Tile
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.golem.Tile
net.sourceforge.plantuml.graphic.UnusedSpace +.. net.sourceforge.plantuml.graphic.UnusedSpace.Point
java.io.Writer <|-- net.sourceforge.plantuml.json.WritingBuffer
net.sourceforge.plantuml.posimo.Positionable <|.. net.sourceforge.plantuml.posimo.Label
net.sourceforge.plantuml.activitydiagram3.ftile.AbstractFtile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileMargedRight
net.sourceforge.plantuml.api.INumberAnalyzed <|.. net.sourceforge.plantuml.api.NumberAnalyzed2
net.sourceforge.plantuml.Scale <|.. net.sourceforge.plantuml.ScaleProtected
net.sourceforge.plantuml.ugraphic.UDriver <|.. net.sourceforge.plantuml.braille.DriverDotPathBraille
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementFromTo
net.sourceforge.plantuml.sequencediagram.Event <|.. net.sourceforge.plantuml.sequencediagram.Notes
net.sourceforge.plantuml.sequencediagram.Iterable <|.. net.sourceforge.plantuml.sequencediagram.Notes
net.sourceforge.plantuml.sequencediagram.AbstractEvent <|-- net.sourceforge.plantuml.sequencediagram.Notes
net.sourceforge.plantuml.project.core3.Histogram <|.. net.sourceforge.plantuml.project.OpenClose
net.sourceforge.plantuml.project.LoadPlanable <|.. net.sourceforge.plantuml.project.OpenClose
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.nwdiag.GridTextBlockSimple
net.sourceforge.plantuml.picoweb.Runnable <|.. net.sourceforge.plantuml.picoweb.PicoWebServer
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterTheme
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.creole.legacy.PSystemCreole
net.sourceforge.plantuml.project.lang.Something <|.. net.sourceforge.plantuml.project.lang.ComplementDayOfWeek
net.sourceforge.plantuml.salt.DataSource <|.. net.sourceforge.plantuml.salt.DataSourceImpl
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryDiamond
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryDiamond
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.sequencediagram.command.CommandDelay
net.sourceforge.plantuml.graphic.UGraphicDelegator <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.UGraphicInterceptorGoto
net.sourceforge.plantuml.Hideable <|.. net.sourceforge.plantuml.cucadiagram.Link
net.sourceforge.plantuml.Removeable <|.. net.sourceforge.plantuml.cucadiagram.Link
net.sourceforge.plantuml.cucadiagram.WithLinkType <|-- net.sourceforge.plantuml.cucadiagram.Link
net.sourceforge.plantuml.graphic.HtmlCommand <|.. net.sourceforge.plantuml.graphic.Text
net.sourceforge.plantuml.project.draw.TaskDraw <|.. net.sourceforge.plantuml.project.draw.TaskDrawSeparator
org.apache.tools.ant.Task <|-- net.sourceforge.plantuml.ant.PlantUmlTask
net.sourceforge.plantuml.activitydiagram3.ftile.Ftile <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileOverpassing
net.sourceforge.plantuml.error.PSystemError <|-- net.sourceforge.plantuml.error.PSystemErrorV2
net.sourceforge.plantuml.json.JsonValue <|-- net.sourceforge.plantuml.json.JsonNumber
net.sourceforge.plantuml.sequencediagram.Event <|.. net.sourceforge.plantuml.sequencediagram.Newpage
net.sourceforge.plantuml.sequencediagram.AbstractEvent <|-- net.sourceforge.plantuml.sequencediagram.Newpage
net.sourceforge.plantuml.preproc.ReadLineNumbered <|.. net.sourceforge.plantuml.preproc2.Preprocessor
net.sourceforge.plantuml.graphic.USymbol <|-- net.sourceforge.plantuml.graphic.USymbolFrame
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.timingdiagram.command.CommandBinary
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.command.CommandHideUnlinked
net.sourceforge.plantuml.svek.extremity.ExtremityFactory <|.. net.sourceforge.plantuml.svek.extremity.ExtremityFactoryTriangle
net.sourceforge.plantuml.svek.AbstractExtremityFactory <|-- net.sourceforge.plantuml.svek.extremity.ExtremityFactoryTriangle
net.sourceforge.plantuml.tim.Eater <|-- net.sourceforge.plantuml.tim.EaterDumpMemory
javax.swing.JFrame <|-- net.sourceforge.plantuml.swing.MainWindow2
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityArrow
net.sourceforge.plantuml.cucadiagram.ILeaf <|.. net.sourceforge.plantuml.cucadiagram.entity.EntityImpl
net.sourceforge.plantuml.cucadiagram.IGroup <|.. net.sourceforge.plantuml.cucadiagram.entity.EntityImpl
javax.swing.JFrame <|-- net.sourceforge.plantuml.swing.SpriteWindow
net.sourceforge.plantuml.timingdiagram.command.CommandChangeState <|-- net.sourceforge.plantuml.timingdiagram.command.CommandChangeStateByTime
net.sourceforge.plantuml.sequencediagram.teoz.AbstractTile <|-- net.sourceforge.plantuml.sequencediagram.teoz.CommunicationTileNoteRight
java.io.IOException <|-- net.sourceforge.plantuml.code.NoPlantumlCompressionException
net.sourceforge.plantuml.api.TimeoutExecutor +.. net.sourceforge.plantuml.api.TimeoutExecutor.MyThread
net.sourceforge.plantuml.api.Thread <|-- net.sourceforge.plantuml.api.TimeoutExecutor.MyThread
net.sourceforge.plantuml.creole.command.Command <|.. net.sourceforge.plantuml.creole.command.CommandCreoleExposantChange
net.sourceforge.plantuml.creole.command.CommandCreoleCache <|-- net.sourceforge.plantuml.creole.command.CommandCreoleExposantChange
net.sourceforge.plantuml.project.lang.SentenceSimple <|-- net.sourceforge.plantuml.project.lang.SentenceIsColored
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.braille.BrailleDrawer
net.sourceforge.plantuml.ugraphic.visio.VisioShape <|.. net.sourceforge.plantuml.ugraphic.visio.VisioRectangle
net.sourceforge.plantuml.sequencediagram.graphic.Arrow <|-- net.sourceforge.plantuml.sequencediagram.graphic.MessageExoArrow
net.sourceforge.plantuml.activitydiagram3.ftile.vertical.FtileDecorate <|-- net.sourceforge.plantuml.activitydiagram3.ftile.FtileMinWidthCentered
net.sourceforge.plantuml.ugraphic.color.ColorMapper <|.. net.sourceforge.plantuml.ugraphic.color.ColorMapperTransparentWrapper
net.sourceforge.plantuml.ugraphic.color.AbstractColorMapper <|-- net.sourceforge.plantuml.ugraphic.color.ColorMapperTransparentWrapper
net.sourceforge.plantuml.command.PSystemCommandFactory <|-- net.sourceforge.plantuml.flowdiagram.FlowDiagramFactory
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionRepeat
net.sourceforge.plantuml.Scale <|.. net.sourceforge.plantuml.ScaleSimple
net.sourceforge.plantuml.ScaleProtected <|-- net.sourceforge.plantuml.ScaleSimple
net.sourceforge.plantuml.skin.AbstractComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseLine
net.sourceforge.plantuml.graphic.TextBlock <|.. net.sourceforge.plantuml.graphic.TextBlockRaw
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.graphic.TextBlockRaw
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.dedication.PSystemDedication
net.sourceforge.plantuml.ugraphic.UShape <|-- net.sourceforge.plantuml.creole.rosetta.URosetta
net.sourceforge.plantuml.creole.atom.Atom <|.. net.sourceforge.plantuml.creole.legacy.AtomText
net.sourceforge.plantuml.creole.atom.AbstractAtom <|-- net.sourceforge.plantuml.creole.legacy.AtomText
net.sourceforge.plantuml.creole.legacy.AtomText +.. net.sourceforge.plantuml.creole.legacy.AtomText.DelayedDouble
net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation +.. net.sourceforge.plantuml.activitydiagram3.ftile.WormMutation.MinMax
net.sourceforge.plantuml.ugraphic.UChange <|-- net.sourceforge.plantuml.ugraphic.UBackground
net.sourceforge.plantuml.salt.element.AbstractElement <|-- net.sourceforge.plantuml.salt.element.ElementMenuPopup
net.sourceforge.plantuml.graphic.UDrawable <|.. net.sourceforge.plantuml.eggs.PSystemColors
net.sourceforge.plantuml.PlainDiagram <|-- net.sourceforge.plantuml.eggs.PSystemColors
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandSwimlane2
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithDiamonds <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithOneLink
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithOneLink +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithOneLink.ConnectionVerticalTop
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithOneLink.ConnectionVerticalTop
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithOneLink +.. net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithOneLink.ConnectionVerticalBottom
net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.AbstractConnection <|-- net.sourceforge.plantuml.activitydiagram3.ftile.vcompact.cond.FtileSwitchWithOneLink.ConnectionVerticalBottom
net.sourceforge.plantuml.activitydiagram3.Instruction <|.. net.sourceforge.plantuml.activitydiagram3.InstructionSplit
net.sourceforge.plantuml.command.PSystemSingleLineFactory <|-- net.sourceforge.plantuml.stats.PSystemStatsFactory
net.sourceforge.plantuml.skin.AbstractTextualComponent <|-- net.sourceforge.plantuml.skin.rose.ComponentRoseNoteHexagonal
net.sourceforge.plantuml.sequencediagram.graphic.GraphicalElement <|-- net.sourceforge.plantuml.sequencediagram.graphic.LifeDestroy
net.sourceforge.plantuml.svek.extremity.Extremity <|-- net.sourceforge.plantuml.svek.extremity.ExtremityCircle
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram.command.CommandInnerConcurrent
net.sourceforge.plantuml.stats.api.StatsLine <|.. net.sourceforge.plantuml.stats.StatsLineImpl
net.sourceforge.plantuml.svek.IEntityImage <|.. net.sourceforge.plantuml.svek.EntityImageProtected
net.sourceforge.plantuml.svek.Untranslated <|.. net.sourceforge.plantuml.svek.EntityImageProtected
net.sourceforge.plantuml.graphic.AbstractTextBlock <|-- net.sourceforge.plantuml.svek.EntityImageProtected
net.sourceforge.plantuml.command.CommandMultilines <|-- net.sourceforge.plantuml.sequencediagram.command.CommandReferenceMultilinesOverSeveral
net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored +.. net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored.Iterator2
net.sourceforge.plantuml.sequencediagram.graphic.Iterator <|.. net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored.Iterator2
net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored +.. net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored.Coll2
net.sourceforge.plantuml.sequencediagram.graphic.AbstractCollection <|-- net.sourceforge.plantuml.sequencediagram.graphic.SegmentColored.Coll2
net.sourceforge.plantuml.command.SingleLineCommand2 <|-- net.sourceforge.plantuml.activitydiagram3.command.CommandRepeat3
net.sourceforge.plantuml.command.regex.IRegex <|.. net.sourceforge.plantuml.command.regex.RegexLeaf
@enduml